{$I MacrosCassio.inc} (************************************************************************){Backward compatibility.}{$SETC SystemSevenOrLater := TRUE}{$IFC not defined TARGET_API_MAC_CARBON }{$SETC TARGET_API_MAC_CARBON := TRUE}{$ENDC}{$IFC not defined OLDROUTINENAMES }{$SETC OLDROUTINENAMES := FALSE}{$ENDC}{$SETC OLDROUTINELOCATIONS := FALSE}{$SETC PROCTYPE := TRUE}{$IFC not defined TARGET_CPU_PPC }{$SETC TARGET_CPU_PPC := POWERPC}{$ENDC} (*********************************************************************){$PRAGMAC align_array_members on }{$PRAGMAC align power }{$PRAGMAC options align= power }{$PRAGMAC function_align 16}{$ALIGN PowerPC}(***************  MACROS DE COMPATIBILITE CODEWARRIOR <-> GNU PASCAL  *****************){ Des macros pour fabriquer et defaire des pointeurs : ce n'est pas la meme  methode dans CodeWarrior et GNU Pascal }{$DEFINEC MAKE_MEMORY_POINTER(p)  Pointer((p)) }{$DEFINEC POINTER_VALUE(p)  Ord4((p)) }{$DEFINEC POINTER_ADD(p,increment) MAKE_MEMORY_POINTER(POINTER_VALUE((p)) + (increment)) }{$DEFINEC  do_debug   true }{$DEFINEC universal univ}{$DEFINEC EXTERNAL_NAME(s)  external }{$DEFINEC ATTRIBUTE_NAME(s) }{$DEFINEC MAXINT_16BITS  32767  }{$DEFINEC String255  str255}{$DEFINEC Str255ToString(s) s}{$DEFINEC StringToStr255(s) s}{$DEFINEC StringToStr63(s) s}{$DEFINEC StringIntoStr255(source,dest) begin dest := source; end }{$DEFINEC MY_FOUR_CHAR_CODE(s) (s) }{$DEFINEC MyDrawString DrawString}{$DEFINEC MyStringWidth StringWidth}{$definec string_accessors_are_macros 1}{$ifc string_accessors_are_macros }{$definec LENGTH_OF_STRING(s) (ord(s[0])) }{$definec SET_LENGTH_OF_STRING( s , len )  s[0] := chr((len)) }{$endc}{$DEFINEC COUNT_LEADING_ZEROS(n)  ( __cntlzw((n))) }{$DEFINEC SAFE_COUNT_LEADING_ZEROS(n, result) begin if ((n) and $FFFF8000) <> 0 then result := COUNT_LEADING_ZEROS((n) shr 15) - 15 else result := COUNT_LEADING_ZEROS((n)) end }{$DEFINEC CASSIO_EST_COMPILE_POUR_PROCESSEUR_INTEL FALSE}{$DEFINEC Discard(a) begin if (SizeOf(a) < 0) then begin end; end }{$DEFINEC Discard2(a,b) begin Discard(a);Discard(b); end }{$DEFINEC Discard3(a,b,c) begin Discard(a);Discard(b);Discard(c); end }{$DEFINEC Discard4(a,b,c,d) begin Discard(a);Discard(b);Discard(c);Discard(d); end }{$DEFINEC Discard5(a,b,c,d,e) begin Discard(a);Discard(b);Discard(c);Discard(d);Discard(e);  end }{$DEFINEC Discard6(a,b,c,d,e,f) begin Discard(a);Discard(b);Discard(c);Discard(d);Discard(e);Discard(f); end }{$DEFINEC Discard7(a,b,c,d,e,f,g) begin Discard(a);Discard(b);Discard(c);Discard(d);Discard(e);Discard(f);Discard(g); end }