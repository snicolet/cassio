unit MyTEPrinting;interface	uses		MyPrinting;	type		TEPObject = object(PObject)				te: TEHandle;				function CountPages (r: Rect): integer;				override;				function DrawPage (r: Rect; gp: GrafPtr; pg: integer; first, last: boolean): OSErr;				override;			end;implementation	function GetNextStart (r: Rect; startline: integer; te: TEHandle): integer;		var			hite, endline: integer;	begin		hite := r.bottom - r.top;		endline := startline;		while (endline <= te^^.nLines) and (TEGetHeight(endline, startline, te) < hite) do begin			endline := endline + 1;		end;		GetNextStart := endline;	end;	function TEPObject.CountPages (r: Rect): integer;		var			count, startline: integer;	begin		count := 0;		startline := 1;		while startline <= te^^.nLines do begin			startline := GetnextStart(r, startline, te);			count := count + 1;		end;		CountPages := count;	end;	function TEPObject.DrawPage (r: Rect; gp: GrafPtr; pg: integer; first, last: boolean): OSErr;		var			startline, endline, i, offset: integer;			oldport, oldinport: GrafPtr;			vr, dr: Rect;	begin		Getport(oldport);		SetPort(gp);		oldinport := te^^.inPort;		te^^.inPort := gp;		vr := te^^.viewRect;		dr := te^^.destRect;		startline := 1;		for i := 1 to pg - 1 do begin			startline := GetNextStart(r, startline, te);		end;		endline := GetNextStart(r, startline, te) - 1;		r.bottom := r.top + TEGetHeight(endline, startline, te);		if startline = 1 then begin			offset := 0;		end		else begin			offset := TEGetHeight(startline - 1, 1, te);		end;		te^^.viewRect := r;		te^^.destRect.top := te^^.viewRect.top - offset;		TEUpdate(r, te);		te^^.viewRect := vr;		te^^.destRect := dr;		te^^.inPort := oldinport;		Setport(oldport);		DrawPage := noErr;	end;end.