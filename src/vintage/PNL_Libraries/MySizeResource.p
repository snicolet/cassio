unit MySizeResource;interface	uses		Types;{$PUSH}{$ALIGN MAC68K}	type		sizeRsrc = packed record				obsolete1: boolean;				accept_suspend_events: boolean;				obsolete2: boolean;				can_background: boolean;				does_activate_on_fg_switch: boolean;				only_background: boolean;				get_front_clicks: boolean;				accept_app_died_events: boolean;				bit_32_compatibile: boolean;				high_level_event_aware: boolean;				local_remote_hl_events: boolean;				stationary_aware: boolean;				use_textedit_services: boolean;				reserved1: boolean;				reserved2: boolean;				reserved3: boolean;				size: longint;				min_size: longint;			end;{$ALIGN RESET}{$POP}	procedure GetSizeResource (var size: sizeRsrc);implementation	uses		Resources, Memory;	procedure GetSizeResource (var size: sizeRsrc);		var			hhhh: Handle;			p: ^integer;	begin		hhhh := Get1Resource('SIZE', 0);		if (hhhh = nil) | (GetHandleSize(hhhh) <> SizeOf(sizeRsrc)) then begin			hhhh := Get1Resource('SIZE', -1);		end;		if (hhhh = nil) | (GetHandleSize(hhhh) <> SizeOf(sizeRsrc)) then begin			p := @size;			p^ := 0;			size.size := longint(384) * 1024;			size.min_size := longint(384) * 1024;		end else begin			BlockMoveData(hhhh^, @size, SizeOf(sizeRsrc));		end;	end;end.