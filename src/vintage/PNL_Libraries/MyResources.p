unit MyResources;interface	uses		Types, Quickdraw;		const		kResChain = -13001;		kCurrentResFile = -13002;			function MGetResource( resfile: integer; typ: OSType; id: integer; var data: univ Handle ): OSErr;	function MGetPicture( id: integer; var ph: PicHandle ): OSErr;implementation	uses		Errors, Memory, Resources;{ Damn Resource Manager is so broken! }	function MGetResError( data: Handle ): OSErr;		var			err: OSErr;	begin		if data <> nil then begin			err := noErr;		end else begin			err := ResError;			if err = noErr then begin				err := -1;			end;		end;		MGetResError := err;	end;		function MGetPicture( id: integer; var ph: PicHandle ): OSErr;		var			err: OSErr;	begin		err := noErr;		ph := GetPicture( id );		if (ph = nil) or (ph^ = nil) then begin			err := MemError;			if err = noErr then begin				err := resNotFound;			end;			ph := nil;		end;		MGetPicture := err;	end;		function MGetResource( resfile: integer; typ: OSType; id: integer; var data: univ Handle ): OSErr;		var			err: OSErr;			saved: integer;	begin		case resfile of			kResChain: begin				data := GetResource( typ, id );				err := MGetResError( data );			end;			kCurrentResFile: begin				data := Get1Resource( typ, id );				err := MGetResError( data );			end;			otherwise begin				saved := CurResFile;				UseResFile( resfile );				data := Get1Resource( typ, id );				err := MGetResError( data );				UseResFile( saved );			end;		end;		MGetResource := err;	end;	end.