unit MyMenus;interface	uses		MacTypes, Menus;	procedure SetIDItem (menu, item: integer; s: Str255);	function GetIDItem (menu, item: integer): Str255;	procedure SetItemEnable (mh: MenuHandle; item: integer; enable: boolean);	function GetItemEnable (mh: MenuHandle; item: integer): boolean;	procedure SetIDItemEnable (menu, item: integer; enable: boolean);	function GetIDItemEnable (menu, item: integer): boolean;	procedure DotItem (mh: MenuHandle; item: integer; dotted: boolean);	procedure ClearMenuHandle (mh: MenuHandle);	procedure SafeAppendMenu (mh: MenuHandle; item: Str255);implementation{	function TPbtst(value:longint; bit:integer):Boolean;	begin		TPbtst := btst(value, bit);	end;}		procedure ClearMenuHandle (mh: MenuHandle);	begin		while (CountMItems(mh) > 0) do begin			DeleteMenuItem(mh, 1);		end;	end;	procedure SafeAppendMenu (mh: MenuHandle; item: Str255);	begin		AppendMenu(mh, 'fred');		SetMenuItemText(mh, CountMItems(mh), item);	end;	procedure SetIDItem (menu, item: integer; s: Str255);	begin		SetMenuItemText(GetMenuHandle(menu), item, s);	end;	function GetIDItem (menu, item: integer): Str255;		var			s: Str255;	begin		GetMenuItemText(GetMenuHandle(menu), item, s);		GetIDItem := s;	end;	procedure SetItemEnable (mh: MenuHandle; item: integer; enable: boolean);	begin		if enable then begin			EnableItem(mh, item);		end else begin			DisableItem(mh, item);		end;	end;	procedure SetIDItemEnable (menu, item: integer; enable: boolean);	begin		SetItemEnable(GetMenuHandle(menu), item, enable);	end;	function GetItemEnable (mh: MenuHandle; item: integer): boolean;	begin		GetItemEnable := (item > 31) or btst(mh^^.enableFlags, item);	end;	function GetIDItemEnable (menu, item: integer): boolean;	begin		GetIDItemEnable := GetItemEnable(GetMenuHandle(menu), item);	end;	procedure DotItem (mh: MenuHandle; item: integer; dotted: boolean);	begin		if dotted then begin			SetItemMark(mh, item, '¥');		end else begin			SetItemMark(mh, item, chr(0));		end;	end;end.