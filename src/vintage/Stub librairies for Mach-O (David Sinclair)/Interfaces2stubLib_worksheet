# Assumes default directory is set to a follder containing just the Pascal interface files# you want to contruct a custom CFM stub library for.# Note - The folder can hold other files (e.g., this script file) just so long as they don't use .pas (or .p) file name extensions# Set up name to use for stub library and fragment name# NOTE - edit 'xxx' to name of stub libraryset LibName 'ApplicationServices'# Get a list of interfaces file names#Assumes using GPC Pascal interfaces file extension.  If using CodeWarrior (or FPC) interfaces change "pas" to just "p".set InterfaceFileList "`files Å.p`"# Create (or open old) scratch files/windowsset DataScratch "DataScratch"open -n "{DataScratch}"set CodeScratch "CodeScratch"open -n "{CodeScratch}"set ExportScratch "ExportScratch.exp"open -n "{ExportScratch}"# Zap old scratch file contents if anyreplace ¥:° "" "{DataScratch}"replace ¥:° "" "{CodeScratch}"replace ¥:° "" "{ExportScratch}"# Extract all the data exportsStreamEdit {InterfaceFileList} -d -e '/¥[ ¶t]*var[ ¶t]*([a-zA-Z0-9_]+)¨1/ Print ¨1' -o "{DataScratch}"# Extract all the code exportsStreamEdit {InterfaceFileList} -d -e '/¥[ ¶t]*function[ ¶t]*([a-zA-Z0-9_]+)¨1/ Print ¨1;/¥[ ¶t]*procedure[ ¶t]*([a-zA-Z0-9_]+)¨1/ Print ¨1' -o "{CodeScratch}"# Build .exp input file for MakeStub# Build data exports if any foundif `Count -c "{DataScratch}"` > 0	echo '#{data}' >> "{ExportScratch}"	find ¥:°  "{DataScratch}"	copy ¤ "{DataScratch}"	paste ¤ "{ExportScratch}"end# Build code exports if any foundif `Count -c "{CodeScratch}"` > 0	echo '#{code}' >> "{ExportScratch}"	find ¥:°  "{CodeScratch}"	copy ¤ "{CodeScratch}"	paste ¤ "{ExportScratch}"endMakeStub "{ExportScratch}" -o "{LibName}" -fragname "{LibName}" -weakstub on# If you want to check/verify the created stub library's Data and TVector (i.e., code) exported names, uncomment to next line# DumpPEF "{LibName}"