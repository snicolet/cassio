	function Min (a, b: SInt32) : SInt32;     external;
	function Max (a, b: SInt32) : SInt32;     external;
procedure WritelnDansRapport(s : String255);     external;
procedure WriteDansRapport(s : String255);     external;
procedure WritelnNumDansRapport(s : String255; num : SInt32);     external;
procedure WriteNumDansRapport(s : String255; num : SInt32);     external;
procedure WritelnStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WritelnDansRapportThreadSafe(s : String255);     external;
function GetTailleReserveePourLesSegments : SInt32;     external;
function AllocatePointMultidimensionnel(n : SInt32; var p : PointMultidimensionnel) : boolean;     external;
procedure AnnulePointMultidimensionnel(var p : PointMultidimensionnel);     external;
  function NumEnString(num : SInt32) : String255;     external;
procedure WritelnStringDansRapport(s : String255);     external;
procedure DisposePointMultidimensionnel(var p : PointMultidimensionnel);     external;
procedure SetValeurDansPointMultidimensionnel(var p : PointMultidimensionnel; valeur : TypeReel);     external;
procedure IdentitePointMultidimensionnel(var p : PointMultidimensionnel);     external;
procedure HomothetiePointMultidimensionnel(var p,result : PointMultidimensionnel; scale : TypeReel);     external;
procedure NegationPointMultidimensionnel(var p,result : PointMultidimensionnel);     external;
procedure ValeurAbsoluePointMultidimensionnel(var p,result : PointMultidimensionnel);     external;
procedure AddPointMultidimensionnel(var p1,p2,resultat : PointMultidimensionnel);     external;
procedure DiffPointMultidimensionnel(var p1,p2,resultat : PointMultidimensionnel);     external;
procedure DivisionPointMultidimensionnel(var p1,p2,resultat : PointMultidimensionnel);     external;
procedure DivisionBorneePointMultidimensionnel(var p1,p2,resultat : PointMultidimensionnel; borne : TypeReel);     external;
procedure CombinaisonLineairePointMultidimensionnel(var p1,p2 : PointMultidimensionnel; lambda1,lambda2 : TypeReel; var resultat : PointMultidimensionnel);     external;
procedure CopierPointMultidimensionnel(var source,dest : PointMultidimensionnel);     external;
procedure CopierOpposePointMultidimensionnel(var source,dest : PointMultidimensionnel);     external;
function ProduitScalairePointMultidimensionnel(var p1,p2 : PointMultidimensionnel) : TypeReel;     external;
function CombinaisonScalairePointMultidimensionnel(var p1,p2,p3 : PointMultidimensionnel; lambda1,lambda2 : TypeReel) : TypeReel;     external;
function EcritPointMultidimensionnelDansFichierTexte(var fic : FichierTEXT; var p : PointMultidimensionnel) : OSErr;     external;
function LitPointMultidimensionnelDansFichierTexte(var fic : FichierTEXT; var p : PointMultidimensionnel) : OSErr;     external;
function FichierTexteDeCassioExiste(nom : String255; var fic : FichierTEXT) : OSErr;     external;
function OuvreFichierTexte(var fic : FichierTEXT) : OSErr;     external;
function FermeFichierTexte(var fic : FichierTEXT) : OSErr;     external;
function FichierTexteExiste(nom : String255 ; vRefNum : SInt16; var fic : FichierTEXT) : OSErr;     external;
function CreeFichierTexteDeCassio(nom : String255; var fic : FichierTEXT) : OSErr;     external;
function VideFichierTexte(var fic : FichierTEXT) : OSErr;     external;
procedure SetFileCreatorFichierTexte(var fic : FichierTEXT; quelType : OSType);     external;
procedure SetFileTypeFichierTexte(var fic : FichierTEXT; quelType : OSType);     external;
procedure WritelnEdge2XAndStringDansRapport(pattern : SInt32; s : String255);     external;
  function ReelEnStringAvecDecimales(unreel : double_t; nbChiffresSignificatifs : SInt16) : String255;     external;
function InverseNoirBlancDansAddressePattern(pattern,longueur : SInt32) : SInt32;     external;
