	function Min (a, b: SInt32) : SInt32;     external;
	function Max (a, b: SInt32) : SInt32;     external;
	procedure AttendFrappeClavier;     external;
procedure WritelnDansRapport(s : String255);     external;
procedure WriteDansRapport(s : String255);     external;
procedure WritelnNumDansRapport(s : String255; num : SInt32);     external;
procedure WriteNumDansRapport(s : String255; num : SInt32);     external;
procedure WritelnStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WritelnDansRapportThreadSafe(s : String255);     external;
procedure WritelnPositionDansRapport(var position : plateauOthello);     external;
procedure WriteStringAndCoupDansRapport(s : String255; square : SInt16);     external;
	function ReadStringFromRessource(stringListID, index : SInt16) : String255;     external;
	function ReplaceParameters(s, p0, p1, p2, p3 : String255) : String255;     external;
function  GetEffetSpecial : boolean;     external;
  function ReplaceStringOnce(const s, pattern, replacement : String255) : String255;     external;
function TypeEvalEnChaine(whichEval : EvalsDisponibles) : String255;     external;
procedure DisableKeyboardScriptSwitch;     external;
procedure FinRapport;     external;
procedure TextNormalDansRapport;     external;
procedure ChangeFontSizeDansRapport(whichSize : SInt16);     external;
procedure ChangeFontDansRapport(whichFont : SInt16);     external;
procedure ChangeFontFaceDansRapport(whichStyle : StyleParameter);     external;
procedure EnableKeyboardScriptSwitch;     external;
function MeilleureSuiteEtNoteEnChaine(coul,note,profondeur : SInt16) : String255;     external;
function MemberOfStringSet(const theString : String255; var data : SInt64; S : StringSet) : boolean;     external;
procedure GetCurrentScript(var currentScript : SInt32);     external;
procedure SetCurrentScript(whichScript : SInt32);     external;
procedure SwitchToRomanScript;     external;
procedure AddStringToSet(const theString : String255; data : SInt32; var S : StringSet);     external;
function CassioIsUsingAnEngine(var numero : SInt32) : boolean;     external;
function LongueurMeilleureSuite : SInt32;     external;
procedure EngineEmptyHash;     external;
function RechercheDeProblemeDePriseDeCoinEnCours : boolean;     external;
procedure ChangeFontColorDansRapport(whichColor : SInt16);     external;
function ProfondeurMilieuEnPrecisionFinaleEngine(profondeur, empties : SInt32) : SInt32;     external;
procedure WriteStringAndReelEnSeparantLesMilliersDansRapport(s : String255; x : double; nbDecimales : SInt16);     external;
  function ReelEnStringAvecDecimales(unreel : double; nbChiffresSignificatifs : SInt16) : String255;     external;
  function SecondesEnJoursHeuresSecondes(secondes : SInt32) : String255;     external;
	function MyTrunc(x : double) : SInt32;     external;
procedure InvalidateAllCasesDessinEnTraceDeRayon;     external;
procedure EcranStandard(clipRegion : RgnHandle; forcedErase : boolean);     external;
procedure EssaieSetPortWindowPlateau;     external;
  procedure WriteNumAt(s : String255; num : SInt32; h,v : SInt32);     external;
  procedure WriteStringAndReelAt(s : String255; unreel : double; h,v : SInt32);     external;
  procedure WriteStringAndBoolAt(s : String255; bool : boolean; h,v : SInt32);     external;
function CoupEnString(coup : SInt16; enMajuscules : boolean) : String255;     external;
function SetClefHashageGlobale(whichValue : SInt32) : SInt32;     external;
procedure WritelnStringDansRapport(s : String255);     external;
procedure TesterClefHashage(valeurCorrecte : SInt32; nomFonction : String255);     external;
procedure Calcule_Valeurs_Tactiques(plat : plateauOthello; avecCalculCentre : boolean);     external;
procedure EcritReflexion(const fonctionAppelante : String255);     external;
function AB_tore(var pl : plateauOthello; var bstBef : SInt32; coul,prof,alpha,beta,nBla,nNoi : SInt32) : SInt32;     external;
function HasGotEvent(myEventMask : EventMask; var whichEvent : eventRecord; sleep : UInt32; mouseRgn : RgnHandle) : boolean;     external;
procedure TraiteEvenements;     external;
procedure TraiteNullEvent(var whichEvent : eventRecord);     external;
procedure Initialise_table_heuristique(jeu : plateauOthello; debug : boolean);     external;
function JeuCourant : plateauOthello;     external;
procedure SetLargeurFenetreProbCut;     external;
procedure ViderStringSet(var S : StringSet);     external;
procedure MemoryFillChar(bufferPtr : universal UnivPtr; byteCount: SInt32; caractere : char);     external;
procedure ViderListOfMoveRecords(var liste : ListOfMoveRecords);     external;
procedure CopyListOMoveRecords(var source,dest : ListOfMoveRecords);     external;
procedure DoSystemTask(couleur : SInt32);     external;
function AQuiDeJouer : SInt32;     external;
procedure MeilleureSuiteDansKiller(profKiller : SInt32);     external;
function GetCouleurOfSquareDansJeuCourant(whichSquare : SInt32) : SInt32;     external;
procedure DessinePionMontreCoupLegal(x : SInt16);     external;
function ModifPlat(a,coul : SInt32; var jeu : plateauOthello; var jouable : plBool; var nbbl,nbno : SInt32; var front : InfoFront) : boolean;     external;
function Evaluation(var position : plateauOthello; coulEvaluation,nbBlancs,nbNoirs : SInt32; var jouable : plBool; var front : InfoFront; afraidOfWipeOut : boolean; alpha,beta : SInt32; var nbEvaluationsRecursives : SInt32) : SInt32;     external;
function GetSpeedOfEngine : double;     external;
procedure GetMeilleureSuiteInfos(var infos : meilleureSuiteInfosRec);     external;
procedure FabriqueMeilleureSuiteInfos(premierCoup : SInt16; suiteJouee : t_suiteJouee; meilleureSuite : meilleureSuitePtr; coul : SInt16; plat : plateauOthello; nBla,nNoi : SInt32; message : SInt32);     external;
procedure SetMeilleureSuiteInfos(var infos : meilleureSuiteInfosRec);     external;
procedure SetMeilleureSuite(s : String255);     external;
procedure EcritMeilleureSuite;     external;
procedure SetCoupEntete(square : SInt16);     external;
procedure SetValReflex(var classAux : ListOfMoveRecords; profondeur,compt,longueurclass,genre,numero,IndexEnCours,couleur : SInt16);     external;
procedure SetNbLignesScoresCompletsCetteProf(var reflexionInfos : ReflexRec; nbLignes : SInt16);     external;
function CassioEstEnModeAnalyse : boolean;     external;
function EstLaPositionCourante(var position : PositionEtTraitRec) : boolean;     external;
function GetNbLignesScoresCompletsCetteProf(var reflexionInfos : ReflexRec) : SInt16;     external;
procedure SetNoteMilieuSurCase(origine : SInt32; whichSquare : SInt16; whichNote : SInt32);     external;
procedure SetMeilleureNoteMilieuSurCase(origine : SInt32; whichSquare : SInt16; whichNote : SInt32);     external;
procedure EffacePionMontreCoupLegal(x : SInt16);     external;
procedure CopyClassementDansTableOfMoveRecordsLists(var classement : ListOfMoveRecords; quelleProf,longClass : SInt16);     external;
function StopAlphaBetaTasks : OSStatus;     external;
function CreateAlphaBetaTasks : OSStatus;     external;
procedure GetFilsDeLaPositionCouranteDansLeGraphe(typesVoulus : EnsembleDeTypes; tries : boolean; var FilsSelectionnes:listeDeCellulesEtDeCoups);     external;
function CoupEstDansListeDeCellulesEtDeCoups(coupCherche : SInt16; var liste : ListeDeCellulesEtDeCoups; var numCellule : SInt32) : boolean;     external;
	procedure RandomizeTimer;     external;
  function PuissanceReelle(x,exposant : double) : double;     external;
  function RandomLongintEntreBornes(a, b : SInt32) : SInt32;     external;
procedure WritelnStringAndCoupDansRapport(s : String255; square : SInt16);     external;
function GetCurrentInterruption : SInt16;     external;
procedure EnleveCetteInterruption(typeInterruption : SInt16);     external;
procedure PartagerLeTempsMachineAvecLesAutresProcess(WNESleep : SInt32);     external;
procedure ReinitilaliseInfosAffichageReflexion;     external;
procedure SetPositionDansFntreReflexion(var reflexionInfos : ReflexRec; position : PositionEtTraitRec);     external;
function MakePositionEtTrait(var plat : plateauOthello; trait : SInt32) : PositionEtTraitRec;     external;
procedure InitialiseDirectionsJouables;     external;
procedure CarteJouable(const plat : plateauOthello; var carte : plBool);     external;
function MakeEmptyStringSet : StringSet;     external;
function GetCadence : SInt32;     external;
procedure LanceDecompteDesNoeuds;     external;
procedure ViderNotesSurCases(origine : SInt32; effacer : boolean; surQuellesCases : SquareSet);     external;
procedure InitialiseConstantesCodagePosition;     external;
procedure InvalidateAllProfsDansDansTableOfMoveRecordsLists;     external;
procedure ViderHashTablePourMilieuDePartie(withCheckEvents : boolean);     external;
function TempsPourCeCoup(n,couleur : SInt16) : SInt32;     external;
procedure LanceChrono;     external;
procedure LanceChronoCetteProf;     external;
procedure CarteMove(coul : SInt32; const plat : plateauOthello; var carte : plBool; var mobilite : SInt32);     external;
procedure SetNbLignesScoresCompletsProfPrecedente(var reflexionInfos : ReflexRec; nbLignes : SInt16);     external;
procedure Superviseur(n : SInt16);     external;
procedure SetValeursGestionTemps(alloue,effectif,prevu : SInt32; divergence : double; prof,suivante : SInt16);     external;
procedure EcritGestionTemps;     external;
function PlusGrandeProfondeurAvecProbCut : SInt32;     external;
procedure EffaceReflexion(effacerAussiLeRuban : boolean);     external;
procedure AlerteSimple(texte : String255);     external;
procedure LanceInterruption(typeInterruption : SInt16; const fonctionAppelante : String255);     external;
procedure DisposeStringSet(var S : StringSet);     external;
procedure AfficheMiniProfilerDansRapport(affichage : SInt32);     external;
function PrefixeFichierProfiler : String255;     external;
procedure SetCassioEstEnTrainDeReflechir(newvalue : boolean; oldValue : BooleanPtr);     external;
procedure ViderMoveRecord(var whichMoveRecord : MoveRecord);     external;
procedure LanceInterruptionSimple(const fonctionAppelante : String255);     external;
procedure TraiteInterruptionBrutale(var coup,reponse : SInt32; fonctionAppelante : String255);     external;
procedure SetGenreDerniereReflexionDeCassio(typeReflexion,numeroCoup : SInt32);     external;
procedure WritelnPositionEtTraitDansRapport(const position : plateauOthello; trait : SInt32);     external;
function EnginePeutFaireCalculDeMilieu(var plateau : plateauOthello; profondeur, couleur, alpha, beta, dernierCoup : SInt32; var note, bestMove : SInt32; var meilleureSuite : t_meilleureSuite) : boolean;     external;
function NbPionsDeCetteCouleurDansPosition(couleur : SInt32; var position : plateauOthello) : SInt32;     external;
function ABScout(var pl : plateauOthello; var joua : plBool; var bstDef : SInt32; pere,coul,prof,profMaximum,horizon,longPath,distPV,couleurDeCassio,alpha,beta,nbBlancs,nbNoirs : SInt32; var fr : InfoFront; var conseilTurbulence : SInt32; canDoProbCut : boolean) : SInt32;     external;
procedure CarteFrontiere(const plat : plateauOthello; var front : InfoFront);     external;
procedure AjusteSleep;     external;
procedure ViderSearchResults(var results : MakeEndgameSearchResultRec);     external;
function DoitPasser(coul : SInt32; const plat : plateauOthello; var jouable : plBool) : boolean;     external;
function StructureMeilleureSuiteToString(const meilleureSuite : t_meilleureSuite; prof : SInt32) : String255;     external;
function CoupEnStringEnMajuscules(coup : SInt16) : String255;     external;
function ScannerStringPourTrouverCoup(debutScan : SInt16; const s : String255; var positionDuCoupDansChaine : SInt16) : SInt16;     external;
