	function Min (a, b: SInt32) : SInt32;     external;
	function Max (a, b: SInt32) : SInt32;     external;
	procedure AttendFrappeClavier;     external;
procedure WritelnDansRapport(s : String255);     external;
procedure WriteDansRapport(s : String255);     external;
procedure WritelnNumDansRapport(s : String255; num : SInt32);     external;
procedure WriteNumDansRapport(s : String255; num : SInt32);     external;
procedure WritelnStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WritelnDansRapportThreadSafe(s : String255);     external;
function FichierTexteDeCassioExiste(nom : String255; var fic : FichierTEXT) : OSErr;     external;
function QTGraph_ShowImageFromFile(whichWindow : CGrafPtr; whichBounds : rect; var info : fileInfo) : OSErr;     external;
function FichierPhotosHappyEndExistePourCesTextureEtCouleur(nomFichierDansMenu : String255; couleur : SInt16; var numeroFic : SInt16) : boolean;     external;
function GetPathCompletFichierParNumero(numeroFic : SInt16) : String255;     external;
  function MyGetPicture(picID: SInt16) : PicHandle;     external;
  function GetPicFrameOfPicture(thePict : PicHandle) : Rect;     external;
	function MakeRect(left, top, right, bottom : SInt32) : Rect;     external;
function EclaircirCouleurDeCetteQuantite(theColor : RGBColor; quantite : SInt32) : RGBColor;     external;
function NoircirCouleurDeCetteQuantite(theColor : RGBColor; quantite : SInt32) : RGBColor;     external;
procedure SetPortByWindow(window : WindowPtr);     external;
function RGBColorEstClaire(color : RGBColor; seuilLuminosite : SInt32) : boolean;     external;
function EclaircirCouleur(theColor : RGBColor) : RGBColor;     external;
procedure SetRGBColor (var theColor: RGBColor; redValue, greenValue, blueValue: SInt32);     external;
procedure KillOffscreenPixMap(var wasPort : CGrafPtr; killColorTable : boolean);     external;
procedure KillTempOffscreenWorld(var offScreenGWorld : GWorldPtr);     external;
function GetTypeOfTexture(const nomTexture : String255) : SInt32;     external;
  function CreateDirectoryWithThisPath(directoryPath : String255) : OSErr;     external;
	function ExtraitCheminDAcces(nomComplet : String255) : String255;     external;
procedure ExportPictureToFile(thePicHandle : PicHandle; nomFichier : String255);     external;
function FichierTexteExiste(nom : String255 ; vRefNum : SInt16; var fic : FichierTEXT) : OSErr;     external;
procedure CreateOffScreenPixMap(var theRect : rect; var offScreenGWorld : CGrafPtr);     external;
  procedure SafeSetCursor(myCursor : CursHandle);     external;
function FichierPhotosExisteSurLeDisque(pathCompletFichierPhoto : String255; var fic : FichierTEXT) : boolean;     external;
function GetPathCompletFichierPionsPourCetteTexture(var whichTexture : CouleurOthellierRec) : String255;     external;
function OuvreRessourceForkFichierTEXT(var fic : FichierTEXT) : OSErr;     external;
function FermeRessourceForkFichierTEXT(var fic : FichierTEXT) : OSErr;     external;
procedure SetPositionPlateau2D(nbrecases,tailleCase : SInt16; HG_h,HG_v : SInt16; fonctionAppelante : String255);     external;
function  CalculateBordureRect(quelleBordure : SInt32; quelleTexture : CouleurOthellierRec) : rect;     external;
function QDGetPortBound : rect;     external;
function CreateTempOffScreenWorld(var theRect : rect; var offScreenGWorld : GWorldPtr) : OSErr;     external;
function GetPathCompletFichierBordurePourCetteTexture(var whichTexture : CouleurOthellierRec) : String255;     external;
procedure EssaieSetPortWindowPlateau;     external;
procedure DumpWorkToScreen(sourceRect,targetRect : rect; offScreenWork,targetWindow : CGrafPtr);     external;
function GetTailleCaseCourante : SInt32;     external;
function CassioEstEn3D : boolean;     external;
procedure AjusteCurseur;     external;
procedure RemettreLeCurseurNormalDeCassio;     external;
