	function Min (a, b: SInt32) : SInt32;     external;
	function Max (a, b: SInt32) : SInt32;     external;
	procedure AttendFrappeClavier;     external;
procedure WritelnDansRapport(s : String255);     external;
procedure WriteDansRapport(s : String255);     external;
procedure WritelnNumDansRapport(s : String255; num : SInt32);     external;
procedure WriteNumDansRapport(s : String255; num : SInt32);     external;
procedure WritelnStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WritelnDansRapportThreadSafe(s : String255);     external;
	function MakeRect(left, top, right, bottom : SInt32) : Rect;     external;
function AllocateMemoryPtrClear(whichSize : SInt32) : Ptr;     external;
procedure DisposeMemoryPtr(var whichPtr : Ptr);     external;
  function  GetParserDelimiters : SetOfChar;     external;
  procedure SetParserDelimiters(parsingCaracters : SetOfChar);     external;
  procedure Parse(s : String255; var tete,reste : String255);     external;
  function StrToInt32(const s : String255) : SInt32;     external;
function FichierTexteDeCassioExiste(nom : String255; var fic : FichierTEXT) : OSErr;     external;
procedure ForEachLineInFileDo(whichFile : fileInfo ; DoWhat : LineOfFileProc; var result : SInt32);     external;
procedure SetPortByWindow(window : WindowPtr);     external;
procedure AlerteSimple(texte : String255);     external;
function HashPartieDansListeParNroRefPartie(numeroRefPartie : SInt32) : SInt32;     external;
function QDGetPortBound : rect;     external;
	function MakePoint(h,v : SInt32) : Point;     external;
procedure SetRGBColor (var theColor: RGBColor; redValue, greenValue, blueValue: SInt32);     external;
	procedure SplitBy (s : String255; sub : char; var left, right: String255);     external;
  procedure EnableQuartzAntiAliasing(useQuartzMetrics : boolean);     external;
	function StringWidthPourGNUPascal(const s : String255): SInt16;     external;
	procedure DrawStringPourGNUPascal(const s : String255);     external;
  procedure MyEraseRect(const (*var*) r : Rect);     external;
  procedure MyEraseRectWithColor(const (*var*) r : Rect; couleurCmd : SInt32; whichPattern : pattern; fonctionAppelante : String255);     external;
procedure ValidRect(r : rect);     external;
  function MyStr255ToString( const s : Str255 ) : String255;     external;
	function ReadStringFromRessource(stringListID, index : SInt16) : String255;     external;
	function ParamStr(s, p0, p1, p2, p3 : String255) : String255;     external;
	procedure LocalToGlobalRect(var myrect : rect);     external;
function GetNomJoueurNoirSansPrenomParNroRefPartie(nroReference : SInt32) : String255;     external;
function GetNomJoueurBlancSansPrenomParNroRefPartie(nroReference : SInt32) : String255;     external;
function GetScoreReelParNroRefPartie(nroReference : SInt32) : SInt16;     external;
function GetNomCourtTournoiAvecAnneeParNroRefPartie(nroReference : SInt32; longueurTotaleVoulue : SInt16) : String255;     external;
function CassioCanCheckForDangerousEvents : boolean;     external;
procedure DiminueLatenceEntreDeuxDoSystemTask;     external;
procedure AccelereProchainDoSystemTask(nbTicksMax : SInt32);     external;
function CassioEstEnModeAnalyse : boolean;     external;
  procedure SafeSetCursor(myCursor : CursHandle);     external;
	function NewMenuFlottant(whichID : SInt32; whichrect : Rect; whichItem : SInt16) : MenuFlottantRec;     external;
  procedure SetFontMenuFlottant(var whichMenuFlottant : MenuFlottantRec; fontID : SInt16; fontSize : UInt16);     external;
	procedure InstalleMenuFlottant(var whichMenuFlottant : MenuFlottantRec; whichWindow : WindowPtr);     external;
  procedure DrawPUItemMenuFlottant(var whichMenuFlottant : MenuFlottantRec; drawMark : boolean);     external;
	procedure DesinstalleMenuFlottant(var whichMenuFlottant : MenuFlottantRec);     external;
	function EventPopUpItemMenuFlottant(var whichMenuFlottant : MenuFlottantRec; drawChoice, checkChoiceBefore,checkChoiceAfter : Boolean) : boolean;     external;
procedure DoTracerNuage;     external;
procedure DoChargerLaBaseSansInterventionUtilisateur;     external;
function ConstruireChaineReferencesPartieParNroRefPartie(nroReference : SInt32; avecScores : boolean; numeroProchainCoup : SInt32) : String255;     external;
procedure ExtraitPartieTableStockageParties(nroReference : SInt32; var partieStr : PackedThorGame);     external;
procedure TraductionThorEnAlphanumerique(const s : PackedThorGame; var result : String255);     external;
function PositionEtTraitAfterMoveNumberAlpha(game : String255; numeroCoup : SInt32; var typeErreur : SInt32) : PositionEtTraitRec;     external;
function EstLaPositionCourante(var position : PositionEtTraitRec) : boolean;     external;
procedure SetCassioMustCheckDangerousEvents(newvalue : boolean; oldValue : BooleanPtr);     external;
procedure PlaquerPartieLegale(partieAlphaCompactee : String255; flags : SInt32);     external;
	function LeftStr (const s : String255; len : SInt32) : String255;     external;
function JeuCourant : plateauOthello;     external;
procedure WritelnPositionEtTraitDansRapport(const position : plateauOthello; trait : SInt32);     external;
function AQuiDeJouer : SInt32;     external;
function GetTraitOfPosition(var position : PositionEtTraitRec) : SInt32;     external;
procedure MiseAJourDeLaPartie(s : String255; jeuDepart : plateauOthello; jouableDepart : plBool; frontiereDepart : InfoFront; nbBlancsDepart,nbNoirsDepart : SInt32; traitDepart : SInt16; nbreCoupDepart : SInt16; depuisPositionInitiale : boolean; coupFinal : SInt16; var gameNodeLePlusProfondGenere : GameTree; fonctionAppelante : String255);     external;
function EclaircirCouleurDeCetteQuantite(theColor : RGBColor; quantite : SInt32) : RGBColor;     external;
function NoircirCouleurDeCetteQuantite(theColor : RGBColor; quantite : SInt32) : RGBColor;     external;
function GetCouleurAffichageValeurZebraBook(trait : SInt32; whichNote : SInt32) : RGBColor;     external;
procedure DoSystemTask(couleur : SInt32);     external;
	function MyTrunc(x : double) : SInt32;     external;
function AllocateMemoryPtr(whichSize : SInt32) : Ptr;     external;
function GetScoreTheoriqueParNroRefPartie(nroReference : SInt32) : SInt16;     external;
function CalculePositionEtTraitApres(var partie60 : PackedThorGame; numeroCoup : SInt16; var position : plateauOthello; var trait,nbBlanc,nbNoir : SInt32) : boolean;     external;
procedure Calcule_Valeurs_Tactiques(plat : plateauOthello; avecCalculCentre : boolean);     external;
procedure CarteFrontiere(const plat : plateauOthello; var front : InfoFront);     external;
procedure CarteJouable(const plat : plateauOthello; var carte : plBool);     external;
procedure PartagerLeTempsMachineAvecLesAutresProcess(WNESleep : SInt32);     external;
function GetCurrentInterruption : SInt16;     external;
procedure EnleveCetteInterruption(typeInterruption : SInt16);     external;
function Evaluation(var position : plateauOthello; coulEvaluation,nbBlancs,nbNoirs : SInt32; var jouable : plBool; var front : InfoFront; afraidOfWipeOut : boolean; alpha,beta : SInt32; var nbEvaluationsRecursives : SInt32) : SInt32;     external;
function AB_simple(var pl : plateauOthello; var joua : plBool; var bstBef : SInt32; coul,prof,alpha,beta,nBla,nNoi : SInt32; var fr : InfoFront; canDoProbCut : boolean) : SInt32;     external;
procedure LanceInterruption(typeInterruption : SInt16; const fonctionAppelante : String255);     external;
function MakePositionEtTrait(var plat : plateauOthello; trait : SInt32) : PositionEtTraitRec;     external;
procedure Superviseur(n : SInt16);     external;
function GetNomTournoiAvecAnneeParNroRefPartie(nroReference : SInt32; longueurTotaleVoulue : SInt16) : String255;     external;
function GetNomJoueurNoirParNroRefPartie(nroReference : SInt32) : String255;     external;
function GetNomJoueurBlancParNroRefPartie(nroReference : SInt32) : String255;     external;
function GetWindowPortRect(window : WindowPtr) : rect;     external;
procedure DoRegressionLineaireCoeffsCassio(ApresQuelCoup : SInt16);     external;
function EstLaPositionInitialeStandard(var position : PositionEtTraitRec) : boolean;     external;
function PositionEtTraitCourant : PositionEtTraitRec;     external;
function PartiePourPressePapier(enMajuscules,avecEspaceEntreCoups : boolean; nbreCoupsAExporter : SInt16) : String255;     external;
	function IsPrefix (const name, prefix: String255) : boolean;     external;
