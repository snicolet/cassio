	procedure AttendFrappeClavier;     external;
procedure WritelnDansRapport(s : String255);     external;
procedure WriteDansRapport(s : String255);     external;
procedure WritelnNumDansRapport(s : String255; num : SInt32);     external;
procedure WriteNumDansRapport(s : String255; num : SInt32);     external;
procedure WritelnStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WritelnDansRapportThreadSafe(s : String255);     external;
procedure AjouterTempsDansMiniProfiler(nbVides,prof : SInt32; microsecondesUtilisees : UInt32; affichage : SInt32);     external;
function DeuxCasesVidesBitboardFast(my_bits_low,my_bits_high,opp_bits_low,opp_bits_high : UInt32; alpha,beta,diffPions : SInt32; listeBitboard : UInt32) : SInt32;     external;
procedure EcritBitboardState(s : String255; position : bitboard; ESprof,alpha,beta,diffPions : SInt32);     external;
procedure WritelnListeBitboardDansRapport(s : String255; listeBitboard : UInt32; nbCasesVides : SInt32);     external;
function ModifPlatBitboard(coup,vecteurParite : SInt32; my_bits_low,my_bits_high,opp_bits_low,opp_bits_high : UInt32; var resultat : bitboard; var diffPions : SInt32) : SInt32;     external;
function DernierCoupBitboard(my_bits_low,my_bits_high,opp_bits_low,opp_bits_high : UInt32; diffPions,iCourant : SInt32) : SInt32;     external;
function CalculePionsStablesBitboard(my_bits_low,my_bits_high,opp_bits_low,opp_bits_high : UInt32; nbPionsStablesSuffisant : SInt32) : SInt32;     external;
function MakeBitboard(my_low,my_high,opp_low,opp_hi : UInt32) : bitboard;     external;
  function Hexa(num : SInt32) : String255;     external;
procedure WritelnStringAndCoupDansRapport(s : String255; square : SInt16);     external;
procedure PointDeMesureDeParallelisme;     external;
function QuatreCasesVidesBitboardFast(var position : bitboard; alpha_4,beta_4,diffPions_4,vecteurParite_4 : SInt32; listeBitboard : UInt32{; debugageUnrolled : boolean}) : SInt32;     external;
function QuatreCasesVidesBitboardSimple(var position : bitboard; alpha_4,beta_4,diffPions_4,vecteurParite_4 : SInt32; listeBitboard : UInt32{; debugageUnrolled : boolean}) : SInt32;     external;
function BitboardHashGet(hash_table : BitboardHashTable; pos_my_bits_low,pos_my_bits_high,pos_opp_bits_low,pos_opp_bits_high : UInt32; var hash_index : UInt32; var hash_info : loweruppermoveemptiesRec) : BitboardHash;     external;
procedure BitboardHashUpdate(hash_table : BitboardHashTable; hash_index : UInt32; pos_my_bits_low,pos_my_bits_high,pos_opp_bits_low,pos_opp_bits_high : UInt32; board_empties : SInt32; alpha,beta,score,move : SInt32);     external;
function TrierFastestFirstBitboardStabilite(pos_my_bits_low,pos_my_bits_high,pos_opp_bits_low,pos_opp_bits_high : UInt32; var listeCoupsLegaux : listeVides; coupAMettreEnTete : SInt32; listeBitboard : UInt32) : SInt32;     external;
procedure EcouterLesResultatsDansCetteThread(nroThread : SInt32);     external;
function ThreadEstInterrompue(nroThread, nbreCasesVides : SInt32) : boolean;     external;
function PeutTrouverUneThreadDisponible(nroThreadMaitre, nbreCasesVides, hashStamp : SInt32; var nroThreadEsclave : SInt32) : boolean;     external;
function CalculerCoupsEnParallele(inNroThreadDuPere : SInt32; inNroThreadFilsDisponible : SInt32; inPosition : bitboard; inNbreVides : SInt32; inAlpha,inBeta : SInt32; inDiffPions : SInt32; inVecteurParite : SInt32; inListeBitboard : UInt32; var inListeDesCoupsLegaux : listeVides; indexPremierFils,indexDernierFils : SInt32; var outMeilleureDefense : UInt32; var outNroDuDernierFilsEvalue : SInt32) : SInt32;     external;
procedure AttendreFrappeClavierParallelisme(attenteTouche : boolean);     external;
procedure WritelnPositionEtTraitDansRapport(const position : plateauOthello; trait : SInt32);     external;
function ListeChaineeDesCasesVidesEnListeBitboard(theList : celluleCaseVideDansListeChaineePtr; nbCasesVides : SInt32) : UInt32;     external;
procedure ReinitialiserInterruptionsParHashStampsDesThreads(nroThreadAgissante : SInt32);     external;
function ListeChaineeDesCasesVidesEstDisponible : boolean;     external;
procedure CreeListeCasesVidesDeCettePosition(jeu : plateauOthello; listeChaineeUtiliseOrdreOptmisiseDesCases : boolean);     external;
procedure CreerListeChaineeDesCasesVides( nbVides : SInt32; var tete : celluleCaseVideDansListeChainee; var buffer : t_bufferCellulesListeChainee; var whichTablePointeurs : tableDePointeurs; fonctionAppelante : String255);     external;
procedure SetListeChaineeDesCasesVidesEstDisponible(flag : boolean);     external;
procedure WriteCoupDansRapport(square : SInt16);     external;
procedure WriteStringAndNumEnSeparantLesMilliersDansRapport(s : String255; num : SInt32);     external;
procedure WritelnStringAndReelDansRapport(s : String255; x : double; nbDecimales : SInt16);     external;
