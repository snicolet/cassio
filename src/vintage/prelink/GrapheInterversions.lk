procedure WritelnDansRapport(s : String255);     external;
procedure WriteDansRapport(s : String255);     external;
procedure WritelnNumDansRapport(s : String255; num : SInt32);     external;
procedure WriteNumDansRapport(s : String255; num : SInt32);     external;
procedure WritelnStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WritelnDansRapportThreadSafe(s : String255);     external;
procedure LitCellule(var fichier : Graphe; numCellule : SInt32; var cellule : CelluleRec);     external;
function HasPere(var cellule : CelluleRec) : boolean;     external;
function HasFrere(var cellule : CelluleRec) : boolean;     external;
procedure LitOrbite(var fichier : Graphe; numCellule : SInt32; var orbite : ListeDeCellules);     external;
function NumeroDerniereCellule(var maListe : ListeDeCellules) : SInt32;     external;
procedure SetMemePosition(theMemePosition : SInt32; var cellule : CelluleRec);     external;
function GetMemePosition(var cellule : CelluleRec) : SInt32;     external;
procedure EcritCellule(var fichier : Graphe; numCellule : SInt32; var cellule : CelluleRec);     external;
function HasFils(var cellule : CelluleRec) : boolean;     external;
procedure CreeLiaisonPeresVersFils(var fichier : Graphe; numPere,numFils : SInt32);     external;
function GetFils(var cellule : CelluleRec) : SInt32;     external;
procedure CreeLiaisonFreresVersPere(var fichier : Graphe; numCell,numPere : SInt32);     external;
procedure LitEnsembleDesFils(var fichier : Graphe; numCellule : SInt32; var LesFils : ListeDeCellules);     external;
procedure IsoleCellule(var fichier : Graphe; numCellule : SInt32);     external;
procedure RaiseError(message : String255);     external;
  function NumEnString(num : SInt32) : String255;     external;
procedure CalculeToutesLesValeursDeLOrbite(var fichier : Graphe; numCellule : SInt32; var AuMoinsUnChange : boolean);     external;
function CelluleEstDansListe(num : SInt32; var liste : ListeDeCellules) : boolean;     external;
procedure LitEnsembleDesFreres(var fichier : Graphe; numCellule : SInt32; var Freres : ListeDeCellules);     external;
procedure SetFrere(theFrere : SInt32; var cellule : CelluleRec);     external;
function GetFrere(var cellule : CelluleRec) : SInt32;     external;
function GetPere(var cellule : CelluleRec) : SInt32;     external;
function GetNiemeCoupDansListe(var fichier : Graphe; var L : ListeDeCellules; n : SInt16) : SInt16;     external;
function CoupEstDansListe(var fichier : Graphe; coupCherche : SInt16; var liste : ListeDeCellules; var numCellule : SInt32) : boolean;     external;
procedure SetPere(thePere : SInt32; var cellule : CelluleRec);     external;
function GetAutoVidageDuRapport : boolean;     external;
procedure SetAutoVidageDuRapport(flag : boolean);     external;
procedure TraductionAlphanumeriqueEnThor(const s : String255; var result : PackedThorGame);     external;
procedure RaccourcirInterversion(var variante60,canonique60 : PackedThorGame; var longueurUtile : SInt16; var estInterversion : boolean);     external;
procedure CreePartieDansGrapheApprentissage(var fichier : Graphe; partie60 : PackedThorGame; var suiteDesCellules : ListeDeCellules);     external;
procedure PropageToutesLesValeursDansLeGraphe(var fichier : Graphe; numCellule : SInt32);     external;
procedure SetFils(theFils : SInt32; var cellule : CelluleRec);     external;
procedure CalculeToutesLesValeursDuGraphe(var fichier : Graphe; numCellule : SInt32; var valeurChangees : boolean);     external;
procedure COPY_STR60_TO_PACKED_GAME(const s60 : String255; var result : PackedThorGame);     external;
procedure TraductionThorEnAlphanumerique(const s : PackedThorGame; var result : String255);     external;
procedure VideBufferGrapheApprentissage;     external;
function GrapheApprentissageExiste(var nomDuGraphe : String255; var fichier : Graphe; var grapheEtaitDejaOuvert : boolean) : boolean;     external;
function FermeGrapheApprentissage(var fichier : Graphe) : boolean;     external;
procedure Normalisation(var partie120 : String255; var autreCoupQuatreDiag : boolean; interversions : boolean);     external;
function PositionEstDansLeGraphe(var fichier : Graphe; chemin60 : PackedThorGame; var suiteDesCellules : ListeDeCellules) : boolean;     external;
procedure CheminDepuisRacineGrapheEnThor(var fichier : Graphe; numCellule : SInt32; var partie60 : PackedThorGame);     external;
procedure TransposePartiePourOrientation(var partie60 : PackedThorGame; autreCoupQuatreDiagonal : boolean; minCoupTranspose,maxCoupTranspose : SInt32);     external;
function CoupEnStringEnMajuscules(coup : SInt16) : String255;     external;
function GetCoup(var cellule : CelluleRec) : SInt16;     external;
