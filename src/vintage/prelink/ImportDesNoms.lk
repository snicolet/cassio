	function Min (a, b: SInt32) : SInt32;     external;
	function Max (a, b: SInt32) : SInt32;     external;
procedure WritelnDansRapport(s : String255);     external;
procedure WriteDansRapport(s : String255);     external;
procedure WritelnNumDansRapport(s : String255; num : SInt32);     external;
procedure WriteNumDansRapport(s : String255; num : SInt32);     external;
procedure WritelnStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WritelnDansRapportThreadSafe(s : String255);     external;
function StringSetEstVide(S : StringSet) : boolean;     external;
function MemberOfStringSet(const theString : String255; var data : SInt64; S : StringSet) : boolean;     external;
	function LowerCaseStr (s : String255) : String255;     external;
  function EnleveEspacesDeDroite(const s : String255) : String255;     external;
	procedure MySetStringLength (var s : String255; len : SInt16);     external;
	function IsDigit(ch : char) : boolean;     external;
	function LowerCase( ch : char ) : char;     external;
function FichierTexteDeCassioExiste(nom : String255; var fic : FichierTEXT) : OSErr;     external;
procedure AlerteSimpleFichierTexte(nomFichier : String255; erreurES : SInt32);     external;
function OuvreFichierTexte(var fic : FichierTEXT) : OSErr;     external;
function EOFFichierTexte(var fic : FichierTEXT; var erreurES : OSErr) : boolean;     external;
function ReadlnDansFichierTexte(var fic : FichierTEXT; var s : String255) : OSErr;     external;
  procedure EnleveEspacesDeGaucheSurPlace(var s : String255);     external;
function WritelnDansFichierTexte(var fic : FichierTEXT; s : String255) : OSErr;     external;
	function LeftStr (const s : String255; len : SInt32) : String255;     external;
  procedure EnleveEspacesDeDroiteSurPlace(var s : String255);     external;
  procedure Parse(s : String255; var tete,reste : String255);     external;
	function RightStr (const s : String255; len : SInt16) : String255;     external;
procedure AddStringToSet(const theString : String255; data : SInt32; var S : StringSet);     external;
	function NoCaseEquals( s1, s2 : String255 ) : boolean;     external;
	function NoCasePos( s1, s2 : String255 ) : SInt16;     external;
function FermeFichierTexte(var fic : FichierTEXT) : OSErr;     external;
procedure DisposeStringSet(var S : StringSet);     external;
function UTF8ToAscii(const s : String255) : String255;     external;
function GetNomJoueur(nroJoueur : SInt32) : String255;     external;
function LongueurPlusLongNomDeJoueurDansBase : SInt32;     external;
function GetNomTournoi(nroTournoi : SInt32) : String255;     external;
  function  GetParserDelimiters : SetOfChar;     external;
  procedure SetParserDelimiters(parsingCaracters : SetOfChar);     external;
function GetNomJoueurEnMajusculesSansEspace(nroJoueur : SInt32) : String255;     external;
  function PseudoHammingDistance(const s1, s2 : String255) : SInt32;     external;
	function ReadStringFromRessource(stringListID, index : SInt16) : String255;     external;
procedure DoLectureJoueursEtTournoi(nomsCourts : boolean);     external;
  function  GetParserProtectionWithQuotes : boolean;     external;
  procedure SetParserProtectionWithQuotes(flag : boolean);     external;
	function TPCopy (source : String255; start, count: SInt32) : String255;     external;
  function GarderSeulementLesChiffres(var s : String255) : String255;     external;
  function ContientUneLettre(const s : String255) : boolean;     external;
  function StrToInt32(const s : String255) : SInt32;     external;
  function StripDiacritics(const s : String255) : String255;     external;
  function ReplaceStringOnce(const s, pattern, replacement : String255) : String255;     external;
procedure WritelnStringAndReelDansRapport(s : String255; x : double; nbDecimales : SInt16);     external;
function MakeEmptyStringSet : StringSet;     external;
function MakeEmptyATR : ATR;     external;
procedure InsererDansATR(var arbre : ATR; const chaine : String255);     external;
procedure DisposeATR(var theATR : ATR);     external;
  function UpperCase(const s : String255; keepDiacritics : boolean) : String255;     external;
	function Match (pattern, name: String255) : boolean;     external;
	function UpCase (ch : char) : char;     external;
function NombreJoueursDansBaseOfficielle : SInt32;     external;
function FindStringDansMetaphoneSansEspaceDeCeJoueur(var s : String255; nroJoueur : SInt32) : SInt32;     external;
function FindStringDansNomEnMajusculesSansEspaceDeCeJoueur(var s : String255; nroJoueur : SInt32) : SInt32;     external;
function GetNomJoueurEnMetaphoneSansEspace(nroJoueur : SInt32) : String255;     external;
function TrouveATRDansChaine(x : ATR; const chaine : String255; var position : SInt32) : boolean;     external;
function FabriqueMetaphoneDesLexemes(original : String255) : String255;     external;
function CountAndHashLexems(const s : String255; table : LongintArrayPtr) : SInt32;     external;
function GetHashLexemesDeCeJoueur(nroJoueur : SInt32; lexemes : LongintArrayPtr) : SInt32;     external;
procedure MakeDoubleMetaphone(original : String255; var primary,secondary : String255);     external;
procedure SetNomJoueur(nroJoueur : SInt32; joueur : String255);     external;
function GetNomJoueurEnMetaphoneAvecEspaces(nroJoueur : SInt32) : String255;     external;
	function Trim (s : String255) : String255;     external;
  procedure Parse5(s : String255; var s1,s2,s3,s4,s5,reste : String255);     external;
	function SplitAt (s : String255; const sub : String255; var s1, s2 : String255) : boolean;     external;
procedure ATRAffichageInfixe(nomATR : String255; x : ATR);     external;
procedure ForEachLineInFileDo(whichFile : FSSpec ; DoWhat : LineOfFileProc; var result : SInt32);     external;
  procedure StripHTMLAccents(var s : String255);     external;
