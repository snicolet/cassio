procedure WritelnDansRapport(s : String255);     external;
procedure WriteDansRapport(s : String255);     external;
procedure WritelnNumDansRapport(s : String255; num : SInt32);     external;
procedure WriteNumDansRapport(s : String255; num : SInt32);     external;
procedure WritelnStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WritelnDansRapportThreadSafe(s : String255);     external;
procedure CopierPointeursVecteursEval(var source,dest : VectNewEval);     external;
procedure WriteStringAndReelDansRapport(s : String255; x : double; nbDecimales : SInt16);     external;
procedure WritelnStringAndReelDansRapport(s : String255; x : double; nbDecimales : SInt16);     external;
procedure CombinaisonLineaireVecteurEval(var p1,p2 : VectNewEval; lambda1,lambda2 : TypeReel; var resultat : VectNewEval);     external;
function CalculeChi2(var v : VectNewEval) : TypeReel;     external;
procedure DoSystemTask(couleur : SInt32);     external;
function AQuiDeJouer : SInt32;     external;
procedure SetPrefixeCalculeChi2(s : String255);  {pour affichage dans rapport} external;
procedure MinimumBracketting(f : FonctionReelle; var ax,bx,cx,fa,fb,fc : TypeReel);     external;
procedure SetPrefixeCalculeChi2EtGradient(s : String255);  {pour affichage dans rapport} external;
function MinimisationParBrent(f : FonctionReelle; ax,bx,cx,tol : TypeReel; var xmin : TypeReel) : TypeReel;     external;
procedure HomothetieVecteurEval(var p,result : VectNewEval; scale : TypeReel);     external;
procedure AddVecteurEval(var p1,p2,resultat : VectNewEval);     external;
procedure AlerteSimple(texte : String255);     external;
function VecteurEvalEstVide(var vecteur : VectNewEval) : boolean;     external;
procedure EcritVecteurMobiliteDansRapport(var whichEval : VectNewEval);     external;
procedure SmoothThisEvaluation(var whichEval : VectNewEval; var whichOccurences : VectNewEval);     external;
procedure CalculeEvalPatternsInexistantParEchangeCouleur(var whichEval : VectNewEval; var whichOccurences : VectNewEval);     external;
procedure AbaisseEvalPatternsRares(var whichEval : VectNewEval; var whichOccurences : VectNewEval; valeurMaxPattern,RapportMaxValeurSurOccurence : TypeReel);     external;
function FichierTexteDeCassioExiste(nom : String255; var fic : FichierTEXT) : OSErr;     external;
function CreeFichierTexteDeCassio(nom : String255; var fic : FichierTEXT) : OSErr;     external;
function OuvreFichierTexte(var fic : FichierTEXT) : OSErr;     external;
function VideFichierTexte(var fic : FichierTEXT) : OSErr;     external;
function FermeFichierTexte(var fic : FichierTEXT) : OSErr;     external;
procedure SetBornePourCalculGradientChi2(borne : TypeReel);     external;
function CalculeChi2EtGradient(var v,gradient : VectNewEval) : TypeReel;     external;
procedure AbaisseGradientPatternsRares(var whichEval,whichGradient,whichOccurences : VectNewEval; valeurMaxPattern,RapportMaxValeurSurOccurence : TypeReel);     external;
procedure CopierOpposeVecteurEval(var source,dest : VectNewEval);     external;
procedure CopierVecteurEval(var source,dest : VectNewEval);     external;
function EcritEvalDansFichierTexte(var fic : FichierTEXT; var v : VectNewEval) : OSErr;     external;
procedure EcritQuelsquesPositionsPartieAleatoireDansListe;     external;
function ProduitScalaireVecteurEval(var p1,p2 : VectNewEval) : TypeReel;     external;
function CombinaisonScalaireVecteurEval(var p1,p2,p3 : VectNewEval; lambda1,lambda2 : TypeReel) : TypeReel;     external;
procedure MinimisationMultidimensionnelleParConjugateGradient(f : FonctionMultidimensionnelle; var p : PointMultidimensionnel; ftol : TypeReel; var iter : SInt32; var fret : TypeReel);     external;
