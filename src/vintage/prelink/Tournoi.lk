	function Min (a, b: SInt32) : SInt32;     external;
	function Max (a, b: SInt32) : SInt32;     external;
	procedure AttendFrappeClavier;     external;
procedure WritelnDansRapport(s : String255);     external;
procedure WriteDansRapport(s : String255);     external;
procedure WritelnNumDansRapport(s : String255; num : SInt32);     external;
procedure WriteNumDansRapport(s : String255; num : SInt32);     external;
procedure WritelnStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WritelnDansRapportThreadSafe(s : String255);     external;
function MakeEmptyStringSet : StringSet;     external;
procedure DisposeMemoryPtr(var whichPtr : Ptr);     external;
procedure DisposeStringSet(var S : StringSet);     external;
function GetEngineName(numeroEngine : SInt32) : String255;     external;
	function UpCase (ch : char) : char;     external;
procedure SwitchToEngine(whichChannel : SInt16);     external;
procedure SetPortByWindow(window : WindowPtr);     external;
procedure PrepareTexteStatePourHeure;     external;
  function NumEnString(num : SInt32) : String255;     external;
  procedure MyEraseRect(const (*var*) r : Rect);     external;
  procedure MyEraseRectWithColor(const (*var*) r : Rect; couleurCmd : SInt32; whichPattern : pattern; fonctionAppelante : String255);     external;
	procedure DrawStringPourGNUPascal(const s : String255);     external;
	function ReelEnString(unreel : double_t) : String255;     external;
function CassioEstEn3D : boolean;     external;
	function StringWidthPourGNUPascal(const s : String255): SInt16;     external;
procedure SetRGBColor (var theColor: RGBColor; redValue, greenValue, blueValue: SInt32);     external;
procedure DessineOmbreRoundRect(theRect : rect; ovalWidth,ovalHeight : SInt16; targetColor : RGBColor; tailleOmbre,forceDuGradient,ombrageMinimum,typeOmbrage : SInt32);     external;
procedure GenereOuvertureAleatoireEquilibree(nbDeCoupsDemandes,borneMin,borneMax : SInt16; casesInterdites : SquareSet; var s : PackedThorGame; var ouverturesInterdites : StringSet);     external;
procedure SendStringToEngine(s : String255);     external;
procedure KillCurrentEngine;     external;
procedure Wait(secondes : double_t);     external;
function CanStartEngine(pathMac, arguments : String255) : boolean;     external;
function GetEnginePath(numeroEngine : SInt32; nomEngine : String255) : String255;     external;
procedure PartagerLeTempsMachineAvecLesAutresProcess(WNESleep : SInt32);     external;
function GetCurrentInterruption : SInt16;     external;
procedure EnleveCetteInterruption(typeInterruption : SInt16);     external;
  procedure VideStatistiquesDeBordsABLocal(var liste : t_liste_assoc_bord);     external;
procedure SetPotentielsOptimums(position : PositionEtTraitRec);     external;
function PositionEtTraitInitiauxStandard : PositionEtTraitRec;     external;
procedure AffichePotentiels;     external;
	procedure RandomizeTimer;     external;
procedure DoSystemTask(couleur : SInt32);     external;
function AQuiDeJouer : SInt32;     external;
  procedure EcritStatistiquesDeBordsABLocal;     external;
procedure PrepareNouvellePartie(ForceHumCtreHum : boolean);     external;
procedure SetGameMode(typeDeJeuDemande : SInt16);     external;
function GetEngineState : String255;     external;
procedure UpdatePotentiels(whichPlat : plateauOthello; whichColor : SInt16);     external;
function JeuCourant : plateauOthello;     external;
procedure SetProfImposee(flag : boolean; const fonctionAppelante : String255);     external;
procedure SetCadence(cadence : SInt32);     external;
function GetCadence : SInt32;     external;
procedure AjusteEtatGeneralDeCassioApresChangementDeCadence;     external;
procedure SetUtilisationNouvelleEval(doitUtiliserNouvelleEval : boolean);     external;
function GetNouvelleEvalDejaChargee : boolean;     external;
procedure SetEffetSpecial(flag : boolean);     external;
procedure DoChangeEvaluationTablesDeCoins;     external;
procedure Superviseur(n : SInt16);     external;
	procedure Initialise_valeurs_bords(TendanceAuBeton : double_t);     external;
	procedure Initialise_turbulence_bords(priseDeBordsSontTurbulentes : boolean);     external;
function GetNiemeCoupPartieCourante(numeroDuCoup : SInt32) : SInt32;     external;
procedure DealWithEssai(whichSquare : SInt16; const position : PositionEtTraitRec; const fonctionAppelante : String255);     external;
function PositionEtTraitCourant : PositionEtTraitRec;     external;
function PositionCouranteEstDansLaBibliotheque : boolean;     external;
function PositionCouranteEstDansGrapheApprentissage : boolean;     external;
procedure JeuMac(niveau : SInt32; const fonctionAppelante : String255);     external;
function ChoixDeVincenz(positionEtTrait : PositionEtTraitRec; degreMinimisation : SInt16; doitChercherDefense : boolean) : VincenzMoveRec;     external;
  function UneChanceSur(N : SInt32) : boolean;     external;
procedure SetOthellierEstSale(square : SInt16; flag : boolean);     external;
procedure EffaceAideDebutant(avecDessinAutresInfosSurLesCases,effacageLarge : boolean; surQuellesCases : SquareSet; fonctionAppelante : String255);     external;
function HasGotEvent(myEventMask : EventMask; var whichEvent : eventRecord; sleep : UInt32; mouseRgn : RgnHandle) : boolean;     external;
procedure TraiteEvenements;     external;
procedure TraiteNullEvent(var whichEvent : eventRecord);     external;
procedure DoChangeSousSelectionActive;     external;
	function NoCasePos( s1, s2 : String255 ) : SInt16;     external;
function AjouterPartieCouranteDansListe(nroNoir,nroBlanc,nroDuTournoi,annee : SInt32; infosDansRapport : boolean; var partieRec : t_PartieRecNouveauFormat; var nroReferencePartieAjoutee : SInt32) : boolean;     external;
function EnVieille3D : boolean;     external;
procedure SetEnVieille3D(flag : boolean);     external;
procedure SetPositionsTextesWindowPlateau;     external;
procedure DessineDiagramme(tailleCaseDiagramme : SInt16; clipRegion : RgnHandle; fonctionAppelante : String255);     external;
function GetTailleCaseCourante : SInt32;     external;
procedure AfficheScore;     external;
procedure Heure(couleur : SInt16);     external;
function PartieNormalisee(var autreCoupQuatreDiag : boolean; interversions : boolean) : String255;     external;
procedure ApprendPartieIsolee(partieStr : String255; const couleurGagnante : String255; apresQuelCoup : SInt16);     external;
function GetEcritToutDansRapportLog : boolean;     external;
procedure SetEcritToutDansRapportLog(flag : boolean);     external;
procedure TextNormalDansRapport;     external;
function EstUnePartieOthelloTerminee(var s : String255; compacterPartie : boolean; var nbPionsFinalNoirs,nbPionsFinalBlancs : SInt32) : boolean;     external;
procedure ChangeFontFaceDansRapport(whichStyle : StyleParameter);     external;
	function LeftOfString (var s : String255; len : SInt16) : String255;     external;
procedure ChangeFontColorDansRapport(whichColor : SInt16);     external;
	function RightOfString (const s : String255; len : SInt16) : String255;     external;
procedure WriteStringAndReelDansRapport(s : String255; x : double_t; nbDecimales : SInt16);     external;
procedure WritelnStringAndReelDansRapport(s : String255; x : double_t; nbDecimales : SInt16);     external;
procedure DoChangeHumCtreHum;     external;
procedure EndHiliteMenu(tickDepart : SInt32; delai : SInt32; sansAttente : boolean);     external;
function CalculePhasePartie(numeroCoup : SInt16) : SInt16;     external;
procedure DoChangeAfficheSuggestionDeCassio;     external;
procedure AjusteCadenceMin(cadence : SInt32);     external;
procedure DoChangeEvaluationTotale(selectedByMenu : boolean);     external;
procedure RemettreLeCurseurNormalDeCassio;     external;
procedure EcritGestionTemps;     external;
procedure EffaceTouteLaFenetreSaufLOthellier;     external;
procedure InvalidateAllCasesDessinEnTraceDeRayon;     external;
procedure DrawContents(whichWindow : WindowPtr);     external;
procedure LanceInterruption(typeInterruption : SInt16; const fonctionAppelante : String255);     external;
procedure DoLectureJoueursEtTournoi(nomsCourts : boolean);     external;
function FichierTexteExiste(nom : String255 ; vRefNum : SInt16; var fic : FichierTEXT) : OSErr;     external;
function FSSpecToLongName(whichFile : FSSpec; var theLongName : String255) : OSErr;     external;
procedure AnnonceOuvertureFichierEnRougeDansRapport(nomFichier : String255);     external;
function OuvreFichierTexte(var fic : FichierTEXT) : OSErr;     external;
function ReadlnDansFichierTexte(var fic : FichierTEXT; var s : String255) : OSErr;     external;
  function EnleveEspacesDeGauche(const s : String255) : String255;     external;
  procedure Parser6(s : String255; var s1,s2,s3,s4,s5,s6,reste : String255);     external;
	function NoCaseEquals( s1, s2 : String255 ) : boolean;     external;
  procedure Parser2(s : String255; var s1,s2,reste : String255);     external;
function GetNumeroOfEngine(nomEngine : String255) : SInt32;     external;
  function ChaineEnLongint(const s : String255) : SInt32;     external;
	function IsDigit(ch : char) : boolean;     external;
function EOFFichierTexte(var fic : FichierTEXT; var erreurES : OSErr) : boolean;     external;
function FermeFichierTexte(var fic : FichierTEXT) : OSErr;     external;
function AllocateMemoryPtr(whichSize : SInt32) : Ptr;     external;
procedure GeneralQuickSort(lo,up : SInt32; lecture : LectureTableauProc; affectation : AffectationProc; ordre : OrdreProc);     external;
function FichierTexteDeCassioExiste(nom : String255; var fic : FichierTEXT) : OSErr;     external;
  function  GetParsingCaracterSet : SetOfChar;     external;
  procedure SetParsingCaracterSet(parsingCaracters : SetOfChar);     external;
  procedure Parser4(s : String255; var s1,s2,s3,s4,reste : String255);     external;
  procedure ChaineToLongint(const s : String255; var theLongint : SInt32);     external;
procedure DoCoefficientsEvaluation;     external;
procedure CoefficientsStandard;     external;
procedure OuvreFntrPlateau(avecAnimationZoom : boolean);     external;
procedure AjusteSleep;     external;
procedure DessineIconesChangeantes;     external;
procedure SetValeurStandardLiaisonArbreZoo;     external;
function VerifieAssertionsDeFinale : boolean;     external;
  procedure WriteNumAt(s : String255; num : SInt32; h,v : SInt32);     external;
  procedure WriteStringAndReelAt(s : String255; unreel : double_t; h,v : SInt32);     external;
  procedure WriteStringAndNumEnSeparantLesMilliersAt(s : String255; num : SInt32; h,v : SInt32);     external;
procedure SetAutoVidageDuRapport(flag : boolean);     external;
procedure MemoryFillChar(bufferPtr : universal UnivPtr; byteCount: SInt32; caractere : char);     external;
procedure ResetStatistiquesOrdreOptimumDesCases;     external;
procedure ResetStatistiquesStatutKnuthDesNoeuds;     external;
procedure TesterLaFileDesResultatsDuParallelisme;     external;
function OuvrirFichierPartieFormatCassio(nomFichier : String255; mergeWithCurrentTree : boolean) : OSErr;     external;
procedure LanceChrono;     external;
function TempsPourCeCoup(n,couleur : SInt16) : SInt32;     external;
procedure EcritJeReflechis(coulChoix : SInt16);     external;
procedure ReinitilaliseInfosAffichageReflexion;     external;
procedure EffaceReflexion(effacerAussiLeRuban : boolean);     external;
procedure DoFinaleGagnante(selectedByMenu : boolean);     external;
procedure DoFinaleOptimale(selectedByMenu : boolean);     external;
procedure Initialise_table_heuristique(jeu : plateauOthello; debug : boolean);     external;
procedure EssaieSetPortWindowPlateau;     external;
  procedure WriteStringAt(s : String255; h,v : SInt32);     external;
procedure InitValeursStandardAlgoFinale;     external;
procedure SetNombreDeProcesseursActifs(nombre : SInt32);     external;
procedure SetCassioUtiliseLeZoo(newValue : boolean; oldValue : BooleanPtr);     external;
procedure DetruireLeZoo;     external;
procedure InitMiniProfiler;     external;
function GetCurrentNode : GameTree;     external;
procedure ViderSearchResults(var results : MakeEndgameSearchResultRec);     external;
function MakeEndgameSearch(var paramMakeEndgameSearch : MakeEndgameSearchParamRec ) : boolean;     external;
procedure CopySearchResults(const source : MakeEndgameSearchResultRec; var dest : MakeEndgameSearchResultRec);     external;
procedure EcritStatistiquesOrdreOptimumDesCasesDansRapport;     external;
procedure EcritStatistiquesStatutKnuthDesNoeudsDansRapport;     external;
procedure SetHashValueDuZoo(var hash : UInt64; value : SInt32);     external;