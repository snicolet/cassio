	procedure AttendFrappeClavier;     external;
procedure WritelnDansRapport(s : String255);     external;
procedure WriteDansRapport(s : String255);     external;
procedure WritelnNumDansRapport(s : String255; num : SInt32);     external;
procedure WriteNumDansRapport(s : String255; num : SInt32);     external;
procedure WritelnStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WritelnDansRapportThreadSafe(s : String255);     external;
procedure Normalisation(var partie120 : String255; var autreCoupQuatreDiag : boolean; interversions : boolean);     external;
procedure TraductionAlphanumeriqueEnThor(const s : String255; var result : PackedThorGame);     external;
procedure CreePartieDansGrapheApprentissage(var fichier : Graphe; partie60 : PackedThorGame; var suiteDesCellules : ListeDeCellules);     external;
procedure LitCellule(var fichier : Graphe; numCellule : SInt32; var cellule : CelluleRec);     external;
procedure SetValeurMinimax(var cellule : CelluleRec; val : SInt16);     external;
function GetCouleur(var cellule : CelluleRec) : SInt16;     external;
procedure EcritCellule(var fichier : Graphe; numCellule : SInt32; var cellule : CelluleRec);     external;
procedure AfficheCelluleDansRapport(var fichier : Graphe; num : SInt32; var cellule : CelluleRec);     external;
procedure PropageToutesLesValeursDansLeGraphe(var fichier : Graphe; numCellule : SInt32);     external;
function GrapheApprentissageExiste(var nomDuGraphe : String255; var fichier : Graphe; var grapheEtaitDejaOuvert : boolean) : boolean;     external;
function FenetreRapportEstOuverte : boolean;     external;
procedure OuvreFntrRapport(avecAnimationZoom,forceSelectWindow : boolean);     external;
procedure SelectWindowSousPalette(whichWindow : WindowPtr);     external;
function GetRapportWindow : WindowPtr;     external;
function GetNbreEcrituresDansGraphe : SInt32;     external;
function GetNbreLecturesDansGraphe : SInt32;     external;
function GetGainTheoriqueParNroRefPartie(nroReference : SInt32) : String255;     external;
function GetScoreReelParNroRefPartie(nroReference : SInt32) : SInt16;     external;
procedure ExtraitPartieTableStockageParties(nroReference : SInt32; var partieStr : PackedThorGame);     external;
procedure SHORTEN_PACKED_GAME(var whichGame : PackedThorGame; whichLength : UInt8);     external;
procedure TraductionThorEnAlphanumerique(const s : PackedThorGame; var result : String255);     external;
function HasGotEvent(myEventMask : EventMask; var whichEvent : eventRecord; sleep : UInt32; mouseRgn : RgnHandle) : boolean;     external;
procedure TraiteEvenements;     external;
function FermeGrapheApprentissage(var fichier : Graphe) : boolean;     external;
	function TPCopy (source : String255; start, count: SInt32) : String255;     external;
