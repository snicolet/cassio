	function Min (a, b: SInt32) : SInt32;     external;
	function Max (a, b: SInt32) : SInt32;     external;
	procedure AttendFrappeClavier;     external;
procedure WritelnDansRapport(s : String255);     external;
procedure WriteDansRapport(s : String255);     external;
procedure WritelnNumDansRapport(s : String255; num : SInt32);     external;
procedure WriteNumDansRapport(s : String255; num : SInt32);     external;
procedure WritelnStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WritelnDansRapportThreadSafe(s : String255);     external;
procedure WritelnPositionEtTraitDansRapport(const position : plateauOthello; trait : SInt32);     external;
function PeutJouerIci(couleur,a : SInt32; const plat : plateauOthello) : boolean;     external;
function ModifScoreFin(a,coul : SInt32; var jeu : plateauOthello; var nbbl,nbno : SInt32) : boolean;     external;
  procedure WriteStringAt(s : String255; h,v : SInt32);     external;
  procedure WriteNumAt(s : String255; num : SInt32; h,v : SInt32);     external;
procedure EssaieSetPortWindowPlateau;     external;
function ModifPlatFin(a,coul : SInt32; var jeu : plateauOthello; var nbbl,nbno : SInt32) : boolean;     external;
procedure DoSystemTask(couleur : SInt32);     external;
function AQuiDeJouer : SInt32;     external;
function TrierSelonDivergenceAvecMilieu(var plat : plateauOthello; couleur,nbCasesVides,conseilHash : SInt32; var source,dest : listeVides; var InfosMilieuDePartie : InfosMilieuRec; alpha,beta : SInt32; var coupureAlphaProbable,coupureBetaProbable : boolean; utiliserMilieu : boolean; var evalCouleur : SInt32) : SInt32;     external;
function TrierSelonDivergenceSansMilieu(var plat : plateauOthello; couleur,nbCasesVides : SInt32; var source,dest : listeVides) : SInt32;     external;
procedure WriteStringAndCoupDansRapport(s : String255; square : SInt16);     external;
procedure AlerteSimple(texte : String255);     external;
function ModifPlatLongint(a,coul : SInt32; var jeu : plateauOthello; var jouable : plBool; var nbbl,nbno : SInt32; var front : InfoFront) : boolean;     external;
procedure MemoryFillChar(bufferPtr : universal UnivPtr; byteCount: SInt32; caractere : char);     external;
procedure CarteJouable(const plat : plateauOthello; var carte : plBool);     external;
procedure CarteFrontiere(const plat : plateauOthello; var front : InfoFront);     external;
procedure SetPortByWindow(window : WindowPtr);     external;
procedure FabriqueMeilleureSuiteInfos(premierCoup : SInt16; suiteJouee : t_suiteJouee; meilleureSuite : meilleureSuitePtr; coul : SInt16; plat : plateauOthello; nBla,nNoi : SInt32; message : SInt32);     external;
procedure SetMeilleureSuite(s : String255);     external;
function MeilleureSuiteInfosEnChaine(nbEspacesEntreCoups : SInt16; avecScore,avecNumeroPremierCoup,enMajuscules,remplacerScoreIncompletParEtc : boolean; whichScore : SInt16) : String255;     external;
procedure EcritMeilleureSuite;     external;
function CalculeMobilitePlatSeulement(const plat : plateauOthello; coul : SInt32) : SInt32;     external;
procedure SetValReflexFinale(var classAux : ListOfMoveRecords; profondeur,compt,longueurclass,genre,numero,IndexEnCours,couleur : SInt16);     external;
procedure LanceDemandeAffichageReflexion(forcerAffichageImmediat : boolean; const fonctionAppelante : String255);     external;
procedure SauvegardeLigneOptimale(coul : SInt32);     external;
function AllocateMemoryPtr(whichSize : SInt32) : Ptr;     external;
procedure InitStatistiquesDeDifficultePourFforum;     external;
procedure DisposeMemoryPtr(var whichPtr : Ptr);     external;
procedure LibereMemoireStatistiquesDeDifficultePourFforum;     external;
	function ReadStringFromRessource(stringListID, index : SInt16) : String255;     external;
procedure SetPositionDansFntreReflexion(var reflexionInfos : ReflexRec; position : PositionEtTraitRec);     external;
function MakePositionEtTrait(var plat : plateauOthello; trait : SInt32) : PositionEtTraitRec;     external;
procedure CarteMove(coul : SInt32; const plat : plateauOthello; var carte : plBool; var mobilite : SInt32);     external;
procedure TraiteEvenements;     external;
procedure Calcule_Valeurs_Tactiques(plat : plateauOthello; avecCalculCentre : boolean);     external;
function ModifPlat(a,coul : SInt32; var jeu : plateauOthello; var jouable : plBool; var nbbl,nbno : SInt32; var front : InfoFront) : boolean;     external;
function AB_simple(var pl : plateauOthello; var joua : plBool; var bstBef : SInt32; coul,prof,alpha,beta,nBla,nNoi : SInt32; var fr : InfoFront; canDoProbCut : boolean) : SInt32;     external;
procedure SetValReflex(var classAux : ListOfMoveRecords; profondeur,compt,longueurclass,genre,numero,IndexEnCours,couleur : SInt16);     external;
procedure ReinitilaliseInfosAffichageReflexion;     external;
procedure EffaceReflexion(effacerAussiLeRuban : boolean);     external;
	function EscapeDansQueue : boolean;     external;
function WriteDansFichierTexte(var fic : FichierTEXT; s : String255) : OSErr;     external;
  function NumEnString(num : SInt32) : String255;     external;
procedure AjouterStatistiquesDeDifficultePourFforum(nroLigne,score : SInt32);     external;
function CoupEnStringEnMajuscules(coup : SInt16) : String255;     external;
function WritelnDansFichierTexte(var fic : FichierTEXT; s : String255) : OSErr;     external;
  procedure SetNameOfSFReply(var reply : SFReply; const name : String255);     external;
procedure BeginDialog;     external;
function MakeFileName(var reply : SFReply; prompt : String255; var whichSpec : FSSpec) : boolean;     external;
procedure EndDialog;     external;
function GetScreenBounds : rect;     external;
	function MyNewCWindow( wStorage: UnivPtr; const boundsRect: Rect; const  title: String255; visible: Boolean; procID: SInt16; behind: WindowRef; goAwayFlag: Boolean; refCon: SInt32 ): WindowRef;     external;
function FenetreFictiveAvantPlan : WindowPtr;     external;
	procedure DrawStringPourGNUPascal(const s : String255);     external;
function FichierTexteExisteFSp(mySpec : FSSpec; var fic : FichierTEXT) : OSErr;     external;
function CreeFichierTexteFSp(mySpec : FSSpec; var fic : FichierTEXT) : OSErr;     external;
function OuvreFichierTexte(var fic : FichierTEXT) : OSErr;     external;
function VideFichierTexte(var fic : FichierTEXT) : OSErr;     external;
procedure AlerteSimpleFichierTexte(nomFichier : String255; erreurES : SInt32);     external;
	function GetNameOfSFReply(const reply : SFReply) : String255;     external;
procedure ViderStatistiquesDeDifficultePourFforum;     external;
procedure EcritureStatistiquesDeDifficultePourFforum(var fic : FichierTEXT);     external;
function FermeFichierTexte(var fic : FichierTEXT) : OSErr;     external;
procedure SetFileCreatorFichierTexte(var fic : FichierTEXT; quelType : OSType);     external;
procedure SetFileTypeFichierTexte(var fic : FichierTEXT; quelType : OSType);     external;
procedure AlertOneButtonFromRessource(dialogID, texteItemID, explicationItemID, buttonID : SInt16);     external;
procedure SetCassioEstEnTrainDeReflechir(newvalue : boolean; oldValue : BooleanPtr);     external;
function CassioEstEnModeSolitaire : boolean;     external;
function AlerteDoubleOuiNon(texte,explication : String255) : SInt16;     external;
	function ParamStr(s, p0, p1, p2, p3 : String255) : String255;     external;
  function ReelEnStringAvecDecimales(unreel : double_t; nbChiffresSignificatifs : SInt16) : String255;     external;
function DifficulteDuSolitaire : double_t;     external;
function NbCoupsGagnantsOuNuls(whichPosition : PositionEtTraitRec; var valeurOptimale : SInt32; borneNbCoupsGagnants : SInt32) : SInt32;     external;
procedure SetGenreDerniereReflexionDeCassio(typeReflexion,numeroCoup : SInt32);     external;
procedure GetCurrentScript(var currentScript : SInt32);     external;
procedure OuvreFntrPlateau(avecAnimationZoom : boolean);     external;
  procedure ChaineToLongint(const s : String255; var theLongint : SInt32);     external;
	function TPCopy (source : String255; start, count: SInt32) : String255;     external;
procedure DecompilerPosition(chaineCompilee : String255; var plat : plateauOthello);     external;
procedure LanceInterruptionSimple(const fonctionAppelante : String255);     external;
	procedure RandomizeTimer;     external;
procedure EffectueSymetrieAxeNW_SE(var plat : plateauOthello);     external;
procedure EffectueSymetrieAxeNE_SW(var plat : plateauOthello);     external;
procedure SetCassioEstEnTrainDePlaquerUnSolitaire(flag : boolean);     external;
procedure PlaquerPosition(plat : plateauOthello; trait : SInt16; flags : SInt32);     external;
procedure MyDisableItem(theMenu : MenuRef; item: MenuItemIndex);     external;
procedure AfficheDemandeCoup;     external;
procedure DessineIconesChangeantes;     external;
procedure EcritCommentaireSolitaire;     external;
procedure DisableKeyboardScriptSwitch;     external;
procedure FinRapport;     external;
procedure TextNormalDansRapport;     external;
procedure ChangeFontFaceDansRapport(whichStyle : StyleParameter);     external;
procedure ChangeFontColorDansRapport(whichColor : SInt16);     external;
procedure EnableKeyboardScriptSwitch;     external;
procedure SetCurrentScript(whichScript : SInt32);     external;
procedure SwitchToRomanScript;     external;
procedure AjusteCurseur;     external;
procedure FixeMarqueSurMenuMode(n : SInt16);     external;
procedure OthellierEtPionsDeDepart(var plat : plateauOthello; var nBla,nNoi : SInt32);     external;
function SetPositionTeteLectureFichierTexte(var fic : FichierTEXT; position : SInt32) : OSErr;     external;
function ReadBufferDansFichierTexte(var fic : FichierTEXT; buffPtr : Ptr; var count : SInt32) : OSErr;     external;
  procedure MY_SWAP_INTEGER( arg : UInt16Ptr );     external;
	procedure MySetStringLength (var s : String255; len : SInt16);     external;
function FichierTexteDeCassioExiste(nom : String255; var fic : FichierTEXT) : OSErr;     external;
function FichierTexteExiste(nom : String255 ; vRefNum : SInt16; var fic : FichierTEXT) : OSErr;     external;
function MyGetNewDialog(dialogID : SInt16) : DialogPtr;     external;
procedure MyParamText( const (*var*) param0: String255; const (*var*) param1: String255; const (*var*) param2: String255; const (*var*) param3: String255 );     external;
procedure MyDisposeDialog(var dlog : DialogPtr);     external;
function GetTailleFichierTexte(var fic : FichierTEXT; var taille : SInt32) : OSErr;     external;
  procedure DeleteString( var s : String255; index, nb_chars_to_delete : SInt32);     external;
  function DeleteSpacesBefore(const s : String255; p : SInt16) : String255;     external;
procedure LanceInterruption(typeInterruption : SInt16; const fonctionAppelante : String255);     external;
procedure CompilerPosition(plat : plateauOthello; var chaineCompilee : String255);     external;
	function GetWDName(WDRefNum : SInt16) : String255;     external;
  procedure SafeSetCursor(myCursor : CursHandle);     external;
procedure RemettreLeCurseurNormalDeCassio;     external;
procedure MyDrawDialog(dp : DialogPtr);     external;
	function MakeRect(left, top, right, bottom : SInt32) : Rect;     external;
  procedure MyEraseRect(const (*var*) r : Rect);     external;
  procedure MyEraseRectWithColor(const (*var*) r : Rect; couleurCmd : SInt32; whichPattern : pattern; fonctionAppelante : String255);     external;
procedure GetDialogItemRect(dp : DialogPtr; itemNumber : SInt16; var itemRect : rect);     external;
function IsCheckBoxOn(dp : DialogPtr; itemNumber : SInt16) : boolean;     external;
procedure SetBoolCheckBox(dp : DialogPtr; itemNumber : SInt16; value : boolean);     external;
function NbSolitairesDansCetteIntervalleDeCasesVides(nbCasesMin,nbCasesMax : SInt16) : SInt32;     external;
procedure SetPortByDialog(dialog : DialogPtr);     external;
procedure OutlineOK(dp : DialogPtr);     external;
procedure ToggleCheckBox(dp : DialogPtr; itemNumber : SInt16);     external;
function GetCurrentInterruption : SInt16;     external;
procedure EnleveCetteInterruption(typeInterruption : SInt16);     external;
function JeuCourant : plateauOthello;     external;
function AlertTwoButtonsFromRessource(dialogID, texteItemID, explicationItemID, buttonOneID, buttonTwoID : SInt16) : SInt16;     external;
function HasGotEvent(myEventMask : EventMask; var whichEvent : eventRecord; sleep : UInt32; mouseRgn : RgnHandle) : boolean;     external;
procedure TraiteOneEvenement;     external;
procedure EffaceSuggestionDeCassio;     external;
procedure DessineCourbe(coloration : typeColorationCourbe; fonctionAppelante : String255);     external;
procedure DessineSliderFenetreCourbe;     external;
procedure DoChangeAfficheDernierCoup;     external;
function ConstruireChaineReferencesPartieDapresListe(nroPartie : SInt32; descriptionComplete : boolean) : String255;     external;
procedure DoFinaleOptimale(selectedByMenu : boolean);     external;
   procedure OpenChannel(var theChannel : SndChannelPtr);     external;
   procedure SetSoundVolumeOfChannel(theChannel : SndChannelPtr; volume : SInt32);     external;
   procedure PlaySoundAsynchrone(soundID, volume : SInt16; theChannel : SndChannelPtr);     external;
   procedure QuietChannel(var theChannel : SndChannelPtr);     external;
   procedure CloseChannel(var theChannel : SndChannelPtr);     external;
   procedure HUnlockSoundRessource(SoundID : SInt16);     external;
function GetWindowPortRect(window : WindowPtr) : rect;     external;
	function SplitAt (s : String255; sub : char; var s1, s2 : String255) : boolean;     external;
  procedure EnleveEspacesDeGaucheSurPlace(var s : String255);     external;
  procedure EnleveEspacesDeDroiteSurPlace(var s : String255);     external;
  function EnleveChiffresApresCeCaractereEnFinDeLigne(delim : char; const s : String255; keepDelimitor : boolean) : String255;     external;
  function EnleveChiffresAvantCeCaractereEnDebutDeLigne(delim : char; const s : String255; keepDelimitor : boolean) : String255;     external;
  function EndsWith(const s : String255; const sub : String255) : boolean;     external;
	procedure LeftP (var s : String255; len : SInt16);     external;
