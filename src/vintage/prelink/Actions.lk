	function Min (a, b: SInt32) : SInt32;     external;
	function Max (a, b: SInt32) : SInt32;     external;
	procedure AttendFrappeClavier;     external;
procedure WritelnDansRapport(s : String255);     external;
procedure WriteDansRapport(s : String255);     external;
procedure WritelnNumDansRapport(s : String255; num : SInt32);     external;
procedure WriteNumDansRapport(s : String255; num : SInt32);     external;
procedure WritelnStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WritelnDansRapportThreadSafe(s : String255);     external;
procedure BeginUseZebraNodes(fonctionAppelante : String255);     external;
function GetUsingZebraBook : boolean;     external;
procedure SetUsingZebraBook(flag : boolean);     external;
procedure AlerteFormatNonReconnuFichierPartie(nomFichier : String255);     external;
procedure BeginFonctionModifiantNbreCoup(fonctionAppelante : String255);     external;
procedure SetCassioMustCheckDangerousEvents(newvalue : boolean; oldValue : BooleanPtr);     external;
function EnTrainDeRejouerUnePartie : boolean;     external;
procedure ViderNotesSurCases(origine : SInt32; effacer : boolean; surQuellesCases : SquareSet);     external;
function GetAvecAffichageNotesSurCases(origine : SInt32) : boolean;     external;
procedure EffaceProprietesOfCurrentNode;     external;
procedure SetEffacageProprietesOfCurrentNode(flags : UInt32);     external;
procedure SetAffichageProprietesOfCurrentNode(flags : UInt32);     external;
procedure SetEnTrainDeRejouerUnePartie(flag : boolean);     external;
procedure EffacerTouteLaCourbe(fonctionAppelante : String255);     external;
procedure DessineSliderFenetreCourbe;     external;
procedure OuvreFntrPlateau(avecAnimationZoom : boolean);     external;
procedure MemoryFillChar(bufferPtr : universal UnivPtr; byteCount: SInt32; caractere : char);     external;
	function TPCopy (source : String255; start, count: SInt32) : String255;     external;
  procedure DeleteString( var s : String255; index, nb_chars_to_delete : SInt32);     external;
  procedure EnleveEspacesDeGaucheSurPlace(var s : String255);     external;
procedure SetJeuCourant(jeu : plateauOthello; trait : SInt32);     external;
procedure ViderValeursDeLaCourbe;     external;
procedure MyDisableItem(theMenu : MenuRef; item: MenuItemIndex);     external;
procedure FixeMarqueSurMenuMode(n : SInt16);     external;
procedure PreouvrirGraphesUsuels;     external;
function EstLaPositionStandardDeDepart(const plat : plateauOthello) : boolean;     external;
function JeuCourant : plateauOthello;     external;
procedure ReInitialisePartieHdlPourNouvellePartie(DetruitArbreDeJeu : boolean);     external;
procedure SetCurrentNodeToGameRoot;     external;
procedure MarquerCurrentNodeCommeReel(const fonctionAppelante : String255);     external;
procedure InitialiseDirectionsJouables;     external;
procedure CarteJouable(const plat : plateauOthello; var carte : plBool);     external;
procedure SetCoupEntete(square : SInt16);     external;
function AQuiDeJouer : SInt32;     external;
procedure TachesUsuellesPourGameOver;     external;
procedure SetPositionInitialeOfGameTree(position : plateauOthello; trait,nbBlancs,nbNoirs : SInt16);     external;
procedure AddInfosStandardsFormatSGFDansArbre;     external;
procedure AjouteDescriptionPositionEtTraitACeNoeud(description : PositionEtTraitRec; G : GameTree);     external;
function PositionEtTraitCourant : PositionEtTraitRec;     external;
function GetRacineDeLaPartie : GameTree;     external;
procedure CarteMove(coul : SInt32; const plat : plateauOthello; var carte : plBool; var mobilite : SInt32);     external;
procedure CarteFrontiere(const plat : plateauOthello; var front : InfoFront);     external;
procedure LanceInterruptionConditionnelle(typeInterruption : SInt16; const message : String255; value : SInt32; const fonctionAppelante : String255);     external;
procedure VideMeilleureSuiteInfos;     external;
procedure EssaieDisableForceCmd;     external;
procedure MetTitreFenetrePlateau;     external;
procedure SetPortByWindow(window : WindowPtr);     external;
procedure DessinePlateau(avecDessinFondNoir : boolean);     external;
function GetCouleurOfSquareDansJeuCourant(whichSquare : SInt32) : SInt32;     external;
procedure DessinePion(square,valeurPion : SInt16);     external;
procedure CompacterPartieAlphanumerique(var s : String255; modification : SInt16);     external;
function PositionDansStringAlphaEnCoup(const s : String255; positionDansChaine : SInt16) : SInt16;     external;
function PeutJouerIci(couleur,a : SInt32; const plat : plateauOthello) : boolean;     external;
function JoueEn(a : SInt16; const position : PositionEtTraitRec; var couplegal : boolean; avecNomOuverture : boolean; prendreMainVariationFromArbre : boolean; fonctionAppelante : String255) : boolean;     external;
function DerniereCaseJouee : SInt32;     external;
  function InRange(n, minimum, maximum : SInt32) : boolean;     external;
procedure DessineNumeroCoup(square,n,couleurDesChiffres : SInt16; whichNode : GameTree);     external;
function GetCurrentNode : GameTree;     external;
procedure AfficheProprietesOfCurrentNode(dessinerAideDebutantSiNecessaire : boolean; surQuellesCases : SquareSet; const fonctionAppelante : String255);     external;
procedure Heure(couleur : SInt16);     external;
procedure AfficheScore;     external;
procedure ReinitilaliseInfosAffichageReflexion;     external;
procedure EffaceReflexion(effacerAussiLeRuban : boolean);     external;
procedure SetValeursGestionTemps(alloue,effectif,prevu : SInt32; divergence : double_t; prof,suivante : SInt16);     external;
procedure AfficheDemandeCoup;     external;
function CalculePhasePartie(numeroCoup : SInt16) : SInt16;     external;
procedure Initialise_table_heuristique(jeu : plateauOthello; debug : boolean);     external;
procedure DessineBoiteDeTaille(whichWindow : WindowPtr);     external;
procedure InvalidateAnalyseDeFinaleSiNecessaire(mode : InvalidateMode);     external;
procedure NoUpdateWindowPlateau;     external;
procedure FermerGraphesUsuels;     external;
procedure AjusteCurseur;     external;
procedure LanceInterruptionSimpleConditionnelle(const fonctionAppelante : String255);     external;
procedure FlushWindow(theWindow : WindowRef);     external;
procedure EcritLesInfosDApprentissage;     external;
procedure EndUseZebraNodes(fonctionAppelante : String255);     external;
procedure EndFonctionModifiantNbreCoup(fonctionAppelante : String255);     external;
procedure LireBibliothequeDeZebraPourCurrentNode(const fonctionAppelante : String255);     external;
procedure DessineAutresInfosSurCasesAideDebutant(surQuellesCases : SquareSet; fonctionAppelante : String255);     external;
procedure LanceCalculsRapidesPourBaseOuNouvelleDemande(infosDejaCalculees,withCheckEvent : boolean);     external;
function PeutArreterAnalyseRetrograde : boolean;     external;
procedure AlerteSimpleFichierTexte(nomFichier : String255; erreurES : SInt32);     external;
procedure SetDebuggageUnitFichiersTexte(flag : boolean);     external;
function FichierTexteExiste(nom : String255 ; vRefNum : SInt16; var fic : FichierTEXT) : OSErr;     external;
function TypeDeFichierEstConnu(const fic : FichierTEXT; var infos : FormatFichierRec; var err : OSErr) : boolean;     external;
function PathCompletToLongName(path : String255; var theLongName : String255) : OSErr;     external;
function OuvreFichierTexte(var fic : FichierTEXT) : OSErr;     external;
procedure SetMeilleureSuite(s : String255);     external;
function FSSpecToLongName(whichFile : FSSpec; var theLongName : String255) : OSErr;     external;
procedure AnnonceOuvertureFichierEnRougeDansRapport(nomFichier : String255);     external;
procedure FinRapport;     external;
procedure TextNormalDansRapport;     external;
function GetPositionPointDinsertion : SInt32;     external;
function FermeFichierTexte(var fic : FichierTEXT) : OSErr;     external;
function EOFFichierTexte(var fic : FichierTEXT; var erreurES : OSErr) : boolean;     external;
function ReadlnDansFichierTexte(var fic : FichierTEXT; var s : String255) : OSErr;     external;
procedure WritelnDansRapportSync(s : String255; scrollerSynchronisation : boolean);     external;
procedure WriteDansRapportSync(s : String255; scrollerSynchronisation : boolean);     external;
procedure UpdateScrollersRapport;     external;
function FenetreRapportEstOuverte : boolean;     external;
	procedure InvalidateWindow(whichWindow : WindowPtr);     external;
function GetRapportWindow : WindowPtr;     external;
function CassioEstEnModeAnalyse : boolean;     external;
procedure DoChangeHumCtreHum;     external;
procedure AppliquerStyleDuFichierAuRapport(var fichier : FichierTEXT; debutSelection,finSelection : SInt32);     external;
function GetPositionInitialeEtPartieDansFichierSGF_ou_GGF_8x8(var fic : FichierTEXT; whichFormat : formats_connus; var posInitiale : PositionEtTraitRec; var coups : String255) : OSErr;     external;
procedure PlaquerPositionEtPartie(position : PositionEtTraitRec; partieAlphaCompactee : String255; flags : SInt32);     external;
	function ExtraitNomDirectoryOuFichier(chemin : String255) : String255;     external;
function EstUnNomDeFichierTemporaireDePressePapier(const nom : String255) : boolean;     external;
function GetModificationDateFichierTexte(var fic : FichierTEXT; var theDate : DateTimeRec) : OSErr;     external;
	function DateEnString(const whichDate : DateTimeRec) : String255;     external;
function FichierExisteDansDatabaseOfRecentSGFFiles(whichName : String255; var modificationDate : String255) : boolean;     external;
procedure SetToujoursAjouterInterversionDansGrapheInterversions(flag : boolean);     external;
procedure AjouterNomDansDatabaseOfRecentSGFFiles(const whichDate,whichName : String255);     external;
  procedure SafeSetCursor(myCursor : CursHandle);     external;
procedure PartagerLeTempsMachineAvecLesAutresProcess(WNESleep : SInt32);     external;
function MakeFichierAbstraitFichier(nomFichier : String255 ; vRefNum : SInt16) : FichierAbstrait;     external;
function FichierAbstraitEstCorrect(const theFile : FichierAbstrait) : boolean;     external;
procedure ReInitialiseGameRootGlobalDeLaPartie;     external;
procedure LitFormatSmartGameBoard(G : GameTree; whichFichierAbstrait : FichierAbstrait);     external;
procedure DisposeFichierAbstrait(var theFile : FichierAbstrait);     external;
procedure UpdateGameByMainBranchFromCurrentNode(nroDernierCoupAtteintMAJ : SInt16; jeuMAJ : plateauOthello; jouableMAJ : plBool; frontMAJ : InfoFront; nbBlancsMAJ,nbNoirsMAJ : SInt32; traitMAJ,nbreCoupMAJ : SInt16; fonctionAppelante : String255);     external;
procedure RemettreLeCurseurNormalDeCassio;     external;
	function GetNameOfFSSpec(fs : FSSpec) : String255;     external;
function DoitExpliquerTrierListeSuivantUnClassement : boolean;     external;
procedure SetDoitExpliquerTrierListeSuivantUnClassement(flag : boolean);     external;
procedure AjusteSleep;     external;
function ProcessProblemesStepanov(nomScript : String255; quelProbleme : SInt32) : OSErr;     external;
procedure LancerInterruptionPourOuvrirScriptDeFinale(nomScript : String255);     external;
	function NoCasePos( s1, s2 : String255 ) : SInt16;     external;
function OuvrirFichierTortureImportDesNoms(nomCompletFichier : String255) : OSErr;     external;
function OuvrirFichierTournoiEntreEngines(nomCompletFichier : String255) : OSErr;     external;
function  AjouterPartiesFichierPGNDansListe(nomDictionnaireDesPseudos : String255; fichierPGN : FichierTEXT) : OSErr;     external;
function  AjouterPartiesFichierDestructureDansListe(format : formats_connus; fichier : FichierTEXT) : OSErr;     external;
function AjouterPartiesFichierTHOR_PARDansListe(var fichierTHOR_PAR : FichierTEXT) : OSErr;     external;
function OuvrirFichierScriptZoo(nomCompletFichier : String255) : OSErr;     external;
function LitBibliotheque(nomBibl : String255; verifierLegaliteLignes : boolean) : OSErr;     external;
  function NumEnString(num : SInt32) : String255;     external;
procedure AlerteSimple(texte : String255);     external;
	procedure MyResolveAliasFile (var fs : FSSpec);     external;
	function FSSpecToFullPath (fs : FSSpec; var path : String255) : OSErr;     external;
procedure AjoutePartieDansMenuReouvrir(CheminEtNomFichier : String255);     external;
function DumpPressePapierToFile(var fic : FichierTEXT; flavorType : ScrapFlavorType) : OSErr;     external;
function DetruitFichierTexte(var fic : FichierTEXT) : OSErr;     external;
procedure BeginDialog;     external;
function GetFileName(prompt : String255; var reply : SFReply; fileKind1,fileKind2,fileKind3,fileKind4 : OSType; var whichSpec : FSSpec) : boolean;     external;
procedure EndDialog;     external;
	function GetFullPathOfFSSpec(fs : FSSpec) : String255;     external;
  procedure SetNameOfSFReply(var reply : SFReply; const name : String255);     external;
function MakeFileName(var reply : SFReply; prompt : String255; var whichSpec : FSSpec) : boolean;     external;
	function ReadStringFromRessource(stringListID, index : SInt16) : String255;     external;
function PositionInitialeEnLignePourPressePapier : String255;     external;
function PartiePourPressePapier(enMajuscules,avecEspaceEntreCoups : boolean; nbreCoupsAExporter : SInt16) : String255;     external;
function FichierTexteExisteFSp(mySpec : FSSpec; var fic : FichierTEXT) : OSErr;     external;
function CreeFichierTexteFSp(mySpec : FSSpec; var fic : FichierTEXT) : OSErr;     external;
function VideFichierTexte(var fic : FichierTEXT) : OSErr;     external;
	function GetNameOfSFReply(const reply : SFReply) : String255;     external;
function WritelnDansFichierTexte(var fic : FichierTEXT; s : String255) : OSErr;     external;
function SelectionRapportNonVide : boolean;     external;
function GetRapportTextHandle : CharArrayHandle;     external;
function GetDebutSelectionRapport : SInt32;     external;
function GetFinSelectionRapport : SInt32;     external;
procedure SetFileTypeFichierTexte(var fic : FichierTEXT; quelType : OSType);     external;
procedure SetFileCreatorFichierTexte(var fic : FichierTEXT; quelType : OSType);     external;
procedure SauverStyleDuRapport(var fichier : FichierTEXT);     external;
  function EndsWith(const s : String255; const sub : String255) : boolean;     external;
function ViderFichierAbstrait(var theFile : FichierAbstrait) : OSErr;     external;
function LongueurSelectionRapport : SInt32;     external;
function MakeTexteProperty(whichType : SInt16; texte : Ptr; longueur : SInt32) : Property;     external;
procedure DeletePropertiesOfTheseTypesInList(whichTypes : SetOfPropertyTypes; var L : PropertyList);     external;
procedure AddPropertyToRoot(prop : Property);     external;
procedure DisposePropertyStuff(var p : Property);     external;
procedure EcritFormatSmartGameBoard(G : GameTree; var whichFichierAbstrait : FichierAbstrait);     external;
function GetFichierTEXTOfFichierAbstraitPtr(theAbstractFilePtr : FichierAbstraitPtr; var fic : FichierTEXT) : OSErr;     external;
procedure SetAbstractFileType(var theFile : FichierAbstrait; whichType : OSType);     external;
procedure SetAbstractFileCreator(var theFile : FichierAbstrait; whichCreator : OSType);     external;
procedure EnableItemTousMenus;     external;
function GetCurrentInterruption : SInt16;     external;
procedure EnleveCetteInterruption(typeInterruption : SInt16);     external;
function EstUnSolitaire(var meilleurX,bstdef : SInt32; couleur,MFprof,nbBl,nbNo : SInt32; const jeu : plateauOthello; var empl : plBool; var frontiere : InfoFront; var score,nbreMeilleurs : SInt32; pourVraimentJouer : boolean; var causeRejet : SInt32; traitement,scoreaatteindre : SInt32) : boolean;     external;
procedure LanceInterruption(typeInterruption : SInt16; const fonctionAppelante : String255);     external;
function CoupsLegauxEnSquareSet : SquareSet;     external;
procedure SetPositionInitialeStandardDansJeuCourant;     external;
procedure DetermineMomentFinDePartie;     external;
procedure SetSuggestionDeFinaleEstDessinee(flag : boolean);     external;
procedure ViderListOfMoveRecords(var liste : ListOfMoveRecords);     external;
procedure SetTexteFenetreArbreDeJeuFromArbreDeJeu(G : GameTree; redessineCommentaires : boolean; var commentaireChange : boolean);     external;
procedure Superviseur(n : SInt16);     external;
procedure SetPositionsTextesWindowPlateau;     external;
procedure PosePion(x,couleur : SInt16);     external;
procedure SetPositionInitialeStandardDansGameTree;     external;
function PositionEtTraitInitiauxStandard : PositionEtTraitRec;     external;
procedure Calcule_Valeurs_Tactiques(plat : plateauOthello; avecCalculCentre : boolean);     external;
procedure EngineViderFeedHashHistory;     external;
	procedure RandomizeTimer;     external;
procedure AjusteCadenceMin(cadence : SInt32);     external;
function GetCadence : SInt32;     external;
procedure InvalidateAllCasesDessinEnTraceDeRayon;     external;
procedure EcranStandard(clipRegion : RgnHandle; forcedErase : boolean);     external;
procedure DetruitMeilleureSuite;     external;
procedure EcritCurrentNodeDansFenetreArbreDeJeu(avecEcritureDesFils, doitEffacerPremiereLigneDeLaFenetre : boolean);     external;
procedure CloseProgramWindow;     external;
procedure CloseCourbeWindow;     external;
procedure CloseGestionWindow;     external;
procedure CloseNuageWindow;     external;
function GetTooltipWindowInCloud : WindowPtr;     external;
procedure CloseTooltipWindowInCloud;     external;
procedure CloseReflexWindow;     external;
procedure CloseListeWindow;     external;
procedure CloseStatWindow;     external;
procedure ClosePaletteWindow;     external;
function EstLaFenetreDuRapport(whichWindow : WindowPtr) : boolean;     external;
procedure CloseRapportWindow;     external;
procedure CloseIconisationWindow;     external;
function GetArbreDeJeuWindow : WindowPtr;     external;
procedure CloseCommentairesWindow;     external;
procedure CloseAideWindow;     external;
	procedure CloseDAwindow;     external;
function WindowDeCassio(whichWindow : WindowPtr) : boolean;     external;
function HasGotEvent(myEventMask : EventMask; var whichEvent : eventRecord; sleep : UInt32; mouseRgn : RgnHandle) : boolean;     external;
procedure TraiteOneEvenement;     external;
	function GetFileMenu : MenuRef;     external;
procedure EnableItemPourCassio(whichMenu : MenuRef; whichItem : SInt16);     external;
procedure FixeMarqueSurMenuBase;     external;
function FrontWindowSaufPalette : WindowPtr;     external;
procedure DessineIconesChangeantes;     external;
function CassioEstEnModeTournoi : boolean;     external;
procedure EffaceSuggestionDeCassio;     external;
function CassioEstEnTrainDePlaquerUnSolitaire : boolean;     external;
procedure SetCadence(cadence : SInt32);     external;
function GetCadenceAutreQueAnalyse : SInt32;     external;
function GetJeuInstantaneAutreQueAnalyse : boolean;     external;
procedure AjusteEtatGeneralDeCassioApresChangementDeCadence;     external;
procedure DoBackMove;     external;
procedure DeleteSonOfCurrentNode(var whichSon : GameTree);     external;
function LiveUndoVaRejouerImmediatementUnAutreCoup : boolean;     external;
procedure GarbageCollectionDansTableHashageInterversions;     external;
function NewRadios(PremierBouton,DernierBouton,BoutonSelectione : SInt16) : RadioRec;     external;
function MyGetNewDialog(dialogID : SInt16) : DialogPtr;     external;
procedure MyDrawDialog(dp : DialogPtr);     external;
procedure InitRadios(dp : DialogPtr; var Radios : RadioRec);     external;
procedure PushRadio(dp : DialogPtr; var Radios : RadioRec; itemHit : SInt16);     external;
procedure MyDisposeDialog(var dlog : DialogPtr);     external;
function PeutReculerUnCoup : boolean;     external;
procedure DeleteAllSonsOfCurrentNode;     external;
procedure SetNiveauTeteDeMort(niveau : SInt16);     external;
procedure WritelnDansRapportEtAttendFrappeClavier(s : String255; bip : boolean);     external;
procedure DialogueMemoireBase;     external;
procedure LecturePreparatoireDossierDatabase(pathDossierEnglobant : String255; fonctionAppelante : String255);     external;
procedure DoLectureJoueursEtTournoi(nomsCourts : boolean);     external;
function ActionBaseDeDonnee(actionDemandee : SInt16; var partieEnChaine : String255) : boolean;     external;
procedure InvalidateNombrePartiesActivesDansLeCachePourTouteLaPartie;     external;
procedure EcritRubanListe(avecDessinDesCriteres : boolean);     external;
procedure EffaceMeilleureSuite;     external;
function GetNiemeCoupPartieCourante(numeroDuCoup : SInt32) : SInt32;     external;
procedure RejouePartieOthello(s : String255; coupMax : SInt16; positionDepartStandart : boolean; platImpose : plateauOthello; traitImpose : SInt16; var gameNodeLePlusProfondGenere : GameTree; peutDetruireArbreDeJeu : boolean; avecNomsOuvertureDansArbre : boolean);     external;
procedure DoRetourAuCoupNro(numeroCoup : SInt32; NeDessinerQueLesNouveauxPions,ForceHumCtreHum : boolean);     external;
function GetNombreDePartiesActivesDansLeCachePourCeCoup(numeroDuCoup : SInt32) : SInt32;     external;
procedure SetNombreDePartiesActivesDansLeCachePourCeCoup(numeroDuCoup,nbrePartiesActives : SInt32);     external;
function ListePartiesEstGardeeDansLeCache(quelCoup,nombrePartiesCompatibles : SInt32) : boolean;     external;
procedure EcritListeParties(withCheckEvent : boolean; fonctionAppelante : String255);     external;
function CassioEstEnModeSolitaire : boolean;     external;
procedure SetDoitDessinerMessagesChargementBase(newValue : boolean; oldValue : booleanPtr);     external;
function DoDialogueRetrograde(seulementParametrage : boolean) : boolean;     external;
procedure EffacePierresDelta(G : GameTree);     external;
procedure EffaceNumeroCoup(square,n : SInt16; whichNode : GameTree);     external;
procedure OuvreFntrReflex(avecAnimationZoom : boolean);     external;
procedure EcritReflexion(const fonctionAppelante : String255);     external;
procedure SelectWindowSousPalette(whichWindow : WindowPtr);     external;
procedure EffaceCoupsBibliotheque;     external;
function DoitAfficherBibliotheque : boolean;     external;
procedure EcritCoupsBibliotheque(surQuellesCases : SquareSet);     external;
procedure OuvreFntrGestion(avecAnimationZoom : boolean);     external;
procedure EcritGestionTemps;     external;
procedure OuvreFntrNuage(avecAnimationZoom : boolean);     external;
procedure DessineNuage(fonctionAppelante : String255);     external;
procedure ShowTooltipWindowInCloud;     external;
procedure HideTooltipWindowInCloud;     external;
procedure ToggleZebraOption(mask : SInt32);     external;
procedure DessineNoteSurCases(origine : SInt32; surQuellesCases : SquareSet);     external;
procedure DessineAideDebutant(avecDessinAutresInfosSurLesCases : boolean; surQuellesCases : SquareSet);     external;
procedure EffaceAideDebutant(avecDessinAutresInfosSurLesCases,effacageLarge : boolean; surQuellesCases : SquareSet; fonctionAppelante : String255);     external;
procedure EcritProchainsCoupsSurOthellier(G : GameTree; trait : SInt16; avecSignesDiacritiques : boolean; surQuellesCases : SquareSet);     external;
procedure DesssinePierresDeltaCourantes;     external;
procedure EffacePierresDeltaCourantes;     external;
function GetDernierCoup : SInt16;     external;
procedure EffaceNoteSurCases(origine : SInt32; surQuellesCases : SquareSet);     external;
procedure SetAvecAffichageNotesSurCases(origine : SInt32; flag : boolean);     external;
function GetAffichageProprietesOfCurrentNode : UInt32;     external;
procedure EcritMeilleureSuite;     external;
procedure EcritCommentaireSolitaire;     external;
function AttenteAnalyseDeFinaleDansPositionCourante : boolean;     external;
function GetBestMoveAttenteAnalyseDeFinale : SInt32;     external;
function GetBestDefenseAttenteAnalyseDeFinale : SInt32;     external;
function GetMeilleurCoupConnuMaintenant : SInt32;     external;
procedure WritelnStringAndCoupDansRapport(s : String255; square : SInt16);     external;
procedure ActiverSuggestionDeCassio(whichPos : PositionEtTraitRec; bestMove,bestDef : SInt32; fonctionAppelante : String255);     external;
function CassioEstEn3D : boolean;     external;
	function GetWindowSize(window : WindowPtr) : Point;     external;
function GetTailleCaseCourante : SInt32;     external;
function LoWord(x : SInt32) : SInt16;     external;
function HiWord(x : SInt32) : SInt16;     external;
procedure AjusteAffichageFenetrePlat(tailleCaseForcee : SInt16; var tailleCaseChange,positionscorechange : boolean);     external;
function EnModeEntreeTranscript : boolean;     external;
procedure SetRectEscargot(whichRect : rect);     external;
	function MakeRect(left, top, right, bottom : SInt32) : Rect;     external;
procedure CalculateRectEscargotGlobal;     external;
procedure SetEnVieille3D(flag : boolean);     external;
procedure InvalidateJustificationPasDePartieDansListe;     external;
function EnVieille3D : boolean;     external;
function CalculeCouleurRecord(whichMenuID,whichMenuCmd : SInt16) : CouleurOthellierRec;     external;
procedure DessineRetour(ClipRegion : RgnHandle; fonctionAppelante : String255);     external;
procedure DisableItemTousMenus;     external;
procedure DisableTitlesOfMenusForRetour;     external;
procedure SetIntervalleVerificationDuStatutDeCassioPourLeZoo(ticks : SInt32; oldValue : SInt32Ptr);     external;
procedure VerifierLeStatutDeCassioPourLeZoo;     external;
function CassioIsWaitingAnEngineResult : boolean;     external;
procedure SuspendCurrentEngine;     external;
procedure TraiteEvenements;     external;
procedure TraiteNullEvent(var whichEvent : eventRecord);     external;
procedure CheckStreamEvents;     external;
procedure GererTelechargementWThor;     external;
procedure EnvoyerUnKeepAliveSiNecessaire;     external;
procedure ResumeCurrentEngine;     external;
procedure DessineNumerosDeCoupsSurTousLesPionsSurDiagramme(jusquaQuelCoup : SInt16);     external;
procedure TachesUsuellesPourAffichageCourant;     external;
procedure EnableAllTitlesOfMenus;     external;
procedure DoDoubleBackMove;     external;
function FiltreCoeffDialog(dlog : DialogPtr; var evt : eventRecord; var item : SInt16) : boolean;     external;
procedure EcritParametres(dp : DialogPtr; quelParametre : SInt16);     external;
procedure DessineEchellesCoeffs(dp : DialogPtr);     external;
procedure EcritEtDessineBords;     external;
procedure SetBoolCheckBox(dp : DialogPtr; itemNumber : SInt16; value : boolean);     external;
procedure EcritValeursTablesPositionnelles(dp : DialogPtr);     external;
procedure EffaceValeursTablesPositionnelles(dp : DialogPtr);     external;
procedure SetPortByDialog(dialog : DialogPtr);     external;
  procedure MyEraseRect(const (*var*) r : Rect);     external;
function GetWindowPortRect(window : WindowPtr) : rect;     external;
procedure OutlineOK(dp : DialogPtr);     external;
procedure CoefficientsStandard;     external;
procedure MyDisposeModalFilterUPP(var userUPP : ModalFilterUPP);     external;
function AlertTwoButtonsFromRessource(dialogID, texteItemID, explicationItemID, buttonOneID, buttonTwoID : SInt16) : SInt16;     external;
procedure MakeMainLineInGameTree(var G : GameTree);     external;
procedure OuvreFntrCourbe(avecAnimationZoom : boolean);     external;
function FenetreRapportEstAuPremierPlan : boolean;     external;
procedure OuvreFntrRapport(avecAnimationZoom,forceSelectWindow : boolean);     external;
procedure OuvreFntrPalette;     external;
procedure OuvreFntrStat(avecAnimationZoom : boolean);     external;
procedure IncrementeMagicCookieDemandeCalculsBase;     external;
procedure ConstruitTablePartiesActives(infosDejaCalculees : boolean; withCheckEvent : boolean);     external;
procedure ConstruitTableNumeroReference(infosDejaCalculees,withCheckEvent : boolean);     external;
procedure EssayerConstruireTitrePartie;     external;
procedure ConstruitStatistiques(withCheckEvent : boolean);     external;
procedure EcritRubanStatistiques;     external;
procedure EcritStatistiques(withCheckEvent : boolean);     external;
procedure OuvreFntrListe(avecAnimationZoom : boolean);     external;
function  CalculeNbreLignesVisiblesFntreListe : SInt32;     external;
procedure SetPartieHiliteeEtAjusteAscenseurListe(numero : SInt32);     external;
procedure SetControlLongintMinimum(minimum : SInt32);     external;
procedure SetControlLongintMaximum(maximum : SInt32);     external;
procedure SetValeurAscenseurListe(var value : SInt32);     external;
procedure SetPartieHilitee(numero : SInt32);     external;
procedure AjustePouceAscenseurListe(avecDessinDeLAscensseur : boolean);     external;
procedure NroReference2NroHilite(nroReference : SInt32; var nroHilite : SInt32);     external;
procedure OuvreFntrCommentaires(avecAnimationZoom : boolean);     external;
procedure ValideZoneCommentaireDansFenetreArbreDeJeu;     external;
procedure OuvreFntrAide;     external;
procedure DessineAide(quellePage : PagesAide);     external;
procedure EssaieSetPortWindowPlateau;     external;
procedure InvalRect(r : rect);     external;
function QDGetPortBound : rect;     external;
procedure SetEffetSpecial(flag : boolean);     external;
function  GetEffetSpecial : boolean;     external;
procedure AjusteAffichageFenetrePlatRapide;     external;
function GetEcritToutDansRapportLog : boolean;     external;
procedure SetEcritToutDansRapportLog(flag : boolean);     external;
procedure SetAutoVidageDuRapport(flag : boolean);     external;
function VecteurEvalIntegerEstVide(var vecteur : VectNewEvalInteger) : boolean;     external;
function FichierEvaluationDeCassioTrouvable(nom : String255) : boolean;     external;
procedure SetCassioIsUsingMetaphone(flag : boolean);     external;
function CassioIsUsingMetaphone : boolean;     external;
procedure RegenererLesNomsMetaphoneDeLaBase;     external;
   procedure PlaySoundSynchrone(soundID, volume : SInt16);     external;
procedure EnableKeyboardScriptSwitch;     external;
procedure LanceInterruptionSimple(const fonctionAppelante : String255);     external;
procedure DoDemo(niveau1,niveau2 : SInt32; avecAttente,avecSauvegardePartieDansListe : boolean);     external;
procedure SetProfImposee(flag : boolean; const fonctionAppelante : String255);     external;
function ProfondeurMilieuEstImposee : boolean;     external;
procedure SetUp;     external;
procedure SetAffichageResserre(forceUpdate : boolean);     external;
procedure MyEnableItem(theMenu : MenuRef; item: MenuItemIndex);     external;
  procedure ShareTimeWithOtherProcesses(quantity : SInt32);     external;
function MyGetNextWindow(theWindow : WindowRef) : WindowRef;     external;
function ConfirmationQuitter : boolean;     external;
procedure DoChangeEnModeEntreeTranscript;     external;
procedure DerouleMaster;     external;
procedure LanceNouvelleDemandeCalculsPourBase(infosDejaCalculees,withCheckEvent : boolean);     external;
procedure CalculsEtAffichagePourBase(infosDejaCalculees : boolean; withCheckEvent : boolean);     external;
procedure DessineNuageDePointsRegression;     external;
function NombreCasesVidesTranscriptCourant : SInt32;     external;
function TranscriptCourantEstUnePartieLegaleEtComplete : boolean;     external;
function PlusLonguePartieLegaleDuTranscriptEstDansOthellierDeGauche : boolean;     external;
procedure ViderTranscriptCourant;     external;
function GameTreeHasStandardInitialPositionInversed : boolean;     external;
function AlerteDoubleOuiNon(texte,explication : String255) : SInt16;     external;
procedure EffectueSymetrieArbreDeJeuGlobal(axeSymetrie : SInt32);     external;
function CoupEnStringEnMajuscules(coup : SInt16) : String255;     external;
function CaseSymetrique(whichSquare : SInt16; axeSymetrie : SInt32) : SInt16;     external;
procedure GetPositionInitialeOfGameTree(var position : plateauOthello; var numeroPremierCoup,trait,nbBlancs,nbNoirs : SInt32);     external;
function GetCouleurNiemeCoupPartieCourante(numeroDuCoup : SInt32) : SInt32;     external;
procedure RejouePartieOthelloFictive(s : String255; coupMax : SInt16; positionDepartStandart : boolean; platImpose : plateauOthello; traitImpose : SInt16; var gameNodeLePlusProfondGenere : GameTree; flags : SInt32);     external;
procedure MiseAJourDeLaPartie(s : String255; jeuDepart : plateauOthello; jouableDepart : plBool; frontiereDepart : InfoFront; nbBlancsDepart,nbNoirsDepart : SInt32; traitDepart : SInt16; nbreCoupDepart : SInt16; depuisPositionInitiale : boolean; coupFinal : SInt16; var gameNodeLePlusProfondGenere : GameTree; fonctionAppelante : String255);     external;
function GameTreeHasStandardInitialPosition : boolean;     external;
procedure DoSymetrieSelectionDuRapport(axeSymetrie : SInt32);     external;
procedure GetNumerosPremiereEtDernierePartiesAffichees(var premierNumero,derniernumero : SInt32);     external;
procedure ExtraitPartieTableStockageParties(nroReference : SInt32; var partieStr : PackedThorGame);     external;
function PACKED_GAME_IS_A_DIAGONAL(const whichGame : PackedThorGame) : boolean;     external;
procedure ExtraitPremierCoup(var premierCoup : SInt16; var autreCoupQuatreDiag : boolean);     external;
procedure TransposePartiePourOrientation(var partie60 : PackedThorGame; autreCoupQuatreDiagonal : boolean; minCoupTranspose,maxCoupTranspose : SInt32);     external;
procedure TraductionThorEnAlphanumerique(const s : PackedThorGame; var result : String255);     external;
function EstUnePartieOthello(var s : String255; compacterPartie : boolean) : boolean;     external;
function PositionsSontEgales(const pos1,pos2 : plateauOthello) : boolean;     external;
function CalculePositionApres(numero : SInt16; partie60 : PackedThorGame) : plateauOthello;     external;
function TrouveSymetrieEgalisante(whichPos : plateauOthello; numeroCoup : SInt16; var s60 : PackedThorGame; var axe : SInt16) : boolean;     external;
procedure InvalidateNombrePartiesActivesDansLeCache(quelNroCoup : SInt16);     external;
function GetNomJoueurNoirSansPrenomParNroRefPartie(nroReference : SInt32) : String255;     external;
function GetNomJoueurBlancSansPrenomParNroRefPartie(nroReference : SInt32) : String255;     external;
function GetScoreReelParNroRefPartie(nroReference : SInt32) : SInt16;     external;
procedure ConstruitTitrePartie(const nomNoir,nomBlanc : String255; enleverLesPrenoms : boolean; scoreNoir : SInt32; var titre : String255);     external;
	procedure TerminateMenu(var theMenu : MenuRef; provientDUneResource : boolean);     external;
  function MyGetMenu(resourceID : SInt16) : MenuRef;     external;
	procedure MyLockMenu(theMenu : MenuRef);     external;
	procedure EnableMenu(mh : MenuRef; commands : menuCmdSet);     external;
	procedure MyGetMenuItemText( theMenu : MenuRef; item : MenuItemIndex; var itemString : String255 );     external;
	function GetAppleMenu : MenuRef;     external;
procedure DisplayCassioAboutBox;     external;
procedure DoDialoguePreferences;     external;
procedure ImporterToutesPartiesRepertoire;     external;
procedure DoDialogueFormatImpression;     external;
procedure DoDialogueApercuAvantImpression;     external;
procedure DoProcessPrinting(usePrintDialog: boolean);     external;
procedure IconiserCassio;     external;
procedure DeiconiserCassio;     external;
function CouperFromRapport : boolean;     external;
function  FenetreListeEstEnModeEntree : boolean;     external;
function MyZeroScrap : OSStatus;     external;
procedure SetCommentairesCurrentNodeFromFenetreArbreDeJeu;     external;
procedure CopierPartieEnTEXT(enMajuscule,avecEspacesEntreCoups : boolean);     external;
procedure SetParamDiag(var paramDiag : ParamDiagRec);     external;
	procedure CopierEnMacDraw;     external;
function CopierFromRapport : boolean;     external;
function CollerDansRapport : boolean;     external;
function PeutCollerPartie(var positionStandard : boolean; var partieEnAlpha : String255) : boolean;     external;
procedure AlerteErreurCollagePartie;     external;
function OrdreFenetre(whichWindow : WindowPtr) : SInt16;     external;
procedure DoSupprimerPartiesDansListe;     external;
function EffacerDansRapport : boolean;     external;
procedure SelectionnerToutesLesPartiesActivesDansLaListe;     external;
function SelectionneToutDansRapport : boolean;     external;
	procedure ConstruitPositionEtCoupDapresPartie(var positionEtCoupStr: String255);     external;
	procedure ParserPositionEtCoupsOthello8x8(positionEtCoupStr : String255; var chainePositionInitiale,chaineCoups : String255);     external;
	function ConstruitChainePosition8x8(plat : plateauOthello) : String255;     external;
	function DoDiagrammeFFORUM(ParametreTexte: String255; const chainePositionInitiale,chainePosition,chaineCoups : String255) : boolean;     external;
procedure GetParamDiag(var paramDiag : ParamDiagRec);     external;
procedure CopierDiagrammePartieEnTEXT;     external;
procedure CopierDiagrammePositionEnTEXT;     external;
procedure CopierDiagrammePositionEnHTML;     external;
procedure CopierPositionPourEndgameScriptEnTEXT;     external;
procedure DoDiagramme10x10;     external;
  procedure MySetMenuItemText( theMenu : MenuRef; item : MenuItemIndex; const itemString : String255 );     external;
	function ParamStr(s, p0, p1, p2, p3 : String255) : String255;     external;
procedure DoMilieuDeJeuNormal(combienDeCoups : SInt16; selectedByMenu : boolean);     external;
procedure FlashCasePalette(nroaction : SInt16);     external;
procedure AccelereProchainDoSystemTask(nbTicksMax : SInt32);     external;
procedure DoDoubleAvanceMove;     external;
procedure DoAvanceMove;     external;
function CurseurEstEnTeteDeMort : boolean;     external;
procedure RemoveDelayAfterKeyboardOperation;     external;
procedure DoForcerMacAJouerMaintenant;     external;
procedure DoCadence;     external;
procedure DoMilieuDeJeuAnalyse(selectedByMenu : boolean);     external;
procedure DoFinaleGagnante(selectedByMenu : boolean);     external;
procedure DoFinaleOptimale(selectedByMenu : boolean);     external;
procedure DoDialoguePreferencesAffichage;     external;
procedure CyclerDansLEmpilementDesFenetres;     external;
procedure ProcessEachSolitaireOnDisc(debut,fin : SInt32);     external;
procedure DoDialogueConfigurationSolitaires;     external;
procedure DoEstUnSolitaire;     external;
procedure ChercherUnProblemeDePriseDeCoinAleatoire(premierCoup,dernierCoup : SInt32);     external;
procedure ChercherUnProblemeDePriseDeCoinDansListe(premierCoup,dernierCoup : SInt32);     external;
procedure ChercherUnProblemeDePriseDeCoinDansPositionCourante;     external;
procedure DialogueSaisieNomsJoueursPartie(revenirACeNumeroDeCoup : SInt32);     external;
procedure DoChangerOrdreListe;     external;
procedure DoDoubleAvanceMovePartieSelectionnee(nroHilite : SInt32);     external;
procedure JoueCoupPartieSelectionnee(nroHilite : SInt32);     external;
procedure DoDoubleBackMovePartieSelectionnee(nroHilite : SInt32);     external;
procedure DoBackMovePartieSelectionnee(nroHilite : SInt32);     external;
procedure JoueCoupMajoritaireStat;     external;
procedure DoChangeSousSelectionActive;     external;
procedure DoCriteres;     external;
procedure DoAjouterGroupe;     external;
procedure DoListerLesGroupes;     external;
procedure ImportBaseAllDrawLinesDeBougeard;     external;
procedure EpoquesDesJoueursDeLaListe;     external;
procedure AjusteModeleLineaireFinale;     external;
procedure ChercheSolitairesDansListe(nroPartiemin,nroPartiemax : SInt32; premierCoup,dernierCoup : SInt16);     external;
procedure TestNouvelleEval;     external;
procedure ApprendToutesLesPartiesActives;     external;
procedure DoDialoguePreferencesSpeciales;     external;
procedure NettoyerGrapheApprentissage(nomDuGraphe : String255);     external;
procedure CompterLesPartiesDansGrapheApprentissage(AQuelCoup : SInt16; var nbrePartiesDansGrapheApprentissage : SInt32);     external;
procedure StressTestMilieuPourLeZoo;     external;
procedure VoirLesInfosDApprentissageDansRapport;     external;
procedure TestMobiliteBitbooard(var whichPosition : PositionEtTraitRec);     external;
procedure EcritListeJoueursBlancsNonJaponaisPourTraduction;     external;
procedure EcritListeJoueursNoirsNonJaponaisPourTraduction;     external;
procedure EcritListeTournoisPourTraductionJaponais;     external;
procedure VerifierLesSourcesDeCassio;     external;
procedure KillPovOffScreenWorld;     external;
  function BooleanXor(b1, b2 : boolean) : boolean;     external;
procedure DessinePalette;     external;
function GetWindowVisibleRegion(theWindow : WindowRef; visible : RgnHandle) : RgnHandle;     external;
function FichierPhotosExisteSurLeDisque(pathCompletFichierPhoto : String255; var fic : FichierTEXT) : boolean;     external;
function GetPathCompletFichierPionsPourCetteTexture(var whichTexture : CouleurOthellierRec) : String255;     external;
function GetNomDansMenuPourCetteTexture(var whichTexture : CouleurOthellierRec) : String255;     external;
procedure AlerteFichierPhotosNonTrouve(nomFichier : String255);     external;
function PathFichierPicture3DDeCetteFamille(nomFichierDansMenu : String255; coul : SInt16) : String255;     external;
function LitFichierCoordoneesImages3D(var quelleTexture : CouleurOthellierRec) : OSErr;     external;
function CreatePovOffScreenWorld(var quelleTexture : CouleurOthellierRec) : OSErr;     external;
procedure AlertOneButtonFromRessource(dialogID, texteItemID, explicationItemID, buttonID : SInt16);     external;
procedure SetCalculs3DMocheSontFaits(flag : boolean);     external;
procedure AjusteTailleFenetrePlateauPourLa3D;     external;
procedure DoTrierListe(critereDeTri,algorithmeDeTri : SInt32);     external;
function SauvegardeListeCouranteAuNouveauFormat(filtreDesParties : FiltreNumRefProc) : OSErr;     external;
function FiltrePartieEstActiveEtSelectionnee(numeroDansLaListe,numeroReference : SInt32; var result : SInt32) : boolean;     external;
function SauvegardeListeCouranteEnTHOR_PAR : OSErr;     external;
procedure DoExporterListeDePartiesEnTexte;     external;
procedure ExportListeAuFormatHTML;     external;
procedure ExportListeAuFormatPGN;     external;
procedure ExportListeAuFormatXOF;     external;
procedure ChangeFontFaceDansRapport(whichStyle : StyleParameter);     external;
function GetNomCompletFichierDansMenuReouvrir(numeroItem : SInt16) : String255;     external;
procedure SetReouvrirItem(pathFichier : String255; numeroItem : SInt16);     external;
function NumeroItemMenuReouvrirToIndexTablesFichiersAReouvrir(numeroItem : SInt16) : SInt16;     external;
procedure CleanReouvrirMenu;     external;
procedure CreerOuRenommerMachinDansLaBaseOfficielle;     external;
procedure SelectionnerPartiesOuScoreTheoriqueEgalScoreReel;     external;
function DoActionGestionBaseOfficielle(commande : String255) : OSErr;     external;
function NombreDeLignesDansSelectionRapport : SInt32;     external;
procedure CreerPlusieursJoueursDansBaseOfficielle;     external;
procedure CreerPlusieursTournoisDansBaseOfficielle;     external;
procedure AnnulerSousCriteresRuban;     external;
function GetTSMDocOfRapport : TSMDocumentID;     external;
function ChoisirCouleurOthellierAvecPicker(var theColor : RGBColor) : boolean;     external;
procedure InvalidateAllOffScreenPICTs;     external;
procedure EndHiliteMenu(tickDepart : SInt32; delai : SInt32; sansAttente : boolean);     external;
  procedure WriteNumAt(s : String255; num : SInt32; h,v : SInt32);     external;
procedure FrappeClavierDansRapport(whichChar : char);     external;
function GetAvantDerniereLigneCouranteDuRapport : String255;     external;
procedure ValiderSousCritereRuban;     external;
procedure PasseListeEnModeEntree(boxActivee : SInt16);     external;
function TEGetTextLength(text : TEHandle) : SInt32;     external;
function Complemente(typeVoulu : SInt32; useMenuHistory : boolean; var prefixe : String255; var longueurPrefixe : SInt16; var found : boolean) : String255;     external;
function TEGetViewRect(text : TEHandle) : rect;     external;
function TraiteKeyboardEventDansTranscript(ch : char; var peutRepeter : boolean) : boolean;     external;
function PeutCompleterPartieAvecSelectionRapport(var partieAlpha : String255) : boolean;     external;
procedure PlaquerPartieLegale(partieAlphaCompactee : String255; flags : SInt32);     external;
procedure DoChangeEcritTournoi(nouveauNombreDeColonnes : SInt16);     external;
procedure EnregisterToucheClavier(c : char; when : SInt32);     external;
function EstEnAttenteSelectionRapideDeListe : boolean;     external;
procedure EcritNewEvalIntegerDansRapport(var position : plateauOthello; var jouable : plBool; var frontiere : InfoFront; nbNoir,nbBlanc,trait : SInt32; var whichEval : VectNewEvalInteger);     external;
procedure WritelnZebraValuesDansRapport(var pos : PositionEtTraitRec);     external;
procedure TestRegressionLineaire;     external;
procedure DemarrerLeTestDuZooAvecLaSouris;     external;
procedure HistogrammeDesMoyennesParScoreTheoriqueDansRapport;     external;
procedure DoRetourDerniereMarque;     external;
procedure DoAvanceProchaineMarque;     external;
procedure DoJouerMeilleurCoupConnuMaintenant;     external;
procedure ChercherLeProchainNoeudAvecBeaucoupDeFils(nbreDeFils : SInt32);     external;
procedure DoMilieuDeJeu(selectedByMenu : boolean);     external;
	procedure CopierPucesNumerotees;     external;
procedure AfficheProchainProblemeStepanov;     external;
	function IsAlpha(ch : char) : boolean;     external;
	function IsLower(ch : char) : boolean;     external;
function NumberOfSons(G : GameTree) : SInt16;     external;
function FindSquareWithThisEtiquette(etiquette : char; var square : SInt32) : boolean;     external;
procedure TraiteCoupImprevu(caseX : SInt32);     external;
procedure TrackScrollingRapport(ch: ControlHandle; part: SInt16);     external;
function GetVerticalScrollerOfRapport : ControlHandle;     external;
procedure MontePartieHilitee(revenirAuDebut : boolean);     external;
procedure DescendPartieHilitee(allerALaFin : boolean);     external;
function GetHorizontalScrollerOfRapport : ControlHandle;     external;
procedure DoRetourDernierEmbranchement;     external;
procedure DoAvanceProchainEmbranchement;     external;
procedure VoirLeDebutDuRapport;     external;
procedure VoirLaFinDuRapport;     external;
procedure JoueCoupQueMacAttendait;     external;
procedure GetFilsDeLaPositionCouranteDansLeGraphe(typesVoulus : EnsembleDeTypes; tries : boolean; var FilsSelectionnes:listeDeCellulesEtDeCoups);     external;
procedure BeginHiliteMenu(menuID : SInt16);     external;
procedure RevenirAuProblemeDePriseDeCoinPrecedent;     external;
procedure DoNegationnerLesSousCriteres;     external;
procedure DoSwaperLesSousCriteres;     external;
procedure FindStringDansArbreDeJeuCourant(const s : String255; ignoreCase : boolean);     external;
function GetLastStringSearchedInGameTree : String255;     external;
function BibliothequeDeZebraEstAfficheeSurOthellier : boolean;     external;
function  PtInPlateau(loc : Point; var caseCliquee : SInt16) : boolean;     external;
procedure ChangePierresDeltaApresCommandClicSurOthellier(mouseLoc : Point; jeu : plateauOthello; forceAfficheMarquesSpeciales : boolean);     external;
function AppuieBouton(boutonRect : rect; rayonCoin : SInt16; mouseLoc : Point; drawDownState,drawUpState : BoutonDrawingProc) : boolean;     external;
procedure DrawInvertedClockBoundingRect(clockRect : rect; radius : SInt32);     external;
procedure DrawClockBoundingRect(clockRect : rect; radius : SInt32);     external;
function GetRectEscargot : rect;     external;
procedure BeginLiveUndo(coupsProteges : SquareSet; nbreDeTicksDeDelai : SInt32);     external;
function GetEnsembleDesCoupsDesFreresReels(G : GameTree) : SquareSet;     external;
function SelectTheSonAfterThisMove(G : GameTree; square,couleur : SInt16) : GameTree;     external;
procedure DetruireCeFilsOfCurrentNode(var whichSon : GameTree);     external;
function GetEnsembleDesCoupsDesFilsReels(G : GameTree) : SquareSet;     external;
function SquareSetEnString(ensemble : SquareSet) : String255;     external;
function TrouveCoupDansPartieCourante(whichSquare : SInt16; var numeroDuCoup : SInt16) : boolean;     external;
procedure DoInsererMarque;     external;
procedure DoAvanceAuCoupNro(numeroCoup : SInt16; NeDessinerQueLesNouveauxPions : boolean);     external;
procedure EffaceZoneADroiteDeLOthellier;     external;
procedure EffaceZoneAuDessousDeLOthellier;     external;
function AppuieBoutonParControlManager(titre : String255; boutonRect : rect; marge : SInt16; mouseLoc : Point) : boolean;     external;
procedure DoGrowWindow(thisWindow : WindowPtr; event : eventRecord);     external;
function TraiteMouseEventDansTranscript(evt : eventRecord) : boolean;     external;
procedure DessineCasePaletteCouleur(nroAction : SInt16; enfoncee : boolean);     external;
	function BoutonAppuye(whichWindow : WindowPtr; Rectangle : rect) : boolean;     external;
function PeutAvancerUnCoup : boolean;     external;
function PeutAvancerPartieSelectionnee : boolean;     external;
procedure PlayPosePionSound;     external;
function NextPageDansAide(current : PagesAide) : PagesAide;     external;
function StatistiquesCalculsFaitsAuMoinsUneFois : boolean;     external;
procedure TransposeCoupPourOrientation(var whichSquare : SInt16; autreCoupQuatreDiagonal : boolean);     external;
function InterligneArbreFenetreArbreDeJeu : SInt16;     external;
function NbDeFilsOfCurrentNode : SInt16;     external;
function SelectNthSon(n : SInt16; G : GameTree) : GameTree;     external;
function SelectFirstPropertyOfTypesInGameTree(whichTypes : SetOfPropertyTypes; G : GameTree) : PropertyPtr;     external;
function GetOthelloSquareOfProperty(prop : Property) : SInt16;     external;
procedure InverserLeNiemeFilsDansFenetreArbreDeJeu(N : SInt16);     external;
	procedure DragLine(whichWindow : WindowPtr; orientation : SInt16; UtiliseHiliteMode : boolean; minimum, maximum, step : SInt32; var positionSouris, index : SInt32; Action : ProcedureTypeWithLongint);     external;
	procedure IdentiteSurN(var N : SInt32);     external;
procedure BringSonOfCurrentNodeInPositionN(whichSon : GameTree;N : SInt16);     external;
procedure ActiverModeEditionFenetreArbreDeJeu;     external;
procedure ClicDansTexteCommentaires(pt : Point; extend : boolean);     external;
procedure GetCurrentScript(var currentScript : SInt32);     external;
procedure SwitchToRomanScript;     external;
procedure DeactiverModeEditionFenetreArbreDeJeu;     external;
function SurIconeInterversion(whichPoint : Point; var noeudCorrespondant : GameTree) : boolean;     external;
procedure CyclerDansOrbiteInterversionDuGraphe(whichNode : GameTree; avancerDansOrbite : boolean);     external;
procedure ChangeDelimitationEditionRectFenetreArbreDeJeu(positionDelimitation : SInt16);     external;
  procedure MyEraseRectWithColor(const (*var*) r : Rect; couleurCmd : SInt32; whichPattern : pattern; fonctionAppelante : String255);     external;
procedure ClicInRapport(evt : eventRecord);     external;
procedure DrawScrollBars(whichWindow : WindowPtr);     external;
procedure DessineCourbe(coloration : typeColorationCourbe; fonctionAppelante : String255);     external;
procedure MontrerAscenseurListe;     external;
procedure CacherAscenseurListe;     external;
procedure RedrawFenetreRapport;     external;
procedure DessinePictureIconisation;     external;
procedure DessineZoneDeTexteDansFenetreArbreDeJeu(forceModeEdition : boolean);     external;
procedure CheckScreenDepth;     external;
procedure NoUpdateThisWindow(whichWindow : WindowPtr);     external;
procedure DoSystemTask(couleur : SInt32);     external;
  function RegionEstVide(whichRegion : RgnHandle) : boolean;     external;
procedure EraseRectDansWindowPlateau(whichRect : rect);     external;
procedure DiminueLatenceEntreDeuxDoSystemTask;     external;
	procedure MyGetKeys(var theKeys : myKeyMap);     external;
	function MemesTouchesAppuyees(var keyMap1, keyMap2 : myKeyMap) : boolean;     external;
	function ToucheAppuyee(KeyCode : SInt16) : boolean;     external;
procedure SetRepetitionDeToucheEnCours(flag : boolean);     external;
function ZebraBookDemandeAccelerationDesEvenements : boolean;     external;
procedure IncrementerMagicCookieOfZebraBook;     external;
procedure StoreKeyDownEvent(var whichEvent : eventRecord);     external;
procedure EcritKeyDownEventDansRapport(evt : eventRecord);     external;
procedure FixeMarquesSurMenus;     external;
procedure SetMenusChangeant(modifiers : SInt16);     external;
function MyMenuKey(ch : char) : SInt32;     external;
procedure DecrementeNiveauCurseurTeteDeMort;     external;
procedure IncrementeCompteurDeMouseEvents;     external;
procedure DoActivateWindow(whichWindow : WindowPtr; activation : boolean);     external;
procedure TransfererLePressePapierGlobalDansTextEdit;     external;
  function EstUnDoubleClic(myEvent : eventRecord; attendClicSuivant : boolean) : boolean;     external;
function WindowPlateauSousDAutresFenetres : boolean;     external;
function MyGetRootControl(theWindow : WindowRef) : ControlRef;     external;
procedure TraiteSourisListe(evt : eventRecord);     external;
procedure TraiteSourisCourbe(evt : eventRecord);     external;
procedure TraiteSourisNuage(whichEvent : eventRecord);     external;
procedure EmpileFenetresSousPalette;     external;
procedure MyZoomInOut(window : WindowPtr; partcode : SInt16);     external;
procedure EndLiveUndo;     external;
procedure SwitchToScript(whichScript : SInt32);     external;
function MyPutScrap(sourceBufferByteCount : SInt32; flavorType: ScrapFlavorType; sourceBuffer: UnivPtr) : OSStatus;     external;
  function IsAnArrowKey(ch : char) : boolean;     external;
function TrouveCommandeDansCommentaireDansFenetreArbreDeJeu(var commande,argument : String255) : boolean;     external;
procedure ExecuteCommandeArbreDeJeu(G : GameTree; commande,argument : String255);     external;
procedure AfficheCommentairePartieDansRapport;     external;
procedure InstallerFichierCronjob(nomFichierCronjob : String255);     external;
procedure LancerInterruptionPourCalculerScoresTheoriquesPartiesDansListe;     external;
procedure LancerInterruptionPourRechercherSolitairesDansListe;     external;
	procedure SetNomFichierDansTitreDiagrammeFFORUM(nomFichier : String255);     external;
function GetPositionEtTraitInitiauxOfGameTree : PositionEtTraitRec;     external;
function PositionEtTraitEnString(var positionEtTrait : PositionEtTraitRec) : String255;     external;
function GetPierresDeltaCourantesEnString : String255;     external;
  procedure Parser (s : String255; var tete,reste : String255);     external;
  function ChaineEnLongint(const s : String255) : SInt32;     external;
function ParsePositionEtTrait(s : String255; var positionEtTrait : PositionEtTraitRec) : boolean;     external;
function EstLaPositionInitialeStandard(var position : PositionEtTraitRec) : boolean;     external;
function GetTraitOfPosition(var position : PositionEtTraitRec) : SInt32;     external;
function AddPropertyListAsStringDansCurrentNode(propertyListDescription : String255) : boolean;     external;
function PlaquerPositionEtPartieFictive(initialPosition, moves : String255; nbreCoupsRepris : SInt32) : OSErr;     external;
function PositionEtTraitInitiauxStandardEnString : String255;     external;
function GetAutorisationChargerLaBaseSansPasserParLeDialogue : boolean;     external;
procedure SetAutorisationChargerLaBaseSansPasserParLeDialogue(flag : boolean);     external;
procedure AfficherLesJoueursWthorSansNumeroFFO;     external;

