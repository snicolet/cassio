	procedure AttendFrappeClavier;     external;
procedure WritelnDansRapport(s : String255);     external;
procedure WriteDansRapport(s : String255);     external;
procedure WritelnNumDansRapport(s : String255; num : SInt32);     external;
procedure WriteNumDansRapport(s : String255; num : SInt32);     external;
procedure WritelnStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WritelnDansRapportThreadSafe(s : String255);     external;
function MakeEmptyPositionEtTraitSet : PositionEtTraitSet;     external;
procedure DisposePositionEtTraitSet(var S : PositionEtTraitSet);     external;
function CardinalOfPositionEtTraitSet(S : PositionEtTraitSet) : SInt32;     external;
	function ReadStringFromRessource(stringListID, index : SInt16) : String255;     external;
  procedure SetNameOfSFReply(var reply : SFReply; const name : String255);     external;
function MakeFileName(var reply : SFReply; prompt : String255; var whichSpec : fileInfo) : boolean;     external;
	function GetNameOfSFReply(const reply : SFReply) : String255;     external;
function FileExists(info : fileInfo; var fic : basicfile) : OSErr;     external;
	function FileInfo(vrn : SInt16; dirID : SInt32; name : String255) : fileInfo;     external;
function CreateFile(info : fileInfo; var fic : basicfile) : OSErr;     external;
function OpenFile(var fic : basicfile) : OSErr;     external;
function EmptyFile(var fic : basicfile) : OSErr;     external;
procedure AlerteSimpleFichierTexte(nomFichier : String255; erreurES : SInt32);     external;
function CloseFile(var fic : basicfile) : OSErr;     external;
procedure COPY_STR60_TO_PACKED_GAME(const s60 : String255; var result : PackedThorGame);     external;
procedure TraductionThorEnAlphanumerique(const s : PackedThorGame; var result : String255);     external;
function Write(var fic : basicfile; s : String255) : OSErr;     external;
function Writeln(var fic : basicfile; s : String255) : OSErr;     external;
procedure SetFileCreatorFichierTexte(var fic : basicfile; quelType : OSType);     external;
procedure SetFileTypeFichierTexte(var fic : basicfile; quelType : OSType);     external;
  procedure WriteNumAt(s : String255; num : SInt32; h,v : SInt32);     external;
function PositionEtTraitInitiauxStandard : PositionEtTraitRec;     external;
function UpdatePositionEtTrait(var positionEtTrait : PositionEtTraitRec; whichMove : SInt32) : boolean;     external;
function SamePositionEtTrait(var pos1,pos2 : PositionEtTraitRec) : boolean;     external;
procedure SHORTEN_PACKED_GAME(var whichGame : PackedThorGame; whichLength : UInt8);     external;
procedure Normalisation(var partie120 : String255; var autreCoupQuatreDiag : boolean; interversions : boolean);     external;
procedure CalculePositionFinale(const ligne : String255; var plat : plateauOthello; var ligneLegale : boolean; var nbCoupsLegaux : SInt32);     external;
function PositionsEgales(var plat1,plat2 : plateauOthello) : boolean;     external;
procedure ApprendInterversionAlaVoleeDansGraphe(const ligne1,ligne2 : typePartiePourGraphe; annonceDansRapport : boolean);     external;
function GetCurrentNode : GameTree;     external;
procedure AddTranspositionPropertyToCurrentNode(var texte : String255);     external;
procedure AddTranspositionPropertyToGameTree(var texte : String255; var G : GameTree);     external;
procedure COPY_PACKED_GAME_TO_STR60(const game : PackedThorGame; var result60 : String255);     external;
	function TPCopy (source : String255; start, count: SInt32) : String255;     external;
function EnModeEntreeTranscript : boolean;     external;
procedure MyParamText( const (*var*) param0: String255; const (*var*) param1: String255; const (*var*) param2: String255; const (*var*) param3: String255 );     external;
procedure DialogueSimple(dialogueID : SInt16{; s1,s2,s3,s4 : String255});     external;
procedure GetCurrentScript(var currentScript : SInt32);     external;
procedure DisableKeyboardScriptSwitch;     external;
procedure FinRapport;     external;
procedure TextNormalDansRapport;     external;
procedure EnableKeyboardScriptSwitch;     external;
procedure SetCurrentScript(whichScript : SInt32);     external;
procedure SwitchToRomanScript;     external;
procedure SetEcritToutDansRapportLog(flag : boolean);     external;
procedure TraductionAlphanumeriqueEnThor(const s : String255; var result : PackedThorGame);     external;
function PileEstPleine(whichPile : Pile) : boolean;     external;
function GetTraitOfPosition(var position : PositionEtTraitRec) : SInt32;     external;
function GenericHash(data : Ptr; tailleData : SInt32) : SInt32;     external;
function ABRSearch(x : ABR; whichKey : ABRKey) : ABR;     external;
procedure AddPositionEtTraitToSet(var position : PositionEtTraitRec; data : SInt32; var S : PositionEtTraitSet);     external;
procedure Empiler(var whichPile : Pile; element : SInt32; var ok : boolean);     external;
function NbElementsDansPile(whichPile : Pile) : SInt32;     external;
function PileEstVide(whichPile : Pile) : boolean;     external;
function PositionEtTraitSetEstVide(S : PositionEtTraitSet) : boolean;     external;
function Depiler(var whichPile : Pile; var ok : boolean) : SInt32;     external;
procedure SupprimerDansABR(var arbre : ABR; var element : ABR);     external;
function CoupEnStringEnMajuscules(coup : SInt16) : String255;     external;
procedure WriteStringDansRapport(s : String255);     external;
function MemberOfPositionEtTraitSet(var position : PositionEtTraitRec; var data : SInt32; S : PositionEtTraitSet) : boolean;     external;
procedure MemoryFillChar(bufferPtr : universal UnivPtr; byteCount: SInt32; caractere : char);     external;
function NbPionsDeCetteCouleurDansPosition(couleur : SInt32; var position : plateauOthello) : SInt32;     external;
function PositionDansStringAlphaEnCoup(const s : String255; positionDansChaine : SInt16) : SInt16;     external;
function ABRHauteur(x : ABR) : SInt32;     external;
procedure WritelnStringDansRapport(s : String255);     external;
function EstUnePartieOthello(var s : String255; compacterPartie : boolean) : boolean;     external;
function PositionEtTraitAfterMoveNumber(var game : PackedThorGame; numeroCoup : SInt32; var typeErreur : SInt32) : PositionEtTraitRec;     external;
function GetAutoVidageDuRapport : boolean;     external;
function GetEcritToutDansRapportLog : boolean;     external;
procedure SetAutoVidageDuRapport(flag : boolean);     external;
function AllocatePile(tailleDemandee : SInt32; var ok : boolean) : Pile;     external;
function StringEnCoup(const s : String255) : SInt16;     external;
procedure DisposePile(var whichPile : Pile);     external;
function GameTreeHasStandardInitialPosition : boolean;     external;
function ExisteDansHashTableInterversions(var positionEtTrait : PositionEtTraitRec; var GameTreeInterversion : GameTree; var hashIndex : InterversionHashIndexRec) : boolean;     external;
procedure MetDansHashTableInterversions(G : GameTree; var positionEtTrait : PositionEtTraitRec; hashIndex : InterversionHashIndexRec);     external;
function CreatePartieEnAlphaJusqua(G : GameTree; var partieAlpha : String255; var positionTerminale : PositionEtTraitRec) : boolean;     external;
procedure FusionOrbitesInterversions(var G1,G2 : GameTree);     external;
function CoupsDuCheminJusquauNoeudEnString(G : GameTree) : String255;     external;
procedure SetNbCollisionsInterversions(n : SInt32);     external;
function GetNbCollisionsInterversions : SInt32;     external;
function GetPositionEtTraitACeNoeud(G : GameTree; var position : PositionEtTraitRec; const fonctionAppelante : String255) : boolean;     external;
function SAME_PACKED_GAMES(const game1, game2 : PackedThorGame) : boolean;     external;
procedure ExtraitPremierCoup(var premierCoup : SInt16; var autreCoupQuatreDiag : boolean);     external;
procedure AlerteSimple(texte : String255);     external;
function COMPARE_PACKED_GAMES(const game1, game2 : PackedThorGame) : SInt32;     external;
procedure GeneralQuickSort(lo,up : SInt32; lecture : LectureTableauProc; affectation : AffectationProc; ordre : OrdreProc);     external;
function InterversionDansLeGrapheApprentissage(const whichGame : String255; listerInterDansRapport : boolean; tableLignes : TableParties60Ptr) : boolean;     external;
procedure SymetriserPartieFormatThor(var s60 : PackedThorGame; axeSymetrie : SInt32; debut,fin : SInt32);     external;
procedure SetCassioMustCheckDangerousEvents(newvalue : boolean; oldValue : BooleanPtr);     external;
function PositionEtTraitAfterMoveNumberAlpha(game : String255; numeroCoup : SInt32; var typeErreur : SInt32) : PositionEtTraitRec;     external;
procedure RejouePartieOthello(s : String255; coupMax : SInt16; positionDepartStandart : boolean; platImpose : plateauOthello; traitImpose : SInt16; var gameNodeLePlusProfondGenere : GameTree; peutDetruireArbreDeJeu : boolean; avecNomsOuvertureDansArbre : boolean);     external;
function MakeCoupleLongintProperty(whichType : SInt16; whichLongint1,whichLongint2 : SInt32) : Property;     external;
procedure OverWritePropertyToGameTree(prop : Property; var G : GameTree; var changed : boolean);     external;
procedure DisposePropertyStuff(var p : Property);     external;
function GetAffichageProprietesOfCurrentNode : UInt32;     external;
procedure EffaceNoeudDansFenetreArbreDeJeu;     external;
procedure LireBibliothequeDeZebraPourCurrentNode(const fonctionAppelante : String255);     external;
procedure EcritCurrentNodeDansFenetreArbreDeJeu(avecEcritureDesFils, doitEffacerPremiereLigneDeLaFenetre : boolean);     external;
procedure WritelnPositionEtTraitDansRapport(const position : plateauOthello; trait : SInt32);     external;
procedure MoveMemory(sourcePtr,destPtr: Ptr; byteCount: SInt32);     external;
function GET_ADRESS_OF_FIRST_MOVE(var whichGame : PackedThorGame) : Ptr;     external;
