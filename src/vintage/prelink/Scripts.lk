	function Min (a, b: SInt32) : SInt32;     external;
	function Max (a, b: SInt32) : SInt32;     external;
	procedure AttendFrappeClavier;     external;
procedure WritelnDansRapport(s : String255);     external;
procedure WriteDansRapport(s : String255);     external;
procedure WritelnNumDansRapport(s : String255; num : SInt32);     external;
procedure WriteNumDansRapport(s : String255; num : SInt32);     external;
procedure WritelnStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WritelnDansRapportThreadSafe(s : String255);     external;
  function RandomEntreBornes(a, b : SInt16) : SInt16;     external;
	procedure RandomizeTimer;     external;
	function NoCasePos( s1, s2 : String255 ) : SInt16;     external;
procedure ExtraitPartieTableStockageParties(nroReference : SInt32; var partieStr : PackedThorGame);     external;
function PositionEtTraitAfterMoveEnString(var game : PackedThorGame; numeroCoup : SInt32; var typeErreur : SInt32) : String255;     external;
	function ReadStringFromRessource(stringListID, index : SInt16) : String255;     external;
  procedure SetNameOfSFReply(var reply : SFReply; const name : String255);     external;
function MakeFileName(var reply : SFReply; prompt : String255; var whichSpec : FSSpec) : boolean;     external;
	function GetNameOfSFReply(const reply : SFReply) : String255;     external;
function FichierTexteExisteFSp(mySpec : FSSpec; var fic : FichierTEXT) : OSErr;     external;
	function MyMakeFSSpec(vrn : SInt16; dirID : SInt32; name : String255) : FSSpec;     external;
function CreeFichierTexteFSp(mySpec : FSSpec; var fic : FichierTEXT) : OSErr;     external;
function OuvreFichierTexte(var fic : FichierTEXT) : OSErr;     external;
function VideFichierTexte(var fic : FichierTEXT) : OSErr;     external;
procedure AlerteSimpleFichierTexte(nomFichier : String255; erreurES : SInt32);     external;
function FermeFichierTexte(var fic : FichierTEXT) : OSErr;     external;
function WritelnDansFichierTexte(var fic : FichierTEXT; s : String255) : OSErr;     external;
function GetApplicationName(default : String255) : String255;     external;
  procedure SafeSetCursor(myCursor : CursHandle);     external;
  function RandomLongintEntreBornes(a, b : SInt32) : SInt32;     external;
procedure SetFileCreatorFichierTexte(var fic : FichierTEXT; quelType : OSType);     external;
procedure SetFileTypeFichierTexte(var fic : FichierTEXT; quelType : OSType);     external;
procedure RemettreLeCurseurNormalDeCassio;     external;
function GetTraitOfPosition(var position : PositionEtTraitRec) : SInt32;     external;
function MeilleureSuiteInfosEnChaine(nbEspacesEntreCoups : SInt16; avecScore,avecNumeroPremierCoup,enMajuscules,remplacerScoreIncompletParEtc : boolean; whichScore : SInt16) : String255;     external;
	function TPCopy (source : String255; start, count: SInt32) : String255;     external;
function CassioEstEnTrainDeReflechir : boolean;     external;
function PeutArreterAnalyseRetrograde : boolean;     external;
procedure EndHiliteMenu(tickDepart : SInt32; delai : SInt32; sansAttente : boolean);     external;
function GetNouvelleEvalDejaChargee : boolean;     external;
procedure EssayerLireFichiersEvaluationDeCassio;     external;
function EvaluationEdmondEstDisponible : boolean;     external;
function LireFichierEvalEdmondSurLeDisque : OSErr;     external;
procedure SetEvaluationEdmondEstDisponible(flag : boolean);     external;
procedure SetDebuggageUnitFichiersTexte(flag : boolean);     external;
function FichierTexteExiste(nom : String255 ; vRefNum : SInt16; var fic : FichierTEXT) : OSErr;     external;
function CreeFichierTexte(nom : String255 ; vRefNum : SInt16; var fic : FichierTEXT) : OSErr;     external;
function GetEcritToutDansRapportLog : boolean;     external;
procedure SetEcritToutDansRapportLog(flag : boolean);     external;
procedure AnnonceOuvertureFichierEnRougeDansRapport(nomFichier : String255);     external;
function EOFFichierTexte(var fic : FichierTEXT; var erreurES : OSErr) : boolean;     external;
	function EscapeDansQueue : boolean;     external;
function ReadlnDansFichierTexte(var fic : FichierTEXT; var s : String255) : OSErr;     external;
  function EnleveEspacesDeGauche(const s : String255) : String255;     external;
function ParsePositionEtTrait(s : String255; var positionEtTrait : PositionEtTraitRec) : boolean;     external;
function DoPlaquerPositionAndMakeEndgameSolve(var positionEtTrait : PositionEtTraitRec; endgameSolveFlags : SInt32; var solveResults : MakeEndgameSearchResultRec) : SInt32;     external;
procedure WritelnStringAndReelDansRapport(s : String255; x : double; nbDecimales : SInt16);     external;
procedure ChangeFontFaceDansRapport(whichStyle : StyleParameter);     external;
procedure ChangeFontColorDansRapport(whichColor : SInt16);     external;
  function SecondesEnJoursHeuresSecondes(secondes : SInt32) : String255;     external;
procedure TextNormalDansRapport;     external;
procedure LanceInterruption(typeInterruption : SInt16; const fonctionAppelante : String255);     external;
	function ParamStr(s, p0, p1, p2, p3 : String255) : String255;     external;
  function ReplaceStringOnce(const s, pattern, replacement : String255) : String255;     external;
	function FSSpecToFullPath (fs : FSSpec; var path : String255) : OSErr;     external;
	function GetNameOfFSSpec(fs : FSSpec) : String255;     external;
function InsererFichierDansFichierTexte(var fic : FichierTEXT; pathFichierAInserer : String255) : OSErr;     external;
procedure FermerFichierEtFabriquerFichierAbstrait(var fic : FichierTEXT; var theFile : FichierAbstrait);     external;
function WritePositionEtTraitEnHTMLDansFichierAbstrait(position : PositionEtTraitRec; var theFile : FichierAbstrait; chainePrologue, chaineEpilogue, chainePionsNoirs, chainePionsBlancs, chaineCoupsLegauxBlancs, chaineCoupsLegauxNoirs, chaineAutresCasesVides, chaineTop, chaineBottom, chaineBordureGauche, chaineBordureDroite, chaineLegende : String255 ) : OSErr;     external;
procedure DisposeFichierAbstraitEtOuvrirFichier(var fic : FichierTEXT; var theFile : FichierAbstrait);     external;
function UpdatePositionEtTrait(var positionEtTrait : PositionEtTraitRec; whichMove : SInt32) : boolean;     external;
function CoupEnStringEnMinuscules(coup : SInt16) : String255;     external;
function WritePositionEtTraitPageWebFFODansFichierAbstrait(position : PositionEtTraitRec; legende : String255; var theFile : FichierAbstrait) : OSErr;     external;
function WritelnEnHTMLDansFichierAbstrait(var theFile : FichierAbstrait; s : String255) : OSErr;     external;
function StringEnHTML(s : String255) : String255;     external;
	procedure SplitRightBy (s : String255; sub : char; var left, right: String255);     external;
function FichierTexteDeCassioExiste(nom : String255; var fic : FichierTEXT) : OSErr;     external;
function CreeFichierTexteDeCassio(nom : String255; var fic : FichierTEXT) : OSErr;     external;
procedure CreateJPEGImageOfPosition(position : PositionEtTraitRec; fileSpec : FSSpec);     external;
function ReadlnBufferDansFichierTexte(var fic : FichierTEXT; buffPtr : Ptr; var count : SInt32) : OSErr;     external;
  procedure EnleveEtCompteCeCaractereAGaucheDansBuffer(buffer : Ptr; var tailleBuffer : SInt32; ch : char; var nbCaracteresEnleves : SInt32);     external;
  function BufferToPascalString(buffer : Ptr; indexDepart,indexFin : SInt32) : String255;     external;
  procedure Parse6(s : String255; var s1,s2,s3,s4,s5,s6,reste : String255);     external;
function ScannerStringPourTrouverCoup(debutScan : SInt16; const s : String255; var positionDuCoupDansChaine : SInt16) : SInt16;     external;
  procedure Parse5(s : String255; var s1,s2,s3,s4,s5,reste : String255);     external;
procedure PlaquerPosition(plat : plateauOthello; trait : SInt16; flags : SInt32);     external;
function WritePositionEtTraitEnEPSDansFichier(position : PositionEtTraitRec; fic : FichierTEXT) : OSErr;     external;
procedure InsereTexteDansRapport(text : Ptr; length : SInt32);     external;
