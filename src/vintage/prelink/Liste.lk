	function Min (a, b: SInt32) : SInt32;     external;
	function Max (a, b: SInt32) : SInt32;     external;
	procedure AttendFrappeClavier;     external;
procedure WritelnDansRapport(s : String255);     external;
procedure WriteDansRapport(s : String255);     external;
procedure WritelnNumDansRapport(s : String255; num : SInt32);     external;
procedure WriteNumDansRapport(s : String255; num : SInt32);     external;
procedure WritelnStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WritelnDansRapportThreadSafe(s : String255);     external;
	function ReadStringFromRessource(stringListID, index : SInt16) : String255;     external;
procedure DessineBoutonPicture(window : WindowRef; pictureID : SInt32; position : Point; var boutonRect : rect);     external;
	procedure DrawStringPourGNUPascal(const s : String255);     external;
	function StringWidthPourGNUPascal(const s : String255): SInt16;     external;
	function MakeRect(left, top, right, bottom : SInt32) : Rect;     external;
function GetWindowPortRect(window : WindowPtr) : rect;     external;
  procedure MyEraseRect(const (*var*) r : Rect);     external;
  procedure MyEraseRectWithColor(const (*var*) r : Rect; couleurCmd : SInt32; whichPattern : pattern; fonctionAppelante : String255);     external;
  procedure EnableQuartzAntiAliasingThisPort(port : CGrafPtr; useQuartzMetrics : boolean);     external;
	function ParamStr(s, p0, p1, p2, p3 : String255) : String255;     external;
  function SeparerLesChiffresParTrois(var s : String255) : String255;     external;
procedure OthellierEtPionsDeDepart(var plat : plateauOthello; var nBla,nNoi : SInt32);     external;
procedure CarteFrontiere(const plat : plateauOthello; var front : InfoFront);     external;
procedure CarteJouable(const plat : plateauOthello; var carte : plBool);     external;
procedure TraductionThorEnAlphanumerique(const s : PackedThorGame; var result : String255);     external;
function ModifPlat(a,coul : SInt32; var jeu : plateauOthello; var jouable : plBool; var nbbl,nbno : SInt32; var front : InfoFront) : boolean;     external;
function PeutJouerIci(couleur,a : SInt32; const plat : plateauOthello) : boolean;     external;
procedure WritelnPositionEtTraitDansRapport(const position : plateauOthello; trait : SInt32);     external;
function DoitPasser(coul : SInt32; const plat : plateauOthello; var jouable : plBool) : boolean;     external;
function DoitPasserPlatSeulement(couleur : SInt32; var plat : plateauOthello) : boolean;     external;
procedure ExtraitPartieTableStockageParties(nroReference : SInt32; var partieStr : PackedThorGame);     external;
procedure SetPortByWindow(window : WindowPtr);     external;
function EclaircirCouleurDeCetteQuantite(theColor : RGBColor; quantite : SInt32) : RGBColor;     external;
function CouleurCmdToRGBColor(couleurCmd : SInt16) : RGBColor;     external;
  procedure DisableQuartzAntiAliasingThisPort(port : CGrafPtr);     external;
procedure EssaieSetPortWindowPlateau;     external;
  procedure WriteNumAt(s : String255; num : SInt32; h,v : SInt32);     external;
function TEGetTextLength(text : TEHandle) : SInt32;     external;
function TEGetViewRect(text : TEHandle) : rect;     external;
	function TPCopy (source : String255; start, count: SInt32) : String255;     external;
procedure InvalRect(r : rect);     external;
procedure TESetDestRect(text : TEHandle; theRect : rect);     external;
procedure TESetViewRect(text : TEHandle; theRect : rect);     external;
function TEGetDestRect(text : TEHandle) : rect;     external;
procedure DessineBoiteAscenseurDroite(whichWindow : WindowPtr);     external;
function PACKED_GAME_IS_A_DIAGONAL(const whichGame : PackedThorGame) : boolean;     external;
procedure ExtraitPremierCoup(var premierCoup : SInt16; var autreCoupQuatreDiag : boolean);     external;
procedure TransposePartiePourOrientation(var partie60 : PackedThorGame; autreCoupQuatreDiagonal : boolean; minCoupTranspose,maxCoupTranspose : SInt32);     external;
function PartieCouranteEstUneDiagonaleAvecLeCoupQuatreEnD6 : boolean;     external;
procedure MemoryFillChar(bufferPtr : universal UnivPtr; byteCount: SInt32; caractere : char);     external;
function ModifPlatSeulement(a : SInt32; var jeu : plateauOthello; coul : SInt32) : boolean;     external;
function GetNomJoueurNoirSansPrenomParNroRefPartie(nroReference : SInt32) : String255;     external;
function GetNomJoueurBlancSansPrenomParNroRefPartie(nroReference : SInt32) : String255;     external;
function GetScoreReelParNroRefPartie(nroReference : SInt32) : SInt16;     external;
procedure ConstruitTitrePartie(const nomNoir,nomBlanc : String255; enleverLesPrenoms : boolean; scoreNoir : SInt32; var titre : String255);     external;
function GetNomTournoiParNroRefPartie(nroReference : SInt32) : String255;     external;
  procedure MYYYDeleteYYYYString( var s : String255; index, nb_chars_to_delete : SInt32);     external;
function GetAnneePartieParNroRefPartie(nroReference : SInt32) : SInt16;     external;
function GetGainTheoriqueParNroRefPartie(nroReference : SInt32) : String255;     external;
function GetNomJoueurSansPrenom(nroJoueur : SInt32) : String255;     external;
function GetNomTournoi(nroTournoi : SInt32) : String255;     external;
  function EnleveEspacesDeDroite(const s : String255) : String255;     external;
procedure SHORTEN_PACKED_GAME(var whichGame : PackedThorGame; whichLength : UInt8);     external;
function PositionEtTraitAfterMoveNumber(var game : PackedThorGame; numeroCoup : SInt32; var typeErreur : SInt32) : PositionEtTraitRec;     external;
function GetPositionEtTraitPartieCouranteApresCeCoup(numeroCoup : SInt16; var typeErreur : SInt32) : PositionEtTraitRec;     external;
function SamePositionEtTrait(var pos1,pos2 : PositionEtTraitRec) : boolean;     external;
function GetNumeroOrdreAlphabetiqueTournoiParNroRefPartie(nroReference : SInt32) : SInt32;     external;
function GetNumeroOrdreAlphabetiqueJoueurNoirParNroRefPartie(nroReference : SInt32) : SInt32;     external;
function GetNumeroOrdreAlphabetiqueJoueurBlancParNroRefPartie(nroReference : SInt32) : SInt32;     external;
function GetNumeroPremierePartieAffichee : SInt32;     external;
function GetNumeroDernierePartieAffichee : SInt32;     external;
procedure SetValeurAscenseurListe(var value : SInt32);     external;
procedure GetNumerosPremiereEtDernierePartiesAffichees(var premierNumero,derniernumero : SInt32);     external;
procedure CalculeControlLongintMaximum(nbreLignesVisiblesDansFenetre : SInt32);     external;
function FrontWindowSaufPalette : WindowPtr;     external;
procedure GetCurrentScript(var currentScript : SInt32);     external;
procedure SwitchToRomanScript;     external;
procedure SwitchToScript(whichScript : SInt32);     external;
function PositionsSontEgales(const pos1,pos2 : plateauOthello) : boolean;     external;
function JeuCourant : plateauOthello;     external;
function CalculePositionApres(numero : SInt16; partie60 : PackedThorGame) : plateauOthello;     external;
procedure ExtraitCoupTableStockagePartie(nroReference, nroCoup : SInt32; var coup : SInt32);     external;
procedure TransposeCoupPourOrientation(var whichSquare : SInt16; autreCoupQuatreDiagonal : boolean);     external;
	function EstUnAscenseurAvecDoubleScroll(theScroller : ControlHandle; var contourAscenseurRect, regionGriseeRect : rect; var estHorizontal : boolean) : boolean;     external;
	function SmartScrollEstInstalle(theScroller : ControlHandle; var proportion : fixed) : boolean;     external;
procedure InterpolationPremierePartieAffichee(ControlValue : SInt32);     external;
function GetNomDistributionParNroRefPartie(nroReference : SInt32) : String255;     external;
function EstUnePartieAvecTournoiJaponais(nroReferencePartie : SInt32) : boolean;     external;
function GetNomJaponaisDuTournoiAvecAnneeParNroRefPartie(nroReference : SInt32; longueurTotaleVoulue : SInt16) : String255;     external;
function GetNomJaponaisDuTournoiParNroRefPartie(nroReference : SInt32) : String255;     external;
function GetNomCourtTournoiAvecAnneeParNroRefPartie(nroReference : SInt32; longueurTotaleVoulue : SInt16) : String255;     external;
function GetNomTournoiAvecAnneeParNroRefPartie(nroReference : SInt32; longueurTotaleVoulue : SInt16) : String255;     external;
function EstUnePartieAvecJoueurNoirJaponais(nroReferencePartie : SInt32) : boolean;     external;
function GetNomJaponaisDuJoueurNoirParNroRefPartie(nroReference : SInt32) : String255;     external;
function GetNomJoueurNoirParNroRefPartie(nroReference : SInt32) : String255;     external;
	function LeftOfString (var s : String255; len : SInt16) : String255;     external;
function EstUnePartieAvecJoueurBlancJaponais(nroReferencePartie : SInt32) : boolean;     external;
function GetNomJaponaisDuJoueurBlancParNroRefPartie(nroReference : SInt32) : String255;     external;
function GetNomJoueurBlancParNroRefPartie(nroReference : SInt32) : String255;     external;
function CoupEnString(coup : SInt16; enMajuscules : boolean) : String255;     external;
	procedure HiliteRect(unRect : rect);     external;
procedure SetRGBColor (var theColor: RGBColor; redValue, greenValue, blueValue: SInt32);     external;
function MyGetRegionRect(theRegion : RgnHandle) : rect;     external;
function GetWindowVisibleRegion(theWindow : WindowRef; visible : RgnHandle) : RgnHandle;     external;
procedure DessineBoiteDeTaille(whichWindow : WindowPtr);     external;
procedure CheckEventPendantCalculsBase;     external;
procedure ValidRect(r : rect);     external;
function QDGetPortBound : rect;     external;
function GetScreenBounds : rect;     external;
procedure NoUpdateWindowListe;     external;
procedure SelectWindowSousPalette(whichWindow : WindowPtr);     external;
function NbPionsDeCetteCouleurApresCeCoup(var game : PackedThorGame; couleur,numeroCoup : SInt16; var typeErreur : SInt32) : SInt16;     external;
procedure TraiteInterversionFormatThorCompile(var whichGame : PackedThorGame);     external;
function PositionEtTraitAfterMoveNumberAlpha(game : String255; numeroCoup : SInt32; var typeErreur : SInt32) : PositionEtTraitRec;     external;
function EstLaPositionCourante(var position : PositionEtTraitRec) : boolean;     external;
function PartieNormalisee(var autreCoupQuatreDiag : boolean; interversions : boolean) : String255;     external;
procedure TraductionAlphanumeriqueEnThor(const s : String255; var result : PackedThorGame);     external;
procedure PrecompileInterversions(var whichGame : PackedThorGame; longueur : SInt16);     external;
procedure WRITELN_PACKED_GAME_DANS_RAPPORT(message : String255; whichGame : PackedThorGame);     external;
procedure AjouterInterversionAlaVolee(InterVarianteAlaVolee,InterCanonAlaVolee : PackedThorGame; longueur : SInt16; whichNode : GameTree);     external;
function GetPartieTableStockageParties(nroReference : SInt32) : PackedThorGame;     external;
function GetCurrentNode : GameTree;     external;
procedure AjusteSleep;     external;
procedure EcritStatistiques(withCheckEvent : boolean);     external;
procedure ConstruitStatistiques(withCheckEvent : boolean);     external;
procedure FixeMarqueSurMenuBase;     external;
procedure TachesUsuellesPourGameOver;     external;
procedure MyParamText( const (*var*) param0: String255; const (*var*) param1: String255; const (*var*) param2: String255; const (*var*) param3: String255 );     external;
function CautionAlertTwoButtonsFromRessource(dialogID, texteItemID, explicationItemID, buttonOneID, buttonTwoID : SInt16) : SInt16;     external;
procedure WriteStringDansRapport(s : String255);     external;
function AQuiDeJouer : SInt32;     external;
procedure GetScoresTheoriqueEtReelParNroRefPartie(nroReference : SInt32; var theorique,reel : SInt16);     external;
procedure AnnulerSousCriteresRuban;     external;
procedure MyDisposeControlActionUPP(var userUPP : ControlActionUPP);     external;
function AppuieBoutonPicture(window : WindowRef; boutonNormalPictID,boutonEnfoncePictID : SInt32; boutonRect : rect; mouseLoc : Point) : boolean;     external;
procedure CalculTableCriteres;     external;
function AppuieBouton(boutonRect : rect; rayonCoin : SInt16; mouseLoc : Point; drawDownState,drawUpState : BoutonDrawingProc) : boolean;     external;
procedure MyInvertRoundRect(theRect : rect; radius : SInt32);     external;
procedure DoTrierListe(critereDeTri,algorithmeDeTri : SInt32);     external;
procedure DoSwaperLesSousCriteres;     external;
procedure DoChangeSousSelectionActive;     external;
	function NewMenuFlottant(whichID : SInt32; whichrect : Rect; whichItem : SInt16) : MenuFlottantRec;     external;
	procedure InstalleMenuFlottant(var whichMenuFlottant : MenuFlottantRec; whichWindow : WindowPtr);     external;
	function EventPopUpItemMenuFlottant(var whichMenuFlottant : MenuFlottantRec; drawChoice, checkChoiceBefore,checkChoiceAfter : Boolean) : boolean;     external;
function SauvegardeListeCouranteAuNouveauFormat(filtreDesParties : FiltreNumRefProc) : OSErr;     external;
function FiltrePartieEstActiveEtSelectionnee(numeroDansLaListe,numeroReference : SInt32; var result : SInt32) : boolean;     external;
procedure AlerteSimple(texte : String255);     external;
function SauvegardeListeCouranteEnTHOR_PAR : OSErr;     external;
procedure DoExporterListeDePartiesEnTexte;     external;
procedure ExportListeAuFormatHTML;     external;
procedure ExportListeAuFormatPGN;     external;
procedure ExportListeAuFormatXOF;     external;
	procedure DesinstalleMenuFlottant(var whichMenuFlottant : MenuFlottantRec);     external;
function MyGetRootControl(theWindow : WindowRef) : ControlRef;     external;
procedure OuvrePartieSelectionnee(nroHilite : SInt32);     external;
procedure DialogueSaisieNomsJoueursPartie(revenirACeNumeroDeCoup : SInt32);     external;
function GetWindowStructRect(theWindow : WindowRef) : rect;     external;
procedure SetPositionsTextesWindowPlateau;     external;
