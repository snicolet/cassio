	function Min (a, b: SInt32) : SInt32;     external;
	function Max (a, b: SInt32) : SInt32;     external;
	procedure AttendFrappeClavier;     external;
procedure WritelnDansRapport(s : String255);     external;
procedure WriteDansRapport(s : String255);     external;
procedure WritelnNumDansRapport(s : String255; num : SInt32);     external;
procedure WriteNumDansRapport(s : String255; num : SInt32);     external;
procedure WritelnStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WritelnDansRapportThreadSafe(s : String255);     external;
procedure InvalidateAnalyseDeFinale;     external;
procedure SetDelaiDeRetournementDesPions(nouveauDelai : SInt32);     external;
procedure SetDateEnTickDuCoupNumero(numero,date : SInt32);     external;
function GetCouleurOfSquareDansJeuCourant(whichSquare : SInt32) : SInt32;     external;
procedure GetCurrentScript(var currentScript : SInt32);     external;
procedure DisableKeyboardScriptSwitch;     external;
procedure FinRapport;     external;
procedure ChangeFontSizeDansRapport(whichSize : SInt16);     external;
procedure ChangeFontDansRapport(whichFont : SInt16);     external;
procedure ChangeFontColorDansRapport(whichColor : SInt16);     external;
procedure ChangeFontFaceDansRapport(whichStyle : StyleParameter);     external;
procedure EnableKeyboardScriptSwitch;     external;
procedure SetCurrentScript(whichScript : SInt32);     external;
procedure SwitchToRomanScript;     external;
procedure TextNormalDansRapport;     external;
function CassioEstEnModeSolitaire : boolean;     external;
procedure EffaceDernierCaractereDuRapport;     external;
	function ParamStr(s, p0, p1, p2, p3 : String255) : String255;     external;
	function ReadStringFromRessource(stringListID, index : SInt16) : String255;     external;
  function NumEnString(num : SInt32) : String255;     external;
procedure EffacePromptFenetreReflexion;     external;
procedure DetruitMeilleureSuite;     external;
procedure EngineNewPosition;     external;
procedure EcritCommentaireSolitaire;     external;
procedure MetScorePrevuParFinaleDansCourbe(nroCoupDeb,nroCoupFin : SInt32; origine : typeGenreDeReflexion; scorePourNoir : SInt32);     external;
procedure MetTitreFenetrePlateau;     external;
procedure EssaieAfficherFelicitation;     external;
function MakeValeurOthelloProperty(whichType : SInt16; whichColor,whichSign : SInt16; whichIntegerValue,centiemes : SInt16) : Property;     external;
procedure AddScorePropertyToCurrentNodeSansDuplication(prop : Property);     external;
function GetCurrentNode : GameTree;     external;
procedure AddScorePropertyToGameTreeSansDuplication(prop : Property; var G : GameTree);     external;
procedure DisposePropertyStuff(var p : Property);     external;
procedure EcritCurrentNodeDansFenetreArbreDeJeu(avecEcritureDesFils, doitEffacerPremiereLigneDeLaFenetre : boolean);     external;
function CurrentNodeHasCommentaire : boolean;     external;
function ConstruireChaineReferencesPartieDapresListe(nroPartie : SInt32; descriptionComplete : boolean) : String255;     external;
procedure SetCommentaireCurrentNodeFromString(s : String255);     external;
procedure EcritCommentairesOfCurrentNode;     external;
procedure InvalidateAnalyseDeFinaleSiNecessaire(mode : InvalidateMode);     external;
function CassioEstEnModeAnalyse : boolean;     external;
  function RandomEntreBornes(a, b : SInt16) : SInt16;     external;
   procedure PlaySoundSynchrone(soundID, volume : SInt16);     external;
function AQuiDeJouer : SInt32;     external;
procedure DialogueVousPassez;     external;
procedure BeginFonctionModifiantNbreCoup(fonctionAppelante : String255);     external;
procedure SetCassioMustCheckDangerousEvents(newvalue : boolean; oldValue : BooleanPtr);     external;
function EstLaPositionCourante(var position : PositionEtTraitRec) : boolean;     external;
function PositionEtTraitCourant : PositionEtTraitRec;     external;
procedure WritelnPositionEtTraitDansRapport(const position : plateauOthello; trait : SInt32);     external;
function GetTraitOfPosition(var position : PositionEtTraitRec) : SInt32;     external;
function PeutJouerIci(couleur,a : SInt32; const plat : plateauOthello) : boolean;     external;
function JeuCourant : plateauOthello;     external;
procedure OuvreFntrPlateau(avecAnimationZoom : boolean);     external;
procedure SetPortByWindow(window : WindowPtr);     external;
procedure TemporisationSolitaire;     external;
function EnVieille3D : boolean;     external;
procedure PlayPosePionSound;     external;
procedure RetirerZebraBookOption(mask : SInt32);     external;
procedure EffaceAideDebutant(avecDessinAutresInfosSurLesCases,effacageLarge : boolean; surQuellesCases : SquareSet; fonctionAppelante : String255);     external;
function GetAvecAffichageNotesSurCases(origine : SInt32) : boolean;     external;
function CoupsLegauxEnSquareSet : SquareSet;     external;
procedure EffaceProprietesOfCurrentNode;     external;
  function InRange(n, minimum, maximum : SInt32) : boolean;     external;
procedure EffaceNumeroCoup(square,n : SInt16; whichNode : GameTree);     external;
procedure DessinePion(square,valeurPion : SInt16);     external;
function ChangeCurrentNodeAfterNewMove(square,couleur : SInt16; const fonctionAppelante : String255) : OSErr;     external;
function LiveUndoEnCours : boolean;     external;
procedure MarquerCurrentNodeCommeReel(const fonctionAppelante : String255);     external;
procedure DessineNumeroCoup(square,n,couleurDesChiffres : SInt16; whichNode : GameTree);     external;
procedure InvalidateNombrePartiesActivesDansLeCache(quelNroCoup : SInt16);     external;
procedure SetNiemeCoup(numeroDuCoup : SInt32; square : SInt32);     external;
procedure SetPremierCoupParDefaut(coup : SInt32);     external;
procedure PlayRetournementDePionSound;     external;
procedure TemporisationRetournementDesPions;     external;
function ModifPlat(a,coul : SInt32; var jeu : plateauOthello; var jouable : plBool; var nbbl,nbno : SInt32; var front : InfoFront) : boolean;     external;
function UpdateJeuCourant(whichMove : SInt32) : boolean;     external;
procedure Dessine3D(const position : plateauOthello; avecBruitage : boolean);     external;
procedure CoupJoueDansRapport(numeroCoup,coup : SInt32);     external;
procedure EcritLesInfosDApprentissage;     external;
procedure AfficheScore;     external;
function EnModeEntreeTranscript : boolean;     external;
procedure FlushWindow(theWindow : WindowRef);     external;
procedure SetTranscriptChercheDesCorrections(newFlag : boolean; var oldFlag : boolean);     external;
procedure EntrerPartieDansCurrentTranscript(jusqueQuelCoup : SInt16);     external;
procedure CarteMove(coul : SInt32; const plat : plateauOthello; var carte : plBool; var mobilite : SInt32);     external;
procedure InvalidateEvaluationPourCourbe(nroCoupMin,nroCoupMax : SInt32);     external;
function PeutCopierEndgameScoreFromGameTreeDansCourbe(G : GameTree; nroDuCoup : SInt32; origineCherchees : SetOfGenreDeReflexion) : boolean;     external;
procedure EssaieMettreEvaluationDeMilieuDansCourbe(square,couleur,numeroDuCoup : SInt32; const position : plateauOthello; nbreBlancs,nbreNoirs : SInt32; var jouables : plBool; var frontiere : InfoFront);     external;
procedure SetNbrePionsPerduParVariation(numeroDuCoup,deltaScore : SInt32);     external;
procedure TraceSegmentCourbe(numeroDuCoup : SInt32; coloration : typeColorationCourbe; fonctionAppelante : String255);     external;
procedure DessineSliderFenetreCourbe;     external;
procedure AddRandomDeltaStoneToCurrentNode;     external;
procedure GenereInfosIOSDansPressePapier(numeroDuCoup,couleur,coup : SInt32; tickPourCalculTemps : SInt32);     external;
procedure LanceDemandeAffichageZebraBook(const fonctionAppelante : String255);     external;
procedure AfficheProprietesOfCurrentNode(dessinerAideDebutantSiNecessaire : boolean; surQuellesCases : SquareSet; const fonctionAppelante : String255);     external;
function DoitAfficherBibliotheque : boolean;     external;
procedure EcritCoupsBibliotheque(surQuellesCases : SquareSet);     external;
procedure EndFonctionModifiantNbreCoup(fonctionAppelante : String255);     external;
function GetNiemeCoupPartieCourante(numeroDuCoup : SInt32) : SInt32;     external;
procedure FILL_PACKED_GAME_WITH_ZEROS(var game : PackedThorGame);     external;
procedure Superviseur(n : SInt16);     external;
	procedure RandomizeTimer;     external;
function PositionEtTraitInitiauxStandard : PositionEtTraitRec;     external;
function CoupAleatoire(coul : SInt32; var plat : plateauOthello; var casesInterdites : SquareSet) : SInt32;     external;
procedure ADD_MOVE_TO_PACKED_GAME(var whichGame : PackedThorGame; whichSquare : UInt8);     external;
function UpdatePositionEtTrait(var positionEtTrait : PositionEtTraitRec; whichMove : SInt32) : boolean;     external;
procedure CarteFrontiere(const plat : plateauOthello; var front : InfoFront);     external;
function NbPionsDeCetteCouleurDansPosition(couleur : SInt32; var position : plateauOthello) : SInt32;     external;
function GetCurrentInterruption : SInt16;     external;
procedure EnleveCetteInterruption(typeInterruption : SInt16);     external;
function AB_simple(var pl : plateauOthello; var joua : plBool; var bstBef : SInt32; coul,prof,alpha,beta,nBla,nNoi : SInt32; var fr : InfoFront; canDoProbCut : boolean) : SInt32;     external;
procedure LanceInterruption(typeInterruption : SInt16; const fonctionAppelante : String255);     external;
function Evaluation(var position : plateauOthello; coulEvaluation,nbBlancs,nbNoirs : SInt32; var jouable : plBool; var front : InfoFront; afraidOfWipeOut : boolean; alpha,beta : SInt32; var nbEvaluationsRecursives : SInt32) : SInt32;     external;
procedure EssaieSetPortWindowPlateau;     external;
  procedure WriteNumAt(s : String255; num : SInt32; h,v : SInt32);     external;
procedure TraductionThorEnAlphanumerique(const s : PackedThorGame; var result : String255);     external;
procedure Normalisation(var partie120 : String255; var autreCoupQuatreDiag : boolean; interversions : boolean);     external;
procedure TraductionAlphanumeriqueEnThor(const s : String255; var result : PackedThorGame);     external;
function MemberOfStringSet(const theString : String255; var data : SInt64; S : StringSet) : boolean;     external;
procedure AddStringToSet(const theString : String255; data : SInt32; var S : StringSet);     external;
function CoupAleatoireDonnantPeuDeMobilite(coul : SInt32; var plat : plateauOthello; var casesInterdites : SquareSet) : SInt32;     external;
function CoupAleatoireDonnantPleinDeMobilite(coul : SInt32; var plat : plateauOthello; var casesInterdites : SquareSet) : SInt32;     external;
procedure EcritJeReflechis(coulChoix : SInt16);     external;
procedure SetPotentielsOptimums(position : PositionEtTraitRec);     external;
function ChoixDeVincenz(positionEtTrait : PositionEtTraitRec; degreMinimisation : SInt16; doitChercherDefense : boolean) : VincenzMoveRec;     external;
procedure Calcul_position_centre(plat : plateauOthello);     external;
function EvaluationMaximisation(var position : plateauOthello; coulEvaluation,nbBlancs,nbNoirs : SInt32) : SInt32;     external;
function estUneCaseX(a : SInt32) : boolean;     external;
function EvaluationDesBords(var position : plateauOthello; coulEvaluation : SInt32; var front : InfoFront) : SInt32;     external;
	function MyTrunc(x : double) : SInt32;     external;
function EffectueMoveEtCalculePotentielVincenz(var whichPos : PositionEtTraitRec; whichSquare,degreMinimisation : SInt16) : double;     external;
function MakePositionEtTrait(var plat : plateauOthello; trait : SInt32) : PositionEtTraitRec;     external;
procedure WritelnPositionDansRapport(var position : plateauOthello);     external;
function CoupEnStringEnMajuscules(coup : SInt16) : String255;     external;
function ListeChaineeDesCasesVidesEstDisponible : boolean;     external;
function PeutFaireFinaleBitboardCettePosition(var plat : plateauOthello; couleur,alphaMilieu,betaMilieu,nbNoirs,nbBlancs : SInt32; var note : SInt32) : boolean;     external;
procedure CarteMoveTore(coul : SInt32; const plat : plateauOthello; var carte : plBool; var mobilite : SInt32);     external;
function ModifPlatTore(a,coul : SInt32; var jeu : plateauOthello; var nbbl,nbno : SInt32) : boolean;     external;
function EvaluationTore({var plat : plateauOthello;}coul,nbBlc,nbNr : SInt32) : SInt32;     external;
procedure AlerteSimple(texte : String255);     external;
procedure LanceChrono;     external;
function TempsPourCeCoup(n,couleur : SInt16) : SInt32;     external;
procedure ReinitilaliseInfosAffichageReflexion;     external;
procedure EffaceReflexion(effacerAussiLeRuban : boolean);     external;
function CalculePhasePartie(numeroCoup : SInt16) : SInt16;     external;
procedure Initialise_table_heuristique(jeu : plateauOthello; debug : boolean);     external;
procedure CoupAuHazard(CouleurChoix : SInt32; jeu : plateauOthello; empl : plBool; var ChoixX,valeur : SInt32);     external;
function HasGotEvent(myEventMask : EventMask; var whichEvent : eventRecord; sleep : UInt32; mouseRgn : RgnHandle) : boolean;     external;
procedure TraiteEvenements;     external;
procedure TraiteNullEvent(var whichEvent : eventRecord);     external;
function EstUnSolitaire(var meilleurX,bstdef : SInt32; couleur,MFprof,nbBl,nbNo : SInt32; const jeu : plateauOthello; var empl : plBool; var frontiere : InfoFront; var score,nbreMeilleurs : SInt32; pourVraimentJouer : boolean; var causeRejet : SInt32; traitement,scoreaatteindre : SInt32) : boolean;     external;
procedure ViderSearchResults(var results : MakeEndgameSearchResultRec);     external;
function MakeEndgameSearch(var paramMakeEndgameSearch : MakeEndgameSearchParamRec ) : boolean;     external;
procedure Calcule_Valeurs_Tactiques(plat : plateauOthello; avecCalculCentre : boolean);     external;
function CalculeMeilleurCoupMilieuDePartie(const jeu : plateauOthello; var emplBool : plBool; var frontiere : InfoFront; couleur,profondeur,nbBlancs,nbNoirs : SInt32) : MoveRecord;     external;
procedure TraiteInterruptionBrutale(var coup,reponse : SInt32; fonctionAppelante : String255);     external;
procedure DerniereHeure(couleur : SInt32);     external;
procedure PartagerLeTempsMachineAvecLesAutresProcess(WNESleep : SInt32);     external;
procedure WriteStringDansRapport(s : String255);     external;
procedure WritelnStringDansRapport(s : String255);     external;
procedure EcritMeilleureSuiteParOptimalite;     external;
function NewPropertyList : PropertyList;     external;
function PeutCalculerFinaleParfaiteParArbreDeJeuCourant(var listeDesCoups : PropertyList; var valeurCouranteMin,valeurCouranteMax : SInt32) : boolean;     external;
function GetOthelloSquareOfProperty(prop : Property) : SInt16;     external;
procedure WritelnStringAndCoupDansRapport(s : String255; square : SInt16);     external;
procedure EcritMeilleureSuiteParArbreDeJeu(suiteParfaite : PropertyList);     external;
procedure DisposePropertyList(var L : PropertyList);     external;
function CoupEnString(coup : SInt16; enMajuscules : boolean) : String255;     external;
function PeutChoisirDansGrapheApprentissage(var coup,defense : SInt32) : boolean;     external;
  function PChancesSurN(P,N : SInt32) : boolean;     external;
function PeutChoisirEnBibl(var whichSquare,defense : SInt32; refuseQuelquesFois : boolean; var nbReponsesEnBibliotheque : SInt32) : boolean;     external;
function UnJoueurVientDePasser : boolean;     external;
procedure TemporisationArnaqueFinale;     external;
procedure SetInverserLesCouleursDuCurseur(flag : boolean);     external;
procedure AjusteCurseur;     external;
procedure EssayeAfficherMeilleureSuiteParArbreDeJeu;     external;
procedure VideMeilleureSuiteInfos;     external;
procedure AnnonceScoreFinalDansRapport;     external;
procedure EssayerEnvoyerPositionCouranteAuZooPourLeTester;     external;
procedure LanceCalculsRapidesPourBaseOuNouvelleDemande(infosDejaCalculees,withCheckEvent : boolean);     external;
procedure AfficheDemandeCoup;     external;
procedure GererInterversionDeCeNoeud(G : GameTree; var position : PositionEtTraitRec);     external;
function EstTurbulent(const pl : plateauOthello; couleur,nbBlancs,nbNoirs : SInt32; var front : InfoFront; var caseCritiqueTurbulence : SInt32) : boolean;     external;
  procedure WriteStringAt(s : String255; h,v : SInt32);     external;
function PasDeBordDeCinqAttaque(couleur : SInt32; var front : InfoFront; const plat : plateauOthello) : boolean;     external;
function nbBordDeCinqTransformablesPourBlanc(const plat : plateauOthello; var front : InfoFront) : SInt32;     external;
function TrousDeTroisNoirsHorribles(const plat : plateauOthello) : SInt32;     external;
function TrousDeTroisBlancsHorribles(const plat : plateauOthello) : SInt32;     external;
function LibertesNoiresSurCasesA(const plat : plateauOthello; var front : InfoFront) : SInt32;     external;
function LibertesBlanchesSurCasesA(const plat : plateauOthello; var front : InfoFront) : SInt32;     external;
function ArnaqueSurBordDeCinqNoir(const pl : plateauOthello; var front : InfoFront) : SInt32;     external;
function ArnaqueSurBordDeCinqBlanc(const pl : plateauOthello; var front : InfoFront) : SInt32;     external;
procedure Writeln13SquareCornerAndStringDansRapport(pattern : SInt32; s : String255);     external;
procedure CalculeIndexesEdges2X(var plat : plateauOthello; var frontiere : InfoFront; var edge2XNord,Edge2XSud,Edge2XOuest,Edge2XEst : SInt32);     external;
procedure WritelnEdge2XAndStringDansRapport(pattern : SInt32; s : String255);     external;
procedure WritelnLinePatternAndStringDansRapport(pattern,length : SInt32; s : String255);     external;
procedure EcritTypeInterruptionDansRapport(uneinterruption : SInt16);     external;
procedure EnableItemPourCassio(whichMenu : MenuRef; whichItem : SInt16);     external;
procedure ActiverSuggestionDeCassio(whichPos : PositionEtTraitRec; bestMove,bestDef : SInt32; fonctionAppelante : String255);     external;
function DateOfLastKeyboardOperation : SInt32;     external;
function NoDelayAfterKeyboardOperation : boolean;     external;
function DoitTemporiserPourRetournerLesPions : boolean;     external;
function GetDelaiDeRetournementDesPions : SInt32;     external;
function GetDateEnTickDuCoupNumero(numero : SInt32) : SInt32;     external;
function ProfondeurMilieuEstImposee : boolean;     external;
procedure SetProfImposee(flag : boolean; const fonctionAppelante : String255);     external;
function CassioEstEn3D : boolean;     external;
procedure DessinePion3D(x,coul : SInt16);     external;
procedure DessinePion2D(square,valeurPion : SInt16);     external;
procedure DessineAutresInfosSurCasesAideDebutant(surQuellesCases : SquareSet; fonctionAppelante : String255);     external;
procedure AnnonceSupposeSuitConseilMac(numeroCoup,conseil : SInt16);     external;
function DoitPasser(coul : SInt32; const plat : plateauOthello; var jouable : plBool) : boolean;     external;
function PhasePartieDerniereReflexion : SInt32;     external;
procedure DessinePosition(const position : plateauOthello);     external;
function AttenteAnalyseDeFinaleDansPositionCourante : boolean;     external;
procedure LanceInterruptionConditionnelle(typeInterruption : SInt16; const message : String255; value : SInt32; const fonctionAppelante : String255);     external;
function GetBestMoveAttenteAnalyseDeFinale : SInt32;     external;
function GetPositionDansFntreReflexion(var reflexionInfos : ReflexRec) : PositionEtTraitRec;     external;
function GetCoupEnTeteDansFenetreReflexion : SInt32;     external;
procedure SetCassioChecksEvents(flag : boolean);     external;
procedure LanceInterruptionSimpleConditionnelle(const fonctionAppelante : String255);     external;
procedure LanceInterruptionSimple(const fonctionAppelante : String255);     external;
function PeutArreterAnalyseRetrograde : boolean;     external;
function CassioEstEnTrainDeCalculerPourLeZoo : boolean;     external;
procedure GetConfigurationCouranteDeCassio(var config : ConfigurationCassioRec);     external;
function TypeDeCalculLanceParCassioDansCetteConfiguration(var config : ConfigurationCassioRec) : SInt32;     external;
procedure GetNumerosPremiereEtDernierePartiesAffichees(var premierNumero,derniernumero : SInt32);     external;
procedure ExtraitPartieTableStockageParties(nroReference : SInt32; var partieStr : PackedThorGame);     external;
function PACKED_GAME_IS_A_DIAGONAL(const whichGame : PackedThorGame) : boolean;     external;
procedure COPY_PACKED_GAME_TO_STR60(const game : PackedThorGame; var result60 : String255);     external;
procedure ExtraitPremierCoup(var premierCoup : SInt16; var autreCoupQuatreDiag : boolean);     external;
procedure TransposePartiePourOrientation(var partie60 : PackedThorGame; autreCoupQuatreDiagonal : boolean; minCoupTranspose,maxCoupTranspose : SInt32);     external;
function PositionsSontEgales(const pos1,pos2 : plateauOthello) : boolean;     external;
function CalculePositionApres(numero : SInt16; partie60 : PackedThorGame) : plateauOthello;     external;
procedure ExtraitCoupTableStockagePartie(nroReference, nroCoup : SInt32; var coup : SInt32);     external;
procedure TransposeCoupPourOrientation(var whichSquare : SInt16; autreCoupQuatreDiagonal : boolean);     external;
function StatistiquesCalculsFaitsAuMoinsUneFois : boolean;     external;
procedure SetSuggestionDeFinaleEstDessinee(flag : boolean);     external;
procedure CompacterPartieAlphanumerique(var s : String255; modification : SInt16);     external;
function GetUsingZebraBook : boolean;     external;
procedure SetUsingZebraBook(flag : boolean);     external;
procedure GetPositionInitialeOfGameTree(var position : plateauOthello; var numeroPremierCoup,trait,nbBlancs,nbNoirs : SInt32);     external;
procedure SetCurrentNodeToGameRoot;     external;
function GetCouleurNiemeCoupPartieCourante(numeroDuCoup : SInt32) : SInt32;     external;
procedure InitialiseDirectionsJouables;     external;
procedure SetTranscriptAccepteLesDonnees(newFlag : boolean; var oldFlag : boolean);     external;
function PositionDansStringAlphaEnCoup(const s : String255; positionDansChaine : SInt16) : SInt16;     external;
procedure DoChangeCurrentNodeBackwardUntil(G : GameTree);     external;
procedure DessineCourbe(coloration : typeColorationCourbe; fonctionAppelante : String255);     external;
function NumberOfRealSons(G : GameTree) : SInt16;     external;
function CoupsOfMainLineInGameTreeEnString(G : GameTree) : String255;     external;
function GetOlderSon(G : GameTree) : GameTree;     external;
function CoupsDuCheminJusquauNoeudEnString(G : GameTree) : String255;     external;
function CalculeLeTraitApresTelCoup(n : SInt16; s : String255; platDebut : plateauOthello; traitDebut : SInt16) : SInt16;     external;
procedure EcritPositionAt(var plat : plateauOthello; hpos,vpos : SInt16);     external;
procedure SetEffacageProprietesOfCurrentNode(flags : UInt32);     external;
procedure SetAffichageProprietesOfCurrentNode(flags : UInt32);     external;
procedure BeginUseZebraNodes(fonctionAppelante : String255);     external;
procedure SetCoupEntete(square : SInt16);     external;
procedure DetermineMomentFinDePartie;     external;
procedure ViderValeursDeLaCourbe;     external;
procedure MemoryFillChar(bufferPtr : universal UnivPtr; byteCount: SInt32; caractere : char);     external;
procedure EssaieDisableForceCmd;     external;
procedure PreouvrirGraphesUsuels;     external;
procedure EffacerTouteLaCourbe(fonctionAppelante : String255);     external;
procedure DessinePlateau(avecDessinFondNoir : boolean);     external;
procedure SetPositionInitialeStandardDansJeuCourant;     external;
procedure PosePion(x,couleur : SInt16);     external;
procedure SetPositionInitialeStandardDansGameTree;     external;
procedure AddInfosStandardsFormatSGFDansArbre;     external;
procedure AjouteDescriptionPositionEtTraitACeNoeud(description : PositionEtTraitRec; G : GameTree);     external;
function GetRacineDeLaPartie : GameTree;     external;
procedure SetPositionInitialeOfGameTree(position : plateauOthello; trait,nbBlancs,nbNoirs : SInt16);     external;
procedure AjusteCadenceMin(cadence : SInt32);     external;
function GetCadence : SInt32;     external;
procedure DessineBoiteDeTaille(whichWindow : WindowPtr);     external;
procedure Heure(couleur : SInt16);     external;
function EstEnTrainDeRejouerUneInterversion : boolean;     external;
function LongueurInterversionEnTrainDEtreRejouee : SInt32;     external;
procedure FermerGraphesUsuels;     external;
procedure EndUseZebraNodes(fonctionAppelante : String255);     external;
function ModifPlatSeulement(a : SInt32; var jeu : plateauOthello; coul : SInt32) : boolean;     external;
function DoitPasserPlatSeulement(couleur : SInt32; var plat : plateauOthello) : boolean;     external;
procedure SetCurrentNode(G : GameTree; const fonctionAppelante : String255);     external;
function DeleteSonsOfThatColorInCurrentNode(couleur : SInt16) : SInt16;     external;
function CassioDoitReflechirSurLeTempsAdverse : boolean;     external;
function CassioDoitReflechirSurLeTempsAdverseDansConfigurationCourante : boolean;     external;
procedure ViderNotesSurCases(origine : SInt32; effacer : boolean; surQuellesCases : SquareSet);     external;
procedure InvalidateDessinEnTraceDeRayon(square : SInt16);     external;
function DerniereCaseJouee : SInt32;     external;
procedure ReInitialisePartieHdlPourNouvellePartie(DetruitArbreDeJeu : boolean);     external;
procedure SetMeilleureSuite(s : String255);     external;
procedure MyDisableItem(theMenu : MenuRef; item: MenuItemIndex);     external;
procedure FixeMarqueSurMenuMode(n : SInt16);     external;
procedure CarteJouable(const plat : plateauOthello; var carte : plBool);     external;
procedure SetJeuCourant(jeu : plateauOthello; trait : SInt32);     external;
procedure EffaceMeilleureSuite;     external;
function EstLaPositionStandardDeDepart(const plat : plateauOthello) : boolean;     external;
procedure LireBibliothequeDeZebraPourCurrentNode(const fonctionAppelante : String255);     external;
procedure EcranStandard(clipRegion : RgnHandle; forcedErase : boolean);     external;
procedure NoUpdateWindowPlateau;     external;
procedure RefletePositionCouranteDansPictureIconisation;     external;
function EstLaPositionInitialeDeLaPartieEnCours(var whichPos : PositionEtTraitRec) : boolean;     external;
function NbCasesVidesDansPosition(var position : plateauOthello) : SInt32;     external;
procedure PlaquerPositionEtPartieLegaleDansOthellierDeGauche(position : PositionEtTraitRec; partiePlaquee : String255);     external;
procedure DoChangeAfficheDernierCoup;     external;
procedure EraseRectDansWindowPlateau(whichRect : rect);     external;
procedure DessineBordureDuPlateau2D(quellesBordures : SInt32);     external;
function GetValeurDessinEnTraceDeRayon(square : SInt16) : SInt16;     external;
	function MakePoint(h,v : SInt32) : Point;     external;
function GetBoundingRect3D(whichSquare : SInt16) : rect;     external;
function GetTailleCaseCourante : SInt32;     external;
procedure SetValeurDessinEnTraceDeRayon(square,valeur : SInt16);     external;
function GetBoutonRectParControlManager(left,top,bottom,marge : SInt16; title : String255) : rect;     external;
procedure DessineBoutonParControlManager(buttonState : ThemeDrawState; left,top,bottom,marge : SInt16; title : String255; var boutonRect : rect);     external;
function GetWindowPortRect(window : WindowPtr) : rect;     external;
	function MakeRect(left, top, right, bottom : SInt32) : Rect;     external;
procedure DessinePlateau3D(avecDessinFondNoir : boolean);     external;
procedure DessinePlateau2D(cases,tailleCase : SInt16; HG_h,HG_v : SInt16; avecDessinFondNoir : boolean);     external;
function AppuieBoutonParControlManager(titre : String255; boutonRect : rect; marge : SInt16; mouseLoc : Point) : boolean;     external;
function GetWindowVisibleRegion(theWindow : WindowRef; visible : RgnHandle) : RgnHandle;     external;
procedure DoGrowWindow(thisWindow : WindowPtr; event : eventRecord);     external;
function  PtInPlateau(loc : Point; var caseCliquee : SInt16) : boolean;     external;
  procedure ShareTimeWithOtherProcesses(quantity : SInt32);     external;
function VerificationConnexiteOK(jeu : plateauOthello) : boolean;     external;
function VerificationNbreMinimalDePions(jeu : plateauOthello; nbreMinimalDePions : SInt32) : boolean;     external;
function NoteEnString(note : SInt32; avecSignePlus : boolean; nbEspacesDevant,nbDecimales : SInt16) : String255;     external;
	procedure DrawStringPourGNUPascal(const s : String255);     external;
procedure TraiteOneEvenement;     external;
procedure InvalidateAllCasesDessinEnTraceDeRayon;     external;
procedure AjusteSleep;     external;
	procedure EmuleToucheCommandeParControleDansEvent(var myEvent : eventRecord);     external;
procedure IncrementeCompteurDeMouseEvents;     external;
procedure CheckStreamEvents;     external;
procedure EnvoyerUnKeepAliveSiNecessaire;     external;
procedure GererTelechargementWThor;     external;
procedure PrepareTexteStatePourHeure;     external;
procedure SetPositionPlateau2D(nbrecases,tailleCase : SInt16; HG_h,HG_v : SInt16; fonctionAppelante : String255);     external;
procedure SetPositionsTextesWindowPlateau;     external;
function ParsePositionEtTrait(s : String255; var positionEtTrait : PositionEtTraitRec) : boolean;     external;
function EstLaPositionInitialeStandard(var position : PositionEtTraitRec) : boolean;     external;
function AddPropertyListAsStringDansCurrentNode(propertyListDescription : String255) : boolean;     external;
procedure PrepareNouvellePartie(ForceHumCtreHum : boolean);     external;
procedure DrawContents(whichWindow : WindowPtr);     external;
function ComprendPositionEtPartieDuFichier(nomFichier : String255; positionEtpartie : String255; mergeWithCurrentTree : boolean) : OSErr;     external;




















