	function Min (a, b: SInt32) : SInt32;     external;
	function Max (a, b: SInt32) : SInt32;     external;
	procedure AttendFrappeClavier;     external;
procedure WritelnDansRapport(s : String255);     external;
procedure WriteDansRapport(s : String255);     external;
procedure WritelnNumDansRapport(s : String255; num : SInt32);     external;
procedure WriteNumDansRapport(s : String255; num : SInt32);     external;
procedure WritelnStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WritelnDansRapportThreadSafe(s : String255);     external;
function NbrePositionsDansGrapheApprentissage(var fichier : Graphe) : SInt32;     external;
procedure InitialiseCellule(var cellule : CelluleRec; numCellule : SInt32);     external;
procedure SetCouleur(couleur : SInt16; var cellule : CelluleRec);     external;
procedure SetCoup(coup : SInt16; var cellule : CelluleRec);     external;
procedure SetTrait(trait : SInt16; var cellule : CelluleRec);     external;
procedure EcritCellule(var fichier : Graphe; numCellule : SInt32; var cellule : CelluleRec);     external;
procedure LitCellule(var fichier : Graphe; numCellule : SInt32; var cellule : CelluleRec);     external;
function HasFils(var cellule : CelluleRec) : boolean;     external;
function GetFils(var cellule : CelluleRec) : SInt32;     external;
function GetFrere(var cellule : CelluleRec) : SInt32;     external;
function HasPere(var cellule : CelluleRec) : boolean;     external;
function GetPere(var cellule : CelluleRec) : SInt32;     external;
function GetMemePosition(var cellule : CelluleRec) : SInt32;     external;
function HasFrere(var cellule : CelluleRec) : boolean;     external;
procedure SetEcritToutDansRapportLog(flag : boolean);     external;
function GetNumeroCoup(var cellule : CelluleRec) : SInt16;     external;
procedure WriteStringDansRapport(s : String255);     external;
procedure SetMemePosition(theMemePosition : SInt32; var cellule : CelluleRec);     external;
procedure SetFrere(theFrere : SInt32; var cellule : CelluleRec);     external;
procedure SetFils(theFils : SInt32; var cellule : CelluleRec);     external;
procedure SetPere(thePere : SInt32; var cellule : CelluleRec);     external;
procedure COPY_PACKED_GAME_TO_STR255(const game : PackedThorGame; var result : String255);     external;
function PositionEtTraitInitiauxStandard : PositionEtTraitRec;     external;
function LongueurPartieDuGraphe(const whichGame : typePartiePourGraphe) : SInt16;     external;
function UpdatePositionEtTrait(var positionEtTrait : PositionEtTraitRec; whichMove : SInt32) : boolean;     external;
function NiemeCoupDansPartieDuGraphe(const whichGame : typePartiePourGraphe; n : SInt16) : SInt16;     external;
procedure RaiseError(message : String255);     external;
function CoupEstDansListe(var fichier : Graphe; coupCherche : SInt16; var liste : ListeDeCellules; var numCellule : SInt32) : boolean;     external;
function CouleurDuNiemeCoupDansPartieDuGraphe(const whichGame : typePartiePourGraphe; n : SInt16) : SInt16;     external;
function GetTraitOfPosition(var position : PositionEtTraitRec) : SInt32;     external;
procedure Normalisation(var partie120 : String255; var autreCoupQuatreDiag : boolean; interversions : boolean);     external;
procedure TraductionAlphanumeriqueEnThor(const s : String255; var result : PackedThorGame);     external;
procedure AfficheCelluleDansRapport(var fichier : Graphe; num : SInt32; var cellule : CelluleRec);     external;
function GetNiemeCoupDansListe(var fichier : Graphe; var L : ListeDeCellules; n : SInt16) : SInt16;     external;
function GetAfficheInfosApprentissage : boolean;     external;
procedure SetAfficheInfosApprentissage(flag : boolean);     external;
function HasGotEvent(myEventMask : EventMask; var whichEvent : eventRecord; sleep : UInt32; mouseRgn : RgnHandle) : boolean;     external;
procedure TraiteEvenements;     external;
procedure CalculeProbabilitesOptimalesDeReponse(whichGame : typePartiePourGraphe; var conseils : ListeDeProbas);     external;
	procedure RandomizeTimer;     external;
function GrapheApprentissageExiste(var nomDuGraphe : String255; var fichier : Graphe; var grapheEtaitDejaOuvert : boolean) : boolean;     external;
function PartieNormalisee(var autreCoupQuatreDiag : boolean; interversions : boolean) : String255;     external;
procedure SHORTEN_PACKED_GAME(var whichGame : PackedThorGame; whichLength : UInt8);     external;
function PartieCouranteEstUneDiagonaleAvecLeCoupQuatreEnD6 : boolean;     external;
procedure SelectionneDansListe(var fichier : Graphe; var uneListe : ListeDeCellules; typesCherches : EnsembleDeTypes; var result : ListeDeCellules);     external;
procedure UnionListes(var liste1,liste2 : ListeDeCellules; var result : ListeDeCellules);     external;
procedure TransposeCoupPourOrientation(var whichSquare : SInt16; autreCoupQuatreDiagonal : boolean);     external;
function CoupEnStringEnMajuscules(coup : SInt16) : String255;     external;
function FermeGrapheApprentissage(var fichier : Graphe) : boolean;     external;
	function TPCopy (source : String255; start, count: SInt32) : String255;     external;
procedure FILL_PACKED_GAME_WITH_ZEROS(var game : PackedThorGame);     external;
function GetCoup(var cellule : CelluleRec) : SInt16;     external;
procedure SET_LENGTH_OF_PACKED_GAME(var whichGame : PackedThorGame; whichLength : UInt8);     external;
procedure TraductionThorEnAlphanumerique(const s : PackedThorGame; var result : String255);     external;
procedure VideBufferGrapheApprentissage;     external;
procedure AjusteSleep;     external;
procedure SetValeurMinimax(var cellule : CelluleRec; val : SInt16);     external;
function GetValeurMinimax(var cellule : CelluleRec) : SInt16;     external;
procedure EssaieSetPortWindowPlateau;     external;
function EpaisseurBordureOthellier : SInt32;     external;
function GetCouleur(var cellule : CelluleRec) : SInt16;     external;
function GetTrait(var cellule : CelluleRec) : SInt16;     external;
  procedure MyEraseRect(const (*var*) r : Rect);     external;
  procedure MyEraseRectWithColor(const (*var*) r : Rect; couleurCmd : SInt32; whichPattern : pattern; fonctionAppelante : String255);     external;
  procedure WriteStringAt(s : String255; h,v : SInt32);     external;
function GetNiemeCoupPartieCourante(numeroDuCoup : SInt32) : SInt32;     external;
