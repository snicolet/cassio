	function Min (a, b: SInt32) : SInt32;     external;
	function Max (a, b: SInt32) : SInt32;     external;
	procedure AttendFrappeClavier;     external;
procedure WritelnDansRapport(s : String255);     external;
procedure WriteDansRapport(s : String255);     external;
procedure WritelnNumDansRapport(s : String255; num : SInt32);     external;
procedure WriteNumDansRapport(s : String255; num : SInt32);     external;
procedure WritelnStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WritelnDansRapportThreadSafe(s : String255);     external;
function FiltreClassique(dlog : DialogPtr; var evt : eventRecord; var item : SInt16) : boolean;     external;
procedure MemoryFillChar(bufferPtr : universal UnivPtr; byteCount: SInt32; caractere : char);     external;
function GetGainTheoriqueParNroRefPartie(nroReference : SInt32) : String255;     external;
function GetScoreReelParNroRefPartie(nroReference : SInt32) : SInt16;     external;
procedure ExtraitPartieTableStockageParties(nroReference : SInt32; var partieStr : PackedThorGame);     external;
procedure CalculeLesTraitsDeCettePartie(var s : PackedThorGame; var traitDansPartie : Tableau60Longint);     external;
procedure OthellierEtPionsDeDepart(var plat : plateauOthello; var nBla,nNoi : SInt32);     external;
procedure InitialiseDirectionsJouables;     external;
procedure CarteJouable(const plat : plateauOthello; var carte : plBool);     external;
procedure CarteFrontiere(const plat : plateauOthello; var front : InfoFront);     external;
function ModifPlat(a,coul : SInt32; var jeu : plateauOthello; var jouable : plBool; var nbbl,nbno : SInt32; var front : InfoFront) : boolean;     external;
procedure OthellierDeDepart(var plat : plateauOthello);     external;
function ModifPlatSeulement(a : SInt32; var jeu : plateauOthello; coul : SInt32) : boolean;     external;
	function MyTrunc(x : double) : SInt32;     external;
	function ReelEnString(unreel : double) : String255;     external;
procedure apprendBlocsDeCoinPosition(var pl : plateauOthello; gain : char);     external;
	function TPCopy (source : String255; start, count: SInt32) : String255;     external;
  function UpperCase(const s : String255; keepDiacritics : boolean) : String255;     external;
procedure DisposeStringSet(var S : StringSet);     external;
function GetNiemeJoueurTableSaisiePartie(N : SInt32) : SInt32;     external;
function GetNomJoueur(nroJoueur : SInt32) : String255;     external;
  function EnleveEspacesDeDroite(const s : String255) : String255;     external;
function MemberOfStringSet(const theString : String255; var data : SInt64; S : StringSet) : boolean;     external;
procedure AddStringToSet(const theString : String255; data : SInt32; var S : StringSet);     external;
function JoueurAUnNomJaponais(nroJoueur : SInt32) : boolean;     external;
function GetNomJaponaisDuJoueur(nroJoueur : SInt32) : String255;     external;
function GetNiemeTournoiTableSaisiePartie(N : SInt32) : SInt32;     external;
function GetNomTournoi(nroTournoi : SInt32) : String255;     external;
function SelectFirstPropertyOfTypesInGameTree(whichTypes : SetOfPropertyTypes; G : GameTree) : PropertyPtr;     external;
function GetCurrentNode : GameTree;     external;
function NomOuvertureChange(var nomOuverture : String255) : boolean;     external;
  procedure EnleveEspacesDeDroiteSurPlace(var s : String255);     external;
procedure GetCurrentScript(var currentScript : SInt32);     external;
function CoupEnString(coup : SInt16; enMajuscules : boolean) : String255;     external;
procedure DisableKeyboardScriptSwitch;     external;
procedure FinRapport;     external;
procedure TextNormalDansRapport;     external;
procedure EnableKeyboardScriptSwitch;     external;
procedure SetCurrentScript(whichScript : SInt32);     external;
procedure SwitchToRomanScript;     external;
function MakeStringProperty(whichType : SInt16; whichString : String255) : Property;     external;
procedure InsertPropInListAfter(prop : Property; var L : PropertyList; afterWhat : PropertyPtr);     external;
function SelectMovePropertyOfNode(G : GameTree) : PropertyPtr;     external;
procedure DisposePropertyStuff(var p : Property);     external;
function PartieNormalisee(var autreCoupQuatreDiag : boolean; interversions : boolean) : String255;     external;
function InterversionDansLeGrapheApprentissage(const whichGame : String255; listerInterDansRapport : boolean; tableLignes : TableParties60Ptr) : boolean;     external;
function PACKED_GAME_IS_A_DIAGONAL(const whichGame : PackedThorGame) : boolean;     external;
procedure TransposePartiePourOrientation(var partie60 : PackedThorGame; autreCoupQuatreDiagonal : boolean; minCoupTranspose,maxCoupTranspose : SInt32);     external;
procedure TraductionThorEnAlphanumerique(const s : PackedThorGame; var result : String255);     external;
procedure AddTranspositionPropertyToCurrentNode(var texte : String255);     external;
function FenetreRapportEstOuverte : boolean;     external;
procedure OuvreFntrRapport(avecAnimationZoom,forceSelectWindow : boolean);     external;
function FenetreRapportEstAuPremierPlan : boolean;     external;
procedure SelectWindowSousPalette(whichWindow : WindowPtr);     external;
function GetRapportWindow : WindowPtr;     external;
	function ReadStringFromRessource(stringListID, index : SInt16) : String255;     external;
procedure ChangeFontSizeDansRapport(whichSize : SInt16);     external;
procedure ChangeFontDansRapport(whichFont : SInt16);     external;
procedure ChangeFontFaceDansRapport(whichStyle : StyleParameter);     external;
function CautionAlertTwoButtonsFromRessource(dialogID, texteItemID, explicationItemID, buttonOneID, buttonTwoID : SInt16) : SInt16;     external;
function SelectionRapportNonVide : boolean;     external;
procedure DialogueSimple(dialogueID : SInt16{; s1,s2,s3,s4 : String255});     external;
function LongueurSelectionRapport : SInt32;     external;
procedure AlerteSimple(texte : String255);     external;
function GetRapportTextHandle : CharArrayHandle;     external;
function GetDebutSelectionRapport : SInt32;     external;
function GetFinSelectionRapport : SInt32;     external;
  procedure EnleveEspacesDeGaucheSurPlace(var s : String255);     external;
	function ParamStr(s, p0, p1, p2, p3 : String255) : String255;     external;
function AlerteDoubleOuiNon(texte,explication : String255) : SInt16;     external;
procedure CreeFichierGroupes;     external;
procedure EnlevePrenom(const nomOrigine : String255; var nomSansPrenom : String255);     external;
	function IsDigit(ch : char) : boolean;     external;
  procedure ChaineToLongint(const s : String255; var theLongint : SInt32);     external;
  function ReplaceStringOnce(const pattern,replacement,s : String255) : String255;     external;
  procedure Parser (s : String255; var tete,reste : String255);     external;
function FichierTexteDeCassioExiste(nom : String255; var fic : FichierTEXT) : OSErr;     external;
procedure ForEachLineInFileDo(whichFile : FSSpec ; DoWhat : LineOfFileProc; var result : SInt32);     external;
function AllocateMemoryPtr(whichSize : SInt32) : Ptr;     external;
procedure DisposeMemoryPtr(var whichPtr : Ptr);     external;
  function LowerCase(const s : String255; keepDiacritics : boolean) : String255;     external;
function EvenementDuDialogue(dlog : DialogPtr; var evt : eventRecord) : boolean;     external;
procedure IncrementeCompteurDeMouseEvents;     external;
procedure SetPortByDialog(dialog : DialogPtr);     external;
  procedure MyEraseRect(const (*var*) r : Rect);     external;
  procedure MyEraseRectWithColor(const (*var*) r : Rect; couleurCmd : SInt32; whichPattern : pattern; fonctionAppelante : String255);     external;
procedure Superviseur(n : SInt16);     external;
  procedure ShareTimeWithOtherProcesses(quantity : SInt32);     external;
function GetCouleurOfSquareDansJeuCourant(whichSquare : SInt32) : SInt32;     external;
	function MakeRect(left, top, right, bottom : SInt32) : Rect;     external;
  function PourcentageReelEnString(x : double) : String255;     external;
	procedure DrawStringPourGNUPascal(const s : String255);     external;
function QDGetPortBound : rect;     external;
	function StringWidthPourGNUPascal(const s : String255): SInt16;     external;
  procedure WriteNumAt(s : String255; num : SInt32; h,v : SInt32);     external;
procedure GetDialogItemRect(dp : DialogPtr; itemNumber : SInt16; var itemRect : rect);     external;
function JeuCourant : plateauOthello;     external;
function ValeurBlocsDeCoinPourNoir(var pl : plateauOthello) : SInt16;     external;
function ValeurBlocsDeCoinPourBlanc(var pl : plateauOthello) : SInt16;     external;
function SelectionRapportEnString(var count : SInt32) : String255;     external;
function ScannerStringPourTrouverCoup(debutScan : SInt16; const s : String255; var positionDuCoupDansChaine : SInt16) : SInt16;     external;
function PartiePourPressePapier(enMajuscules,avecEspaceEntreCoups : boolean; nbreCoupsAExporter : SInt16) : String255;     external;
function EstUnePartieOthello(var s : String255; compacterPartie : boolean) : boolean;     external;
procedure VideMeilleureSuiteInfos;     external;
function MakePositionEtTrait(var plat : plateauOthello; trait : SInt32) : PositionEtTraitRec;     external;
function GetTraitOfPosition(var position : PositionEtTraitRec) : SInt32;     external;
function DoitPasserPlatSeulement(couleur : SInt32; var plat : plateauOthello) : boolean;     external;
function UpdatePositionEtTrait(var positionEtTrait : PositionEtTraitRec; whichMove : SInt32) : boolean;     external;
function ModifPlatFin(a,coul : SInt32; var jeu : plateauOthello; var nbbl,nbno : SInt32) : boolean;     external;
  function InRange(n, minimum, maximum : SInt32) : boolean;     external;
function GetNiemeCoupPartieCourante(numeroDuCoup : SInt32) : SInt32;     external;
procedure WritelnStringAndCoupDansRapport(s : String255; square : SInt16);     external;
procedure SetReveillerRegulierementLeMac(flag : boolean);     external;
function MakeEmptyStringSet : StringSet;     external;
procedure MyDisposeModalFilterUPP(var userUPP : ModalFilterUPP);     external;
