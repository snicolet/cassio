	function Min (a, b: SInt32) : SInt32;     external;
	function Max (a, b: SInt32) : SInt32;     external;
	procedure AttendFrappeClavier;     external;
procedure WritelnDansRapport(s : String255);     external;
procedure WriteDansRapport(s : String255);     external;
procedure WritelnNumDansRapport(s : String255; num : SInt32);     external;
procedure WriteNumDansRapport(s : String255; num : SInt32);     external;
procedure WritelnStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WritelnDansRapportThreadSafe(s : String255);     external;
function AllocateMemoryPtr(whichSize : SInt32) : Ptr;     external;
function MakeEmptyIntegerSet : IntegerSet;     external;
function AllocatePile(tailleDemandee : SInt32; var ok : boolean) : Pile;     external;
function MakeEmptyPositionEtTraitSet : PositionEtTraitSet;     external;
procedure DisposeMemoryPtr(var whichPtr : Ptr);     external;
procedure DisposeIntegerSet(var S : IntegerSet);     external;
procedure DisposePile(var whichPile : Pile);     external;
procedure DisposePositionEtTraitSet(var S : PositionEtTraitSet);     external;
function GetCurrentNode : GameTree;     external;
procedure DetruitLesFilsZebraBookInutilesDeCeNoeud(var G : GameTree);     external;
function FichierTexteDeCassioExiste(nom : String255; var fic : FichierTEXT) : OSErr;     external;
	function GetFullPathOfFSSpec(fs : FSSpec) : String255;     external;
procedure WritelnPositionEtTraitDansRapport(const position : plateauOthello; trait : SInt32);     external;
function GetTraitOfPosition(var position : PositionEtTraitRec) : SInt32;     external;
procedure WritelnStringAndReelDansRapport(s : String255; x : double; nbDecimales : SInt16);     external;
procedure WriteStringAndCoupDansRapport(s : String255; square : SInt16);     external;
function GetNoteSurCase(origine : SInt32; whichSquare : SInt16) : SInt32;     external;
procedure SetNoteSurCase(origine : SInt32; whichSquare : SInt16; whichNote : SInt32);     external;
procedure EffaceNoteSurCases(origine : SInt32; surQuellesCases : SquareSet);     external;
function VerifieHomogeneiteDesCouleurs(G : GameTree; problemePourLesCoupsVides : boolean) : SInt16;     external;
procedure SetCurrentNode(G : GameTree; const fonctionAppelante : String255);     external;
function ChangeCurrentNodeAfterThisMove(square,couleur : SInt16; const fonctionAppelante : String255; var isNew : boolean) : OSErr;     external;
function UpdatePositionEtTrait(var positionEtTrait : PositionEtTraitRec; whichMove : SInt32) : boolean;     external;
function SamePositionEtTrait(var pos1,pos2 : PositionEtTraitRec) : boolean;     external;
function GetCouleurOfSquareDansJeuCourant(whichSquare : SInt32) : SInt32;     external;
function CoupEnStringEnMajuscules(coup : SInt16) : String255;     external;
procedure MarquerCurrentNodeCommeVirtuel;     external;
procedure AjoutePropertyValeurDeCoupDansCurrentNode(quelGenreDeReflexion,scorePourNoir : SInt32);     external;
procedure AjouterFlagsNoteSurCase(origine : SInt32; whichSquare : SInt16; whichFlags : SInt32);     external;
procedure RetirerFlagsNoteSurCase(origine : SInt32; whichSquare : SInt16; whichFlags : SInt32);     external;
procedure SetNoteMilieuSurCase(origine : SInt32; whichSquare : SInt16; whichNote : SInt32);     external;
function EvaluationHorsContexteACetteProfondeur(var whichPos : PositionEtTraitRec; prof : SInt32; var meilleurCoup : SInt32; withCheckEvents : boolean) : SInt32;     external;
procedure TrierLesFilsDeCeNoeud(G : GameTree; critereDeTri : SInt32; var changed : boolean);     external;
function GetListeTrieeDesCoupsACetteProfondeurHorsContexte(var whichPos : PositionEtTraitRec; prof : SInt32;  var liste : ListOfMoveRecords; withCheckEvents : boolean) : SInt32;     external;
function MemberOfPositionEtTraitSet(var position : PositionEtTraitRec; var data : SInt32; S : PositionEtTraitSet) : boolean;     external;
procedure AddPositionEtTraitToSet(var position : PositionEtTraitRec; data : SInt32; var S : PositionEtTraitSet);     external;
	function MyTrunc(x : double) : SInt32;     external;
function PositionEtTraitCourant : PositionEtTraitRec;     external;
function LiveUndoVaRejouerImmediatementUnAutreCoup : boolean;     external;
function CassioEstEnModeSolitaire : boolean;     external;
procedure WriteGameTreeDansRapport(var G : GameTree);     external;
function GetPositionEtTraitACeNoeud(G : GameTree; var position : PositionEtTraitRec; const fonctionAppelante : String255) : boolean;     external;
function EstLaPositionCourante(var position : PositionEtTraitRec) : boolean;     external;
function EstVisibleDansFenetreArbreDeJeu(G : GameTree) : boolean;     external;
procedure EffaceNoeudDansFenetreArbreDeJeu;     external;
procedure EcritCurrentNodeDansFenetreArbreDeJeu(avecEcritureDesFils, doitEffacerPremiereLigneDeLaFenetre : boolean);     external;
function JeuCourant : plateauOthello;     external;
	function ParamStr(s, p0, p1, p2, p3 : String255) : String255;     external;
	function ReadStringFromRessource(stringListID, index : SInt16) : String255;     external;
function CassioCanCheckForDangerousEvents : boolean;     external;
function HasGotEvent(myEventMask : EventMask; var whichEvent : eventRecord; sleep : UInt32; mouseRgn : RgnHandle) : boolean;     external;
procedure TraiteOneEvenement;     external;
procedure GererLiveUndo;     external;
procedure AccelereProchainDoSystemTask(nbTicksMax : SInt32);     external;
function AuMoinsUneNoteSurCasesEstAffichee(origine : SInt32) : boolean;     external;
function OuvreFichierTexte(var fic : FichierTEXT) : OSErr;     external;
function SetPositionTeteLectureFichierTexte(var fic : FichierTEXT; position : SInt32) : OSErr;     external;
function ReadLongintDansFichierTexte(var fic : FichierTEXT; var value : SInt32) : OSErr;     external;
function FermeFichierTexte(var fic : FichierTEXT) : OSErr;     external;
  procedure SWAP_LONGINT( arg : UInt32Ptr );     external;
procedure WritelnStringDansRapport(s : String255);     external;
function FichierTexteEstOuvert(var fic : FichierTEXT) : boolean;     external;
function ReadBufferDansFichierTexte(var fic : FichierTEXT; buffPtr : Ptr; var count : SInt32) : OSErr;     external;
  procedure SWAP_INTEGER( arg : UInt16Ptr );     external;
function MemberOfIntegerSet(theKey: SInt32; var data : SInt32; S : IntegerSet) : boolean;     external;
function NbElementsDansPile(whichPile : Pile) : SInt32;     external;
function Depiler(var whichPile : Pile; var ok : boolean) : SInt32;     external;
procedure AddIntegerToSet(theKey : SInt32; data : SInt32; var S : IntegerSet);     external;
  function RandomEntreBornes(a, b : SInt16) : SInt16;     external;
procedure RemoveIntegerFromSet(theKey : SInt32; var S : IntegerSet);     external;
procedure Empiler(var whichPile : Pile; element : SInt32; var ok : boolean);     external;
function PositionDansStringAlphaEnCoup(const s : String255; positionDansChaine : SInt16) : SInt16;     external;
