	function Min (a, b: SInt32) : SInt32;     external;
	function Max (a, b: SInt32) : SInt32;     external;
procedure WritelnDansRapport(s : String255);     external;
procedure WriteDansRapport(s : String255);     external;
procedure WritelnNumDansRapport(s : String255; num : SInt32);     external;
procedure WriteNumDansRapport(s : String255; num : SInt32);     external;
procedure WritelnStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WritelnDansRapportThreadSafe(s : String255);     external;
	procedure AttendFrappeClavier;     external;
procedure GetPositionInitialeOfGameTree(var position : plateauOthello; var numeroPremierCoup,trait,nbBlancs,nbNoirs : SInt32);     external;
function GetCouleurNiemeCoupPartieCourante(numeroDuCoup : SInt32) : SInt32;     external;
function GetNiemeCoupPartieCourante(numeroDuCoup : SInt32) : SInt32;     external;
	function TPCopy (source : String255; start, count: SInt32) : String255;     external;
function DerniereCaseJouee : SInt32;     external;
procedure SendPostscript(s : String255);     external;
	function ReelEnString(unreel : double) : String255;     external;
procedure SetLineWidthPostscript(numerateur,denominateur : SInt16);     external;
  procedure DisableQuartzAntiAliasing;     external;
  procedure EnableQuartzAntiAliasing(useQuartzMetrics : boolean);     external;
  procedure DisableQuartzAntiAliasingThisPort(port : CGrafPtr);     external;
function qdThePort : CGrafPtr;     external;
	function ReadStringFromRessource(stringListID, index : SInt16) : String255;     external;
	function ParamStr(s, p0, p1, p2, p3 : String255) : String255;     external;
	function StringWidthPourGNUPascal(const s : String255): SInt16;     external;
procedure BeginPostScript;     external;
procedure EndPostScript;     external;
function IsSameRGBColor(c1,c2 : RGBColor) : boolean;     external;
function EclaircirCouleur(theColor : RGBColor) : RGBColor;     external;
	procedure DrawStringPourGNUPascal(const s : String255);     external;
procedure DrawTranslatedString(s : String255; decX,decY : double);     external;
function InPropertyTypes(whichGenre : SInt16; whichSet : SetOfPropertyTypes) : boolean;     external;
function GetCouleurOfSquareDansJeuCourant(whichSquare : SInt32) : SInt32;     external;
function GetPackedSquareSetOfProperty(prop : Property) : PackedSquareSet;     external;
function SquareInPackedSquareSet(whichSquare : SInt16; whichSet : PackedSquareSet) : boolean;     external;
procedure DessinerUnePierreDelta(const plat : plateauOthello; quelleCase,quelGenre : SInt16; GetRectForSquare2D : CalculeRect2DFunc; const texte : String255; use3D : boolean; GetRectDessusForSquare3D : CalculeRect3DFunc; {appelée si use3D = true} GetRectDessousForSquare3D:CalculeRect3DFunc); {appelée si use3D = true} external;
function JeuCourant : plateauOthello;     external;
function GetOthelloSquareOfProperty(prop : Property) : SInt16;     external;
function GetOthelloSquareOfPropertyAlpha(prop : Property) : SInt16;     external;
procedure GetSquareCoupleOfProperty(prop : Property; var square1,square2 : SInt16);     external;
procedure DessinerUnePierreDeltaDouble(const plat : plateauOthello; quelleCase1,quelleCase2,quelGenre : SInt16; GetRectForSquare2D:CalculeRect2DFunc; use3D : boolean; GetRectDessusForSquare3D :CalculeRect3DFunc; {appelée si use3D = true} GetRectDessousForSquare3D:CalculeRect3DFunc); {appelée si use3D = true} external;
procedure ItereSurPierresDeltaCourantes(whichTypes : SetOfPropertyTypes; DoWhat : PropertyProc);     external;
function MyPutScrap(sourceBufferByteCount : SInt32; flavorType: ScrapFlavorType; sourceBuffer: UnivPtr) : OSStatus;     external;
function EstUnEnonceNumeroteDeProblemeDeCoin(const s : String255; var numero : SInt32) : boolean;     external;
procedure SetDoitNumeroterProblemesDePriseDeCoin(flag : boolean);     external;
procedure SetNumeroProblemeDePriseDeCoin(numero : SInt32);     external;
procedure SetPeutIncrementerNumerotationDiagrammeDePriseDeCoin(flag : boolean);     external;
function MyZeroScrap : OSStatus;     external;
function QDGetPortBound : rect;     external;
  procedure MyEraseRect(const (*var*) r : Rect);     external;
  procedure MyEraseRectWithColor(const (*var*) r : Rect; couleurCmd : SInt32; whichPattern : pattern; fonctionAppelante : String255);     external;
  function GetPicFrameOfPicture(thePict : PicHandle) : Rect;     external;
  function CenterRectInRect(original,bigRect : rect) : rect;     external;
  procedure EnableQuartzAntiAliasingThisPort(port : CGrafPtr; useQuartzMetrics : boolean);     external;
function EvenementDuDialogue(dlog : DialogPtr; var evt : eventRecord) : boolean;     external;
function MyFiltreClassiqueRapide(dlog : DialogPtr; var evt : eventRecord; var item : SInt16) : boolean;     external;
procedure SetItemTextInDialog(dp : DialogPtr; itemNumber : SInt16; s : String255);     external;
procedure GetItemTextInDialog(dp : DialogPtr; itemNumber : SInt16; var s : String255);     external;
procedure SetBoolCheckBox(dp : DialogPtr; itemNumber : SInt16; value : boolean);     external;
procedure GetDialogItemRect(dp : DialogPtr; itemNumber : SInt16; var itemRect : rect);     external;
procedure ValidRect(r : rect);     external;
procedure SetPortByDialog(dialog : DialogPtr);     external;
	procedure DrawPUItem(theMenu : MenuRef; item : SInt16; loc : Rect; drawMark : boolean);     external;
	procedure AjouteEspacesItemsMenu(theMenu : MenuRef; nbEspaces : SInt16);     external;
  function MyGetMenu(resourceID : SInt16) : MenuRef;     external;
	procedure TerminateMenu(var theMenu : MenuRef; provientDUneResource : boolean);     external;
	procedure MyGetMenuItemText( theMenu : MenuRef; item : MenuItemIndex; var itemString : String255 );     external;
  function EnleveEspacesDeDroite(const s : String255) : String255;     external;
function MyGetFontNum(nomPolice : String255) : SInt16;     external;
function  MyCountMenuItems(theMenu : MenuRef) : UInt16;     external;
procedure BeginDialog;     external;
procedure SwitchToScript(whichScript : SInt32);     external;
function MyGetNewDialog(dialogID : SInt16) : DialogPtr;     external;
procedure CenterTextInDialog(dp : DialogPtr; s : String255; itemNumber : SInt16);     external;
procedure MyDrawDialog(dp : DialogPtr);     external;
procedure NoUpdateThisWindow(whichWindow : WindowPtr);     external;
procedure OutlineOK(dp : DialogPtr);     external;
  function GarderSeulementLesChiffres(var s : String255) : String255;     external;
  procedure StrToInt32(const s : String255; var theLongint : SInt32);     external;
	function GarderSeulementLesChiffresOuLesPoints(var s : String255) : String255;     external;
  function EstUnReel(alpha : String255) : boolean;     external;
  function StringSimpleEnReel(alpha : String255) : double;     external;
  function ReelEnStringAvecDecimales(unreel : double; nbChiffresSignificatifs : SInt16) : String255;     external;
	function EventPopUpItemInDialog(dp : DialogPtr; menuTitleItem : SInt16; theMenu : MenuRef; var numItem : SInt16; menuRect : Rect; drawChoice, checkChoice : Boolean) : boolean;     external;
procedure MyDisposeDialog(var dlog : DialogPtr);     external;
procedure MyDisposeModalFilterUPP(var userUPP : ModalFilterUPP);     external;
procedure GetCurrentScript(var currentScript : SInt32);     external;
procedure SwitchToRomanScript;     external;
procedure EndDialog;     external;
  function ReplaceStringOnce(const s, pattern, replacement : String255) : String255;     external;
function CoupEnStringEnMajuscules(coup : SInt16) : String255;     external;
function MyTrunc(x : double) : SInt32;     external;
function MakePoint(h,v : SInt32) : Point;     external;
procedure WriteStringAndReelDansRapport(s : String255; x : double; nbDecimales : SInt16);     external;
function MakeRect(left, top, right, bottom : SInt32) : Rect;     external;
function CreeSortieStandardEnFichierTexte(var fic : basicfile) : OSErr;     external;
	procedure RandomizeTimer;     external;
  function RandomLongint : SInt32;     external;
function FileExists(nom : String255 ; vRefNum : SInt16; var fic : basicfile) : OSErr;     external;
function CreateFile(nom : String255 ; vRefNum : SInt16; var fic : basicfile) : OSErr;     external;
  function CreateDirectoryWithThisPath(directoryPath : String255) : OSErr;     external;
  procedure ReplaceCharByCharInString(var s : String255; old, new : char);     external;
function Writeln(var fic : basicfile; s : String255) : OSErr;     external;
function OpenFile(var fic : basicfile) : OSErr;     external;
function EmptyFile(var fic : basicfile) : OSErr;     external;
function CloseFile(var fic : basicfile) : OSErr;     external;
  function ConvertEncodingOfString(s : String255; oldEncoding, newEncoding : CFStringEncoding) : String255;     external;
	function LeftStr (const s : String255; len : SInt32) : String255;     external;
function LaunchUNIXProcess(command, arguments : String255) : OSErr;     external;
  function MacPathToUNIXPath( MacPath : String255 ) : String255;     external;
function DumpFileToPressePapier(fileName : String255; flavorType : ScrapFlavorType) : OSErr;     external;
  procedure MyInsertMenuItem( theMenu: MenuRef; const itemString: String255; afterItem: MenuItemIndex );     external;
procedure MyEnableItem(theMenu : MenuRef; item: MenuItemIndex);     external;
  function EnleverTousLesChiffres(var s : String255) : String255;     external;
  function EnleverLesCaracteresMajusculesEntreCesCaracteres(gauche, droite : char; var s : String255) : String255;     external;
  function StripDiacritics(const s : String255) : String255;     external;
	function Trim (s : String255) : String255;     external;
function UTF8ToAscii(const s : String255) : String255;     external;
procedure SetFileCreatorFichierTexte(var fic : basicfile; quelType : OSType);     external;
procedure SetFileTypeFichierTexte(var fic : basicfile; quelType : OSType);     external;
function CassioSansDouteLanceDepuisUneImageDisque : boolean;     external;
function GetCassioFontNum(nomPolice : String255) : SInt32;     external;
function GetStringInfoOfProperty(prop : Property) : String255;     external;
procedure SplitBy (s : String255; sub : char; var left, right: String255);     external;
function WritePrologueEPSDansFichier(var fic : FichierAbstrait; nomFichier : String255) : OSErr;     external;
function WritelnDansFichierAbstrait(var theFile : FichierAbstrait; s : String255) : OSErr;     external;
function MakeFichierAbstraitEnMemoire(taille : SInt32) : FichierAbstrait;     external;
function FichierAbstraitEstCorrect(const theFile : FichierAbstrait) : boolean;     external;
procedure DisposeFichierAbstrait(var theFile : FichierAbstrait);     external;
function Write(var fic : basicfile; ficAbstrait : FichierAbstrait; fromPos : Sint32; var count : SInt32) : OSErr;     external;
function GetPositionMarqueurFichierAbstrait(var theFile : FichierAbstrait) : SInt32;     external;
function DeleteFile(var fic : basicfile) : OSErr;     external;
procedure SetDebugFiles(flag : boolean);     external;
function TypesPierresDelta : SetOfPropertyTypes;     external;









