	function Min (a, b: SInt32) : SInt32;     external;
	function Max (a, b: SInt32) : SInt32;     external;
	procedure AttendFrappeClavier;     external;
procedure WritelnDansRapport(s : String255);     external;
procedure WriteDansRapport(s : String255);     external;
procedure WritelnNumDansRapport(s : String255; num : SInt32);     external;
procedure WriteNumDansRapport(s : String255; num : SInt32);     external;
procedure WritelnStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WritelnDansRapportThreadSafe(s : String255);     external;
procedure DisposeMemoryHdl(var whichHandle : handle);     external;
function AllocateMemoryHdl(whichSize : SInt32) : handle;     external;
  function GarderSeulementLesChiffres(var s : String255) : String255;     external;
  procedure ChaineToLongint(const s : String255; var theLongint : SInt32);     external;
function PlusProcheCouleurRGBOfTexture(var whichColor : CouleurOthellierRec; var textureInconnue : boolean) : RGBColor;     external;
function EclaircirCouleurDeCetteQuantite(theColor : RGBColor; quantite : SInt32) : RGBColor;     external;
function RGBColorEstFoncee(color : RGBColor; seuilLuminosite : SInt32) : boolean;     external;
procedure SetPortByWindow(window : WindowPtr);     external;
function NoircirCouleurDeCetteQuantite(theColor : RGBColor; quantite : SInt32) : RGBColor;     external;
  procedure MyEraseRect(const (*var*) r : Rect);     external;
  procedure DisableQuartzAntiAliasingThisPort(port : CGrafPtr);     external;
procedure MemoryFillChar(bufferPtr : universal UnivPtr; byteCount: SInt32; caractere : char);     external;
	function StringWidthPourGNUPascal(const s : String255): SInt16;     external;
	procedure DrawStringPourGNUPascal(const s : String255);     external;
  procedure EnableQuartzAntiAliasingThisPort(port : CGrafPtr; useQuartzMetrics : boolean);     external;
  procedure MyEraseRectWithColor(const (*var*) r : Rect; couleurCmd : SInt32; whichPattern : pattern; fonctionAppelante : String255);     external;
function GetNiemeCoupPartieCourante(numeroDuCoup : SInt32) : SInt32;     external;
procedure OthellierDeDepart(var plat : plateauOthello);     external;
function JeuCourant : plateauOthello;     external;
procedure FILL_PACKED_GAME_WITH_ZEROS(var game : PackedThorGame);     external;
procedure ADD_MOVE_TO_PACKED_GAME(var whichGame : PackedThorGame; whichSquare : UInt8);     external;
procedure OthellierEtPionsDeDepart(var plat : plateauOthello; var nBla,nNoi : SInt32);     external;
function ModifPlatFin(a,coul : SInt32; var jeu : plateauOthello; var nbbl,nbno : SInt32) : boolean;     external;
procedure DESTROY_LAST_MOVE_OF_PACKED_GAME(var whichGame : PackedThorGame);     external;
	procedure DrawPUItem(theMenu : MenuRef; item : SInt16; loc : Rect; drawMark : boolean);     external;
function PeutJouerIci(couleur,a : SInt32; const plat : plateauOthello) : boolean;     external;
	procedure EmuleToucheCommandeParControleDansEvent(var myEvent : eventRecord);     external;
function EvenementDuDialogue(dlog : DialogPtr; var evt : eventRecord) : boolean;     external;
function MyFiltreClassique(dlog : DialogPtr; var evt : eventRecord; var item : SInt16) : boolean;     external;
procedure FlashItem(dlog : DialogPtr; itemNumber : SInt16);     external;
procedure GetItemTextInDialog(dp : DialogPtr; itemNumber : SInt16; var s : String255);     external;
procedure SetItemTextInDialog(dp : DialogPtr; itemNumber : SInt16; s : String255);     external;
procedure IncrementeCompteurDeMouseEvents;     external;
procedure SetPortByDialog(dialog : DialogPtr);     external;
  function MyGetMenu(resourceID : SInt16) : MenuRef;     external;
  procedure EnleveEspacesDeDroiteItemsMenu(theMenu : MenuRef);     external;
function  MyCountMenuItems(theMenu : MenuRef) : UInt16;     external;
function GetTypeDonneesDistribution(nroDistrib : SInt16) : SInt16;     external;
function NbTotalPartiesDansDistributionSet(ensemble : DistributionSet) : SInt32;     external;
  function EnleveEspacesDeDroite(const s : String255) : String255;     external;
  procedure MyInsertMenuItem( theMenu: MenuRef; const itemString: String255; afterItem: MenuItemIndex );     external;
procedure MyEnableItem(theMenu : MenuRef; item: MenuItemIndex);     external;
	procedure TerminateMenu(var theMenu : MenuRef; provientDUneResource : boolean);     external;
function AnneePartiesFichierNouveauFormat(numFichier : SInt16) : SInt16;     external;
function NbPartiesFichierNouveauFormat(numFichier : SInt16) : SInt32;     external;
	function ParamStr(s, p0, p1, p2, p3 : String255) : String255;     external;
	function ReadStringFromRessource(stringListID, index : SInt16) : String255;     external;
procedure MyDrawDialog(dp : DialogPtr);     external;
procedure OutlineOK(dp : DialogPtr);     external;
	procedure MyGetMenuItemText( theMenu : MenuRef; item : MenuItemIndex; var itemString : String255 );     external;
function EstDansTableOuverture(nom : String255; var nroDansTable : SInt16) : boolean;     external;
function EstUneDistributionDeParties(nroDistrib : SInt16) : boolean;     external;
procedure GetDialogItemRect(dp : DialogPtr; itemNumber : SInt16; var itemRect : rect);     external;
function LitPartieNouveauFormat(numFichier : SInt16; nroPartie : SInt32; enAvancant : boolean; var theGame : t_PartieRecNouveauFormat) : OSErr;     external;
procedure RemplitTableCompatibleJoueurAvecCeBooleen(var table : t_JoueurCompatible; whichBoolean : boolean);     external;
procedure CalculeTableJoueursCompatibles(nomJoueur : String255; var compatible : t_JoueurCompatible; niveauxRecurence : SInt32);     external;
procedure DetermineIntervalleOuverture(var ouv : packed7; longueur : SInt16; var minimum,maximum : SInt32);     external;
function LitFichierIndexNouveauFormat(numFichierIndex : SInt16) : OSErr;     external;
function IndexerFichierPartiesEnMemoireNouveauFormat(numFichierParties : SInt16) : OSErr;     external;
function EcritFichierIndexNouveauFormat(numFichierParties : SInt16) : OSErr;     external;
procedure RemplitTableCompatibleTournoiAvecCeBooleen(var table : t_TournoiCompatible; whichBoolean : boolean);     external;
procedure CalculeTableTournoisCompatibles(nomTournoi : String255; var compatible : t_TournoiCompatible; niveauxRecurence : SInt32);     external;
function GetNomJoueur(nroJoueur : SInt32) : String255;     external;
  function DeleteSpacesBefore(const s : String255; p : SInt16) : String255;     external;
  procedure MyDeleteString( var s : String255; index, nb_chars_to_delete : SInt32);     external;
function GetNomTournoi(nroTournoi : SInt32) : String255;     external;
procedure TraduitNomTournoiEnMac(ancNom : String255; var nouveauNom : String255);     external;
  procedure WriteStringAt(s : String255; h,v : SInt32);     external;
procedure ExtraitPremierCoup(var premierCoup : SInt16; var autreCoupQuatreDiag : boolean);     external;
procedure TransposeCoupPourOrientation(var whichSquare : SInt16; autreCoupQuatreDiagonal : boolean);     external;
function CoupEnStringEnMajuscules(coup : SInt16) : String255;     external;
procedure SetPartieActive(nroReferencePartie : SInt32; flag : boolean);     external;
procedure SetAnneePartieParNroRefPartie(nroReference : SInt32; annee : SInt16);     external;
procedure SetPartieRecordParNroRefPartie(nroReference : SInt32; var GameRecord : t_PartieRecNouveauFormat);     external;
procedure SetNroDistributionParNroRefPartie(nroReference : SInt32; nroDistribution : SInt32);     external;
procedure SetPartieEstSansOrdinateur(nroReferencePartie : SInt32; flag : boolean);     external;
function GetJoueurEstUnOrdinateur(nroJoueur : SInt32) : boolean;     external;
procedure MetPartieDansTableStockageParties(nroReference : SInt32; var partieStr : PackedThorGame);     external;
procedure SetNroJoueurNoirParNroRefPartie(nroReference : SInt32; nroJoueur : SInt32);     external;
procedure SetNroJoueurBlancParNroRefPartie(nroReference : SInt32; nroJoueur : SInt32);     external;
procedure SetNroTournoiParNroRefPartie(nroReference : SInt32; nroTournoi : SInt32);     external;
procedure SetScoreReelParNroRefPartie(nroReference : SInt32; scoreReel : SInt16);     external;
procedure SetScoreTheoriqueParNroRefPartie(nroReference : SInt32; scoreTheorique : SInt16);     external;
function GetNomJoueurSansPrenom(nroJoueur : SInt32) : String255;     external;
procedure ConstruitTitrePartie(const nomNoir,nomBlanc : String255; enleverLesPrenoms : boolean; scoreNoir : SInt32; var titre : String255);     external;
	function IsDigit(ch : char) : boolean;     external;
	function TPCopy (source : String255; start, count: SInt32) : String255;     external;
  function ChaineEnLongint(const s : String255) : SInt32;     external;
function HasGotEvent(myEventMask : EventMask; var whichEvent : eventRecord; sleep : UInt32; mouseRgn : RgnHandle) : boolean;     external;
procedure FlushWindow(theWindow : WindowRef);     external;
	function MyTrunc(x : double) : SInt32;     external;
procedure TraductionThorEnAlphanumerique(const s : PackedThorGame; var result : String255);     external;
procedure Normalisation(var partie120 : String255; var autreCoupQuatreDiag : boolean; interversions : boolean);     external;
procedure TraductionAlphanumeriqueEnThor(const s : String255; var result : PackedThorGame);     external;
procedure PrecompileInterversions(var whichGame : PackedThorGame; longueur : SInt16);     external;
procedure RemplitTableCompatibleScoreAvecCeBooleen(var table : t_ScoreCompatible; whichBoolean : boolean);     external;
function MetJoueursEtTournoisEnMemoire(nomsAbreges : boolean) : OSErr;     external;
	procedure AttendFrappeClavierOuSouris(var isKeyEvent : boolean);     external;
function OuvreFichierNouveauFormat(numFichier : SInt16) : OSErr;     external;
procedure MoveMemory(sourcePtr,destPtr: Ptr; byteCount: SInt32);     external;
function GET_ADRESS_OF_FIRST_MOVE(var whichGame : PackedThorGame) : Ptr;     external;
procedure SET_LENGTH_OF_PACKED_GAME(var whichGame : PackedThorGame; whichLength : UInt8);     external;
procedure TraiteInterversionFormatThorCompile(var whichGame : PackedThorGame);     external;
function FermeFichierNouveauFormat(numFichier : SInt16) : OSErr;     external;
procedure DisableKeyboardScriptSwitch;     external;
procedure FinRapport;     external;
procedure TextNormalDansRapport;     external;
procedure ChangeFontSizeDansRapport(whichSize : SInt16);     external;
procedure ChangeFontDansRapport(whichFont : SInt16);     external;
procedure ChangeFontFaceDansRapport(whichStyle : StyleParameter);     external;
procedure EnableKeyboardScriptSwitch;     external;
  procedure WriteNumAt(s : String255; num : SInt32; h,v : SInt32);     external;
procedure WritelnDansRapportEtAttendFrappeClavier(s : String255; bip : boolean);     external;
procedure CalculTableCriteres;     external;
procedure SetAucunePartieDetruiteDansLaListe;     external;
procedure SetAucunePartieDeLaListeNeDoitEtreSauvegardee;     external;
procedure SetAucunePartieDeLaListeNEstDouteuse;     external;
procedure RecopierPartiesCompatiblesCommePartiesActives;     external;
  procedure SafeSetCursor(myCursor : CursHandle);     external;
procedure TrierListePartie(critereDeTri,algorithmeDeTri : SInt32);     external;
function DoitExpliquerTrierListeSuivantUnClassement : boolean;     external;
procedure SetDoitExpliquerTrierListeSuivantUnClassement(flag : boolean);     external;
function AlgoDeTriOptimum(critereDeTri : SInt32) : SInt32;     external;
procedure AjusteCurseur;     external;
procedure IncrementeMagicCookieDemandeCalculsBase;     external;
procedure ConstruitTableNumeroReference(infosDejaCalculees,withCheckEvent : boolean);     external;
function InclurePartiesAvecOrdinateursDansListe : boolean;     external;
procedure SetInclurePartiesAvecOrdinateursDansListe(flag : boolean);     external;
procedure EssayerConstruireTitrePartie;     external;
procedure SetPartieHiliteeEtAjusteAscenseurListe(numero : SInt32);     external;
procedure InitSelectionDeLaListe;     external;
function PartieNormalisee(var autreCoupQuatreDiag : boolean; interversions : boolean) : String255;     external;
procedure BeginDialog;     external;
procedure SwitchToScript(whichScript : SInt32);     external;
function MyGetNewDialog(dialogID : SInt16) : DialogPtr;     external;
function NewTableJoueurCompatiblePtr : t_JoueurCompatible;     external;
function NewTableTournoiCompatiblePtr : t_TournoiCompatible;     external;
function NewTableScoreCompatiblePtr : t_ScoreCompatible;     external;
procedure SetBoolCheckBox(dp : DialogPtr; itemNumber : SInt16; value : boolean);     external;
function Complemente(typeVoulu : SInt32; useMenuHistory : boolean; var prefixe : String255; var longueurPrefixe : SInt16; var found : boolean) : String255;     external;
function PeutArreterAnalyseRetrograde : boolean;     external;
procedure SetControlTitleInDialog(dp : DialogPtr; itemNumber : SInt16; var title : String255);     external;
procedure HiliteControlInDialog(dp : DialogPtr; itemNumber,hiliteState : SInt16);     external;
	function EventPopUpItemInDialog(dp : DialogPtr; menuTitleItem : SInt16; theMenu : MenuRef; var numItem : SInt16; menuRect : Rect; drawChoice, checkChoice : Boolean) : boolean;     external;
function PACKED_GAME_IS_A_DIAGONAL(const whichGame : PackedThorGame) : boolean;     external;
procedure TransposePartiePourOrientation(var partie60 : PackedThorGame; autreCoupQuatreDiagonal : boolean; minCoupTranspose,maxCoupTranspose : SInt32);     external;
procedure ToggleCheckBox(dp : DialogPtr; itemNumber : SInt16);     external;
procedure MyDisposeDialog(var dlog : DialogPtr);     external;
procedure DisposeTableJoueurCompatible(var table : t_JoueurCompatible);     external;
procedure DisposeTableTournoiCompatible(var table : t_TournoiCompatible);     external;
procedure DisposeTableScoreCompatible(var table : t_ScoreCompatible);     external;
procedure InvalRect(r : rect);     external;
function QDGetPortBound : rect;     external;
procedure MyDisposeModalFilterUPP(var userUPP : ModalFilterUPP);     external;
procedure EndDialog;     external;
procedure GetCurrentScript(var currentScript : SInt32);     external;
procedure SwitchToRomanScript;     external;
procedure DoStatistiques;     external;
procedure DoListeDeParties;     external;
function CassioEstEnModeSolitaire : boolean;     external;
function PeutParserReferencesSolitaire(references : String255; var noir,blanc,tournoi : String255) : boolean;     external;
procedure DialoguePartieFeeriqueAvantChargementBase;     external;
function FrontWindowSaufPalette : WindowPtr;     external;
procedure FixeMarqueSurMenuBase;     external;
procedure TraiteEvenements;     external;
function NomCourtDuTournoi(const nomOrigine : String255) : String255;     external;
function FichierTexteDeCassioExiste(nom : String255; var fic : FichierTEXT) : OSErr;     external;
function OuvreFichierTexte(var fic : FichierTEXT) : OSErr;     external;
function GetTailleFichierTexte(var fic : FichierTEXT; var taille : SInt32) : OSErr;     external;
function FermeFichierTexte(var fic : FichierTEXT) : OSErr;     external;
function EstUnFichierNouveauFormat(fic : FSSpec; var typeDonnees : SInt16; var entete : t_EnTeteNouveauFormat) : boolean;     external;
	function SplitAt (s : String255; const sub : String255; var s1, s2 : String255) : boolean;     external;
procedure SetFileCreatorFichierTexte(var fic : FichierTEXT; quelType : OSType);     external;
function RemplacerFichierDansLeDossierDatabaseParFichier(nomARemplacer : String255; var fichierACopier : FichierTEXT) : OSErr;     external;
	function FSSpecToFullPath (fs : FSSpec; var path : String255) : OSErr;     external;
function TrouverSlotLibreDansLaReservePourTelecharger(var numeroSlotLibre : SInt32) : boolean;     external;
function MakeLongString(const s : String255) : LongString;     external;
function MakeFichierAbstraitFichier(nomFichier : String255 ; vRefNum : SInt16) : FichierAbstrait;     external;
function ViderFichierAbstrait(var theFile : FichierAbstrait) : OSErr;     external;
function FichierAbstraitEstCorrect(const theFile : FichierAbstrait) : boolean;     external;
procedure DownloadURLToFichierAbstrait(numeroSlot : SInt32; var url : LongString; var whichFichierAbstrait : FichierAbstrait; terminationProc : FichierAbstraitLongintProc);     external;
function SetPositionTeteLectureFichierTexte(var fic : FichierTEXT; position : SInt32) : OSErr;     external;
function EOFFichierTexte(var fic : FichierTEXT; var erreurES : OSErr) : boolean;     external;
function ReadlnDansFichierTexte(var fic : FichierTEXT; var s : String255) : OSErr;     external;
  function EnleveEspacesDeGauche(const s : String255) : String255;     external;
	procedure UpCaseString (var s : String255);     external;
	function SplitAt (s : String255; sub : char; var s1, s2 : String255) : boolean;     external;
function WritelnDansFichierTexte(var fic : FichierTEXT; s : String255) : OSErr;     external;
function CreeFichierTexteDeCassio(nom : String255; var fic : FichierTEXT) : OSErr;     external;
function VideFichierTexte(var fic : FichierTEXT) : OSErr;     external;
procedure ForEachLineInFileDo(whichFile : FSSpec ; DoWhat : LineOfFileProc; var result : SInt32);     external;
function InsererFichierTexteDansFichierTexte(var insere,receptacle : FichierTEXT) : OSErr;     external;
function GetFichierTEXTOfFichierAbstraitPtr(theAbstractFilePtr : FichierAbstraitPtr; var fic : FichierTEXT) : OSErr;     external;
	function GetFullPathOfFSSpec(fs : FSSpec) : String255;     external;
procedure DisposeFichierAbstrait(var theFile : FichierAbstrait);     external;
procedure Parser4(s : String255; var s1,s2,s3,s4,reste : String255);     external;
function TailleTheoriqueDeCeFichierNouveauFormat(numFichier : SInt16) : SInt32;     external;
function GetNroPremierFichierAvecCeNom(nom : String255) : SInt16;     external;
function StringSimpleEnReel(alpha : String255) : double;     external;
function GarderSeulementLesChiffresOuLesPoints(var s : String255) : String255;     external;
procedure WritelnStringAndReelDansRapport(s : String255; x : double; nbDecimales : SInt16);     external;
function TrouveNumeroDuTournoi(const nomTournoi : String255; var numeroTournoi : SInt32; fromIndex : SInt32) : boolean;     external;
function TransformePourPerfectMatch(s : String255) : String255;     external;

