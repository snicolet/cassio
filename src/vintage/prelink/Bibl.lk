	function Min (a, b: SInt32) : SInt32;     external;
	function Max (a, b: SInt32) : SInt32;     external;
	procedure AttendFrappeClavier;     external;
procedure WritelnDansRapport(s : String255);     external;
procedure WriteDansRapport(s : String255);     external;
procedure WritelnNumDansRapport(s : String255; num : SInt32);     external;
procedure WriteNumDansRapport(s : String255; num : SInt32);     external;
procedure WritelnStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WritelnDansRapportThreadSafe(s : String255);     external;
function PositionDansStringAlphaEnCoup(const s : String255; positionDansChaine : SInt16) : SInt16;     external;
procedure FILL_PACKED_GAME_WITH_ZEROS(var game : PackedThorGame);     external;
procedure COPY_STR60_TO_PACKED_GAME(const s60 : String255; var result : PackedThorGame);     external;
procedure PrecompileInterversions(var whichGame : PackedThorGame; longueur : SInt16);     external;
procedure COPY_PACKED_GAME_TO_PACKED_GAME(const source : PackedThorGame; whichLength : UInt8; var result : PackedThorGame);     external;
procedure MoveMemory(sourcePtr,destPtr: Ptr; byteCount: SInt32);     external;
function GET_ADRESS_OF_NTH_MOVE(var whichGame : PackedThorGame; n : UInt8) : Ptr;     external;
procedure SET_LENGTH_OF_PACKED_GAME(var whichGame : PackedThorGame; whichLength : UInt8);     external;
procedure TraiteInterversionFormatThorCompile(var whichGame : PackedThorGame);     external;
  function PChancesSurN(P,N : SInt32) : boolean;     external;
	procedure RandomizeTimer;     external;
function PartieNormalisee(var autreCoupQuatreDiag : boolean; interversions : boolean) : String255;     external;
  function UneChanceSur(N : SInt32) : boolean;     external;
function GetNiemeCoupPartieCourante(numeroDuCoup : SInt32) : SInt32;     external;
procedure PrepareTexteStatePourEcritCoupsBibl;     external;
procedure DessinePourcentage(square,n : SInt16);     external;
function CassioEstEn3D : boolean;     external;
function EnModeEntreeTranscript : boolean;     external;
procedure PrepareTexteStatePourCommentaireOuverture;     external;
procedure EcritCommentaireOuverture(commentaire : String255);     external;
procedure EffaceCommentaireOuverture;     external;
procedure EffaceAideDebutant(avecDessinAutresInfosSurLesCases,effacageLarge : boolean; surQuellesCases : SquareSet; fonctionAppelante : String255);     external;
procedure DessineAideDebutant(avecDessinAutresInfosSurLesCases : boolean; surQuellesCases : SquareSet);     external;
function GetAffichageProprietesOfCurrentNode : UInt32;     external;
	procedure DrawStringPourGNUPascal(const s : String255);     external;
function EstUnePartieOthello(var s : String255; compacterPartie : boolean) : boolean;     external;
procedure RejouePartieOthello(s : String255; coupMax : SInt16; positionDepartStandart : boolean; platImpose : plateauOthello; traitImpose : SInt16; var gameNodeLePlusProfondGenere : GameTree; peutDetruireArbreDeJeu : boolean; avecNomsOuvertureDansArbre : boolean);     external;
	function TPCopy (source : String255; start, count: SInt32) : String255;     external;
  procedure EnleveEspacesDeGaucheSurPlace(var s : String255);     external;
  procedure EnleveEspacesDeDroiteSurPlace(var s : String255);     external;
procedure CompacterPartieAlphanumerique(var s : String255; modification : SInt16);     external;
procedure Normalisation(var partie120 : String255; var autreCoupQuatreDiag : boolean; interversions : boolean);     external;
function CoupEnStringEnMajuscules(coup : SInt16) : String255;     external;
  function PourcentageEntierEnString(num : SInt32) : String255;     external;
function GetScreenBounds : rect;     external;
	function MyNewCWindow( wStorage: UnivPtr; const boundsRect: Rect; const  title: String255; visible: Boolean; procID: SInt16; behind: WindowRef; goAwayFlag: Boolean; refCon: SInt32 ): WindowRef;     external;
function FenetreFictiveAvantPlan : WindowPtr;     external;
procedure SetPortByWindow(window : WindowPtr);     external;
  procedure DeleteString( var s : String255; index, nb_chars_to_delete : SInt32);     external;
  procedure MyAppendMenu( menu: MenuRef; const data: String255 );     external;
  function EnleveEspacesDeGauche(const s : String255) : String255;     external;
  function DeleteSpacesBefore(const s : String255; p : SInt16) : String255;     external;
procedure SetProgress(absoluteAmount : SInt32);     external;
	function MyTrunc(x : double_t) : SInt32;     external;
	function ReadStringFromRessource(stringListID, index : SInt16) : String255;     external;
function StringEnCoup(const s : String255) : SInt16;     external;
  procedure ChaineToLongint(const s : String255; var theLongint : SInt32);     external;
function FichierTexteExiste(nom : String255 ; vRefNum : SInt16; var fic : FichierTEXT) : OSErr;     external;
function FichierTexteDeCassioExiste(nom : String255; var fic : FichierTEXT) : OSErr;     external;
  function ReplaceStringByStringInString(const pattern,replacement,s : String255) : String255;     external;
procedure InitProgressIndicator(whichWindow : WindowRef; r : rect; maximum : SInt32; PourKaleidoscope : boolean);     external;
	function MakeRect(left, top, right, bottom : SInt32) : Rect;     external;
procedure SetDebuggageUnitFichiersTexte(flag : boolean);     external;
	function ParamStr(s, p0, p1, p2, p3 : String255) : String255;     external;
  procedure ShareTimeWithOtherProcesses(quantity : SInt32);     external;
	procedure CenterString(h, v, w : SInt16; s : String255);     external;
function QDGetPortBound : rect;     external;
function OuvreFichierTexte(var fic : FichierTEXT) : OSErr;     external;
	procedure TerminateMenu(var theMenu : MenuRef; provientDUneResource : boolean);     external;
  function MyGetMenu(resourceID : SInt16) : MenuRef;     external;
function EOFFichierTexte(var fic : FichierTEXT; var erreurES : OSErr) : boolean;     external;
function ReadlnDansFichierTexte(var fic : FichierTEXT; var s : String255) : OSErr;     external;
function FermeFichierTexte(var fic : FichierTEXT) : OSErr;     external;
procedure EssaieSetPortWindowPlateau;     external;
