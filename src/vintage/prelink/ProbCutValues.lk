	function Min (a, b: SInt32) : SInt32;     external;
	function Max (a, b: SInt32) : SInt32;     external;
procedure WritelnDansRapport(s : String255);     external;
procedure WriteDansRapport(s : String255);     external;
procedure WritelnNumDansRapport(s : String255; num : SInt32);     external;
procedure WriteNumDansRapport(s : String255; num : SInt32);     external;
procedure WritelnStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBoolDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleenDansRapport(s : String255; b : boolean);     external;
procedure WritelnStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WriteStringAndBooleanDansRapport(s : String255; b : boolean);     external;
procedure WritelnDansRapportThreadSafe(s : String255);     external;
function DimensionDuPointMultidimensionnel(var p : PointMultidimensionnel) : SInt32;     external;
function AllocatePointMultidimensionnel(n : SInt32; var p : PointMultidimensionnel) : boolean;     external;
procedure StraightLineFitting(var x,y,sigma : PointMultidimensionnel; nData : SInt32; variancesIndividuellesConnues : boolean; var a,b,sigmaa,sigmab,chi2,q : TypeReel);     external;
procedure SetValeurDansPointMultidimensionnel(var p : PointMultidimensionnel; valeur : TypeReel);     external;
procedure CombinaisonLineairePointMultidimensionnel(var p1,p2 : PointMultidimensionnel; lambda1,lambda2 : TypeReel; var resultat : PointMultidimensionnel);     external;
procedure DiffPointMultidimensionnel(var p1,p2,resultat : PointMultidimensionnel);     external;
procedure MomentsOfPointMultidimensionnel(var data : PointMultidimensionnel; nData : SInt32; var moyenne, deviationAbsolueMoyenne, standardDeviation, variance, skewness, kurtosis : TypeReel);     external;
  function RealToLongint(r : double) : SInt32;     external;
procedure DisposePointMultidimensionnel(var p : PointMultidimensionnel);     external;
procedure HLockAllProfsDansDansTableOfMoveRecordsLists;     external;
procedure HUnlockAllProfsDansDansTableOfMoveRecordsLists;     external;
function GetCurrentInterruption : SInt16;     external;
procedure EnleveCetteInterruption(typeInterruption : SInt16);     external;
procedure PlaquerPosition(plat : plateauOthello; trait : SInt16; flags : SInt32);     external;
procedure DoChangeHumCtreHum;     external;
procedure DoMilieuDeJeuAnalyse(selectedByMenu : boolean);     external;
function CalculePhasePartie(numeroCoup : SInt16) : SInt16;     external;
procedure ReinitilaliseInfosAffichageReflexion;     external;
procedure EffaceReflexion(effacerAussiLeRuban : boolean);     external;
function AQuiDeJouer : SInt32;     external;
procedure LanceChrono;     external;
procedure EcritJeReflechis(coulChoix : SInt16);     external;
procedure Superviseur(n : SInt16);     external;
procedure Initialise_table_heuristique(jeu : plateauOthello; debug : boolean);     external;
procedure Calcule_Valeurs_Tactiques(plat : plateauOthello; avecCalculCentre : boolean);     external;
procedure SetProfImposee(flag : boolean; const fonctionAppelante : String255);     external;
function CalculeMeilleurCoupMilieuDePartie(const jeu : plateauOthello; var emplBool : plBool; var frontiere : InfoFront; couleur,profondeur,nbBlancs,nbNoirs : SInt32) : MoveRecord;     external;
procedure LanceInterruption(typeInterruption : SInt16; const fonctionAppelante : String255);     external;
procedure ForEachPositionInGameDo(partie60 : PackedThorGame; DoWhat : MilieuDePartieProc; var result : SInt32);     external;
function EndOfFile(var fic : basicfile; var erreurES : OSErr) : boolean;     external;
function Read(var fic : basicfile; var value : SInt32) : OSErr;     external;
function LitPointMultidimensionnelDansFichierTexte(var fic : basicfile; var p : PointMultidimensionnel) : OSErr;     external;
procedure CopierPointMultidimensionnel(var source,dest : PointMultidimensionnel);     external;
function Writeln(var fic : basicfile; value : SInt32) : OSErr;     external;
function EcritPointMultidimensionnelDansFichierTexte(var fic : basicfile; var p : PointMultidimensionnel) : OSErr;     external;
function FichierTexteDeCassioExiste(nom : String255; var fic : basicfile) : OSErr;     external;
function OpenFile(var fic : basicfile) : OSErr;     external;
function CloseFile(var fic : basicfile) : OSErr;     external;
function FileExists(nom : String255 ; vRefNum : SInt16; var fic : basicfile) : OSErr;     external;
function CreeFichierTexteDeCassio(nom : String255; var fic : basicfile) : OSErr;     external;
function EmptyFile(var fic : basicfile) : OSErr;     external;
procedure SetFileCreatorFichierTexte(var fic : basicfile; quelType : OSType);     external;
procedure SetFileTypeFichierTexte(var fic : basicfile; quelType : OSType);     external;
procedure ForEachGameInListDo(FiltreNumRef : FiltreNumRefProc; FiltreGame : FiltreGameProc; DoWhat : GameInListProc; var result : SInt32);     external;
function bidFiltreNumRefProc(numeroDansLaListe,numeroReference : SInt32; var result : SInt32) : boolean;     external;
function bidFiltreGameProc(var partie60 : PackedThorGame; numeroRefPartie : SInt32; var result : SInt32) : boolean;     external;
