Unit LexYaccIO;{$I+}INTERFACE{$IFC (DEFINED SystemSevenOrLater) | true}   {$SETC LEX_MACINTOSH := true }   {$SETC YACC_MACINTOSH := true }   {$SETC USE_UNIT_FICHIERS_TEXT := false }{$ENDC}{$IFC LEX_MACINTOSH or YACC_MACINTOSH}  uses    UnitFichiersTEXT,CommandLine;{$ELSEC}{$ENDC}type{$IFC LEX_MACINTOSH & USE_UNIT_FICHIERS_TEXT}   lex_yacc_file_type = FichierTEXT;{$ELSEC}   lex_yacc_file_type = text;{$ENDC}procedure lex_yacc_assign(var theFile : lex_yacc_file_type; file_name : string);procedure lex_yacc_reset(var theFile : lex_yacc_file_type; file_name : string);procedure lex_yacc_rewrite(var theFile : lex_yacc_file_type; file_name : string);procedure lex_yacc_erase(var theFile : lex_yacc_file_type; file_name : string);function  lex_yacc_eof(var theFile : lex_yacc_file_type):boolean;function  lex_yacc_get_file_size(file_name : string) : longint;procedure lex_yacc_file_readln(var theFile : lex_yacc_file_type; var which_line : string);procedure lex_yacc_file_writeln(var theFile : lex_yacc_file_type; which_line : string);procedure lex_yacc_get_memory(var p: univ ptr;count:longint);procedure lex_yacc_move_memory(srcPtr: UNIV Ptr;destPtr: UNIV Ptr; byteCount: Size);procedure lex_yacc_int_to_string(num:longint;var s:string);procedure lex_yacc_string_to_int(s:string;var num:integer;var res:integer);procedure lex_yacc_halt_program(result:integer);function lex_yacc_param_count():integer;function lex_yacc_command_line_parameter(param_number:integer):string;IMPLEMENTATIONprocedure lex_yacc_assign(var theFile : lex_yacc_file_type; file_name : string);{$IFC LEX_MACINTOSH}   {$IFC USE_UNIT_FICHIERS_TEXT}   var err : OSErr;   begin     err := FichierTexteExiste(file_name,0,theFile);     if (err = fnfErr) then       err := CreeFichierTexte(file_name,0,theFile);   end;   {$ELSEC}   var err : OSErr;       fic:FichierTEXT;   begin {$UNUSED theFile}     if file_name<>'' then       begin		     err := FichierTexteExiste(file_name,0,fic);		     if (err = fnfErr) then		       err := CreeFichierTexte(file_name,0,fic);		   end;   end;   {$ENDC}{$ELSEC}   begin     assign(theFile,filename);   end;{$ENDC}procedure lex_yacc_reset(var theFile : lex_yacc_file_type; file_name : string);{$IFC LEX_MACINTOSH}   begin     reset(theFile,file_name);   end;{$ELSEC}   begin     reset(theFile);   end;{$ENDC}procedure lex_yacc_rewrite(var theFile : lex_yacc_file_type; file_name : string);{$IFC LEX_MACINTOSH}   begin     rewrite(theFile,file_name);   end;{$ELSEC}   begin     rewrite(theFile);   end;{$ENDC}procedure lex_yacc_erase(var theFile : lex_yacc_file_type; file_name : string);{$IFC LEX_MACINTOSH}   var err : OSErr;       fic : FichierTEXT;   begin {$UNUSED theFile}     err := FichierTexteExiste(file_name, 0, fic);     if err = NoErr then       err := EffaceFichierTexte(fic);   end;{$ELSEC}   begin     erase(theFile);   end;{$ENDC}function lex_yacc_eof(var theFile : lex_yacc_file_type):boolean;{$IFC LEX_MACINTOSH & USE_UNIT_FICHIERS_TEXT}   var foo : OSErr;   begin     lex_yacc_eof:=EOFFichierTexte(theFile,foo);   end;{$ELSEC}   begin     lex_yacc_eof:=eof(theFile);   end;{$ENDC}function lex_yacc_get_file_size(file_name : string) : longint;{$IFC LEX_MACINTOSH}   var f : FichierTEXT;       err : OSErr;       the_file_size:longint;   begin     the_file_size:=0;     err:=FichierTexteExiste(file_name,0,f);     if err=NoErr then       begin         err := OuvreFichierTexte(f);         err := GetTailleFichierTexte(f, the_file_size);         err := FermeFichierTexte(f);       end;     lex_yacc_get_file_size := the_file_size;   end;{$ELSEC}   var f : File;   begin     assign(f, file_name);     reset(f, 1);     if ioresult=0 then       file_size := fileSize(f)     else       file_size := 0;     close(f);   end;{$ENDC}procedure lex_yacc_file_readln(var theFile : lex_yacc_file_type; var which_line : string);{$IFC LEX_MACINTOSH & USE_UNIT_FICHIERS_TEXT}   var foo : OSErr;   begin     foo:=ReadlnDansFichierTexte(theFile,which_line);   end;{$ELSEC}   begin     readln(theFile, which_line);   end;{$ENDC}procedure lex_yacc_file_writeln(var theFile : lex_yacc_file_type; which_line : string);{$IFC LEX_MACINTOSH & USE_UNIT_FICHIERS_TEXT}   var foo : OSErr;   begin     foo:=WritelnDansFichierTexte(theFile,which_line);   end;{$ELSEC}   begin     writeln(theFile, which_line);   end;{$ENDC}procedure lex_yacc_get_memory(var p: univ ptr;count:longint);{$IFC LEX_MACINTOSH}   begin     p:=NewPtr(count);   end;{$ELSEC}   begin     getmem(p,count);   end;{$ENDC}procedure lex_yacc_move_memory(srcPtr: UNIV Ptr;destPtr: UNIV Ptr; byteCount: Size);{$IFC LEX_MACINTOSH}   begin     BlockMove(srcPtr,destPtr,byteCount);   end;{$ELSEC}   begin     move(srcPtr^,destPtr^,byteCount);   end;{$ENDC}procedure lex_yacc_int_to_string(num:longint;var s:string);{$IFC LEX_MACINTOSH}   begin     NumToString(num,s);   end;{$ELSEC}   begin     str(num, s);   end;{$ENDC}procedure lex_yacc_string_to_int(s:string; var num:integer; var res:integer);{$IFC LEX_MACINTOSH}   var i, the_long : longint;   begin     if (s = '') | not(s[1] in ['0'..'9','+','-']) then       begin         res := -1;         num := 0;         exit(lex_yacc_string_to_int);       end;     res := 0;     StringToNum(s, the_long);     num := the_long;     for i := 2 to length(s) do       if not(s[i] in ['0'..'9']) then inc(res);   end;{$ELSEC}   begin     val(s, num, res);   end;{$ENDC}procedure lex_yacc_halt_program(result:integer);{$IFC LEX_MACINTOSH}   begin     {$UNUSED result}     AttendFrappeClavier;     ExitToShell;   end;{$ELSEC}   begin     lex_yacc_halt_program(result);   end;{$ENDC}function lex_yacc_param_count():integer;{$IFC LEX_MACINTOSH}   begin     lex_yacc_param_count := Command_line_param_count();   end;{$ELSEC}   begin     lex_yacc_param_count := paramCount;   end;{$ENDC}function lex_yacc_command_line_parameter(param_number:integer):string;{$IFC LEX_MACINTOSH}   begin     lex_yacc_command_line_parameter := Get_command_line_parameter(param_number);   end;{$ELSEC}   begin     lex_yacc_command_line_parameter := paramStr(param_number);   end;{$ENDC}END.